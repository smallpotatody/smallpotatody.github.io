<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux]]></title>
    <url>%2F2019%2F07%2F18%2Flinux%2F</url>
    <content type="text"><![CDATA[终端tty控制台终端 ​ tty1-tty6 ​ tty1既是图形界面（默认） ​ 图形界面切换到字符界面终端：ctrl + shift + alt + F2~F6 ​ 字符界面切花到图形界面终端：alt + F1 pts虚拟终端 ​ ctrl + alt + t 打开新终端 查看系统和BIOS硬件时间：指的是bios时间 Linux如何获得帮助？方法1：加参数-h 或–help； 方法2：man 加命令； 关机命令：shutdown、initial、reboot shutdown 作用：关机、重启、定时关机 语法：#shutdown [选项] 选项： ​ -r：重新启动计算机 ​ -h：关机 ​ -h 时间：定时关机 ​ -c：取消之前的定时关机 123shutdown -h now #马上关机shutdown -h +10 #10分钟后关机shutdown -h 20:02 #在20：02时关机 init 作用：切换运行级别 语法：init 0~6 12init 0 #命令用于立即将系统运行级别切换为0，即关机；init 6 #命令用于将系统运行级别切换为6，即重新启动； runlevel 作用：查看当前运行级别 语法：#runlevel !$；表示上一个命令的最后一个参数； 同一目录下文件和文件名不一样。 字符操作：i 当前插入 I 行首插入 a 当前字符之后插入 A 行尾插入 o 下一行插入 O 上一行插入 x 向后删除一个字符 X 向前删除一个字符 u 撤销一步 词操作dw 删除一个词，删除时要将光标移动到这个词的行首。另外，如果光标不在行首，则删除光标之后的字母。 yw 复制一个词 快操作大D或d + $ 删至行尾 d+^删至行首 y + $ 复制至尾 y + ^ 复制至首 v模式进入v模式，移动光标选择区域 编程时需要进行多行注释： 注释：CTRL + v进入列编辑模式 向下或向上移动光标 把需要注释的行的开头标记起来 然后按大写的I 再插入注释符，比如’#’ 再按Esc，就会全部注释了 linux文件系统由三部分组成：文件名，inode，block（真正存数据）indoe：文件数据都储存在’块中‘，那么很显然，我们还必须找一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域叫做inode，中文名译为”索引节点“。 inode的内容inode包含文件的元信息 ​ 文件的字节数 ​ 文件拥有者的User ID ​ 文件的Group ID ​ 文件的读、写、执行权限 ​ 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上依次打开的时间。 ​ 链接数，即有多少文件名指向这个inode ​ 文件数据block的位置 使用stat命令查看文件inode信息 inode的大小inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。 查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。 每个文件最少有一个inode号。操作系统号码来识别不同文件。 使用ls -i命令，可以看到文件名对应的inode号码： Linux中ctime，mtime，atime的区别 ctime：”改变时间（change time）“ mtime：”修改时间（modification time）“ 改变和修改之间的区别在于是改文件的属性还是更改它的内容。chmod a-w myfile，那么这是一个改变； echo foo &gt;&gt; myfile,那么这是一个修改。 改变是文件的索引节点发生来改变；修改是文本本身的内容发生了变化。 atime：”访问时间（access time）“ 访问时间是文件最后一次被读取时间。因此阅读一个文件会更新它的访问时间。但是它的修改时间和改变时间没有变。 123ls -lc filename #列出文件的ctimels -lu filename #列出文件的atimels -l filename #列出文件的mtime ext4文件系统比ext3文件系统强的方面： ext4与ext3兼容 更大的文件系统和更大的文件。交织Ext3目前所支持的最大16TB文件系统和最大2 TB文件，Ext4分别支持1EB（1,048,576TB，1EB=1024PB，1PB=1024TB）的文件系统，以及16TB的文件。 无限数量的子目录。Ext3目前只支持32,000个子目录，而Ext4支持无限数量的子目录。 ”无日志“（No Journaling）模式。日志总归有一些开销，Ext4允许关闭日志，以便某些有特殊需求的用户可以借此提升性能。 LUKS（Linux UNified Key Setup）为Linux硬盘加密提供了一种标准 ​ cryptsetup是linux下的一个分区加密工具，是在经过加密的块设备上再创建文件系统，然后再进行挂在使用，可以达到最底层的加密。 首先对硬盘进行分区： ​ fdisk /dev/sdb ​ fdisk #分出一个sdb1 ​ fdisk -l 下面开始对分区进行加密 #cryptsetup luksFormat/dev/sdb1设置为加密分区 ​ 出现要输入yes的地方一定要输入YES 映射 cryptsetup luksOpen /dev/sdb1 disk1#将分区映射成disk1，则这个设置就在/dev/mapper中 mkfs.ext4 /dev/mapper/disk1 格式化加密分区 mount /dev/mapper/disk1/mnt/luks 挂载加密分区 df查看分区挂载情况 umount /dev/mapper/disk1 卸载分区 cryptsetup luksClose/dev/mapper/disk1 关闭加密分区 生成加密分区的密码文件，实现开机自动挂载加密分区 vi /etc/crpttab 写入： disk1 /dev/sdb1 /root/key 如果这里写none的话，当系统启动时在读取分区时候，会一直停在那，等待输入密码 echo -n &quot;123&quot; &gt; /root/key 生成密码文件 chmod 700 /root/key 修改权限 cryptsetup luksAddKey/dev/sdb1/root/key 添加口令到/dev/sdb1中 cat /etc/crypttab disk1 /dev/sdb1 /root/key vi /etc/fstab自动挂载文件 ​ /dev/mapper/disk1 /mnt/luks ext4 defaults 0 0 mount -a 重新挂载/etc/fstab里的内容，如果报错的话就需要重启系统 转码iconv -f gb2312 1.txt -o 2.txt 解决将公司服务器上脚本导到windows上打开串行问题 这是因为windows和Linux处理回车不同。 unix2dos 文件名 用户分类：根据账号的位置：本地帐号、远程（域）账号。 根据账号功能： ​ 超级用户（root） UID ：0 ​ 普通用户 ​ 系统用户 UID：1-499 ​ 本地用户 UID：500+ 组分类：根据账号的位置：本地组、远程（域）组。 根据账号功能： ​ 超级用户组（root） UID ：0 ​ 普通用户组 ​ 系统用户组 UID：1-499 ​ 本地用户组 UID：500+ 关于系统用户和组的相关配置文件： ​ 账号信息 密码信息 用户： /etc/passwd /etc/shadow 组： /etc/group /etc/gshadow passwd中的伪用户：/etc/passwd文件中常见的伪用户 伪用户 含义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有账户文件 uucp UUCP使用 Ip Ip或Ipd子系统使用 nobody NFS使用 源码安装nginx，运行nginx web服务默认使用nobody用户 ​ 用户名：密码：最近更改密码的日期（从19700101开始计算）：密码不能更改的天数（最近被改过之后几天后才可以再次更改。0表示随时可以修改）：密码过期时间（多少天后必须再次修改）：密码需要更改期限到来前7发出警告：宽限天数（密码过了几天后还能改密码）：账号过期时间：保留 为多个用户输入初始密码#echo 密码 | passwd --stdin 用户名 # –stdin非交互添加密码 Linux用户密码加密 控制添加用户规则的文件 HOME=/home #哪个目录作为用户主目录存放目录。如果你不想让用户家目录在/home下，可以修改这个地方。 SHELL=/bin/bash #默认shell使用哪个 SKEL=/etc/skel #模板目录 查看用户信息相关命令：id 用户名 whoami w who 用户切换#su [-] username加-用户和shell环境一起切换。 进入单用户找回root身份编辑/etc/passwd，vim /etc/passwd将root​：x：变成root：：​ 文件基本权限(不适用于root) 对于文件： ​ r读 w写 x执行 对于目录： ​ r读（看到目录里面有什么） ​ w建文件、删除、移动 ​ x进入 修改权限命令chmod 作用：修改文件权限 u + r g - w o = x a + x a表示所有（u、g、o） 修改文件夹权限 使用数字表示权限rwx r– -w- –x 100 010 001 r=4 w=2 x=1 rw-的值是6 ，rwx r-x r-x的值是755 chmod a=rwx a.txt 等于 chmod 777 a.txt chown作用：修改文件拥有者和所属组 语法： 123chown USER:GROUP 对象chown USER 对象chown :GROUP 对象 -R 递归（目录下的所有内容全部更改，否则只修改目录） 设置文件默认权限的补码： 系统用户：#umask 022 普通用户：#umask 002 计算方法： ​ 文件默认权限=666 - umask值 666-022=644 ​ 目录默认权限=777 - umask值 注意：这是一个好的记忆方法，但不严谨。 umask掩码为033. 666 - 033=633 结果为：644 110110110（666）与111100100（033的反码）相与得到110100100（644） 特殊权限SUID SGID Stickybit s对应的数值为：4 s，2 t，1 SUID： 限定：只能设置在二进制可执行程序上面。对目录文本设置无效。 功能：程序运行时的权限从执行者变更成程序的所有者。 SGID： 限定：既可以给二进制可执行程序设置，也可以给目录设置。 功能：在设置了SGID权限的目录下建立文件是，新创建的文件的所属组会继承上级目录的所属组。 Stickybit： 限定：只作用于目录 功能：目录下创建的文件只有root、文件创建者、目录所有者才能删除。 一个让root都无法删除的文件 chattr lsattr +a 只能追加内容 +i 不能被修改 tar命令作用：打包、压缩文件 #c create 创建 #v 详细 #f filename file命令作用：查看文件类型 用法：file 文件路劲 注意：Linux系统不根据后缀名识别文件类型 不解包，查看tar中的内容： ​ tar -tvf a.tar 解包： ​ tar -xvf a.tar 指定解压路径： ​ tar -xf a.tar -C /home tar归档+压缩格式（后缀名）:.tar.gz 或 .tgz 语法：tar cvzf newfile.tar.gz SOUPCE tar -zxf a.tar -C /home bz2 归档+压缩tar -cjvf a.tar.bz2 /root 解压：tar jxf a.tar.bz2 -C /root/a zip软件包解压缩命令zip是压缩程序，unzip是解压程序。 压缩文件： ​ zip a.zip /etc/passwd 压缩目录： ​ zip -r a.zip /root 解压缩： ​ unzip a.zip ​ unzip a.zip -d /home 进程管理查看进程树： pstree树型结构显示系统进程信息 -p显示进程号 ps命令 USER：运行此进程的用户名 PID：该process的号码 %CPU：该进程使用掉的CPU资源百分比 %MEM：该进程所占用的物理内存百分比 VSZ：该进程使用掉的虚拟内存量（kbytes） RSS：该进程占用的固定的内存量（kbytes） TTY：该进程是在哪个终端上面运作，若与终端机无关，则显示？，另外，tty1~tty6市本级上面的登入者程序，若为pts/0等等的，则表示为由网络连接进主机的程序。 STAT：该进程目前的状态，Linux进程有5种基本状态： ​ R：（正在运行或在运行队列中等待）； ​ S：该程序目前正在睡眠中，但是可被某些讯号（signal）唤醒。 ​ T：该程序目前暂停了； ​ Z：该程序应该已经终止，但是其父程序却无法正常的终止它，造成zombie（僵尸）程序的状态； ​ D：不可中断状态； ctrl + c是发送SIGINT信号，终止一个进程 ctrl + z是发送SIGSTOP信号，挂起一个进程。 &lt; 高优先级的 N 低优先级的 L 有内存分页但是带锁 s 包含子进程 I 多线程 + 前台程序（） START：该进程被触发启动的时间 TIME：该进程实际使用CPU运作的时间 COMMAND：该进程的实际指令 ps -aux是用BSD的格式来显示进程 ps -ef是用标准的格式显示进程 top命令作用：动态查看进程 统计信息区前五行是系统整体的统计信息 1.第一行是任务队列信息，同uptime命令的执行结果相同 14:35:50 当前时间 up 3:25 系统运行时间，格式为时：分 2 users 当前登录用户数 load average: 0.08, 0.03, 0.05 系统负载，即任务队列的平均长度。三个值分别为1分钟、5分钟、15分钟前到现在的平均值。 2.第二、三行为进程和CPU的信息 Tasks: 198 total 进程总数 1 running 正在运行的进程数 197 sleeping 睡眠进程数 0 stopped 停止进程数 0 zombie 僵尸进程数 %Cpu(s): 1.3 us 系统用户进程使用CPU百分比 0.3 sy 内核空间占用CPU百分比 0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比 98.3 id 空闲CPU百分比 3.第四、五行为内存信息 KiB Mem : 997956 total 物理内存总量 62328 free 空闲内存总量 739828 used 使用的物理内存总量 195800 buff/cache 用作内核缓存的内存量和free -k一个意思 KiB Swap: 2097148 total 交换区总量 1914364 free 空闲交换区总量 182784 used 使用的交换区总量 57860 avail Mem 缓冲的交换区总量 进程信息 PID 进程id USER 进程所有者的用户名 NI 进程优先级，nice值。负值表示高优先级，正值表示低优先级 RES 实际使用内存大小 top快捷键： 默认3s刷新一次 空格：立即刷新 q退出 M按内存排序 P按CPU排序 kill命令kill -9 pid killall或plill 通过程序的名字，直接杀死所有进程 文件查找方法which：查看可执行文件的位置 whereis：查看可执行文件的位置及相关文件 locate：配合数据库缓存，快速查看文件位置 find：实际搜寻硬盘查询文件名称 grep：过滤 find搜索文件系统、实时搜索find [目录] [条件] [动作] 不输入代表当前目录 类型：-type（f 文件，d 目录，I 链接，p 管道，c 字符文件，b 快文件，s socket文件） 名字：-name 大小：-size +NM大于兆 -NG小NGB 时间： -mtime -atime -ctime 查看命令cat -s多个空行合并成一个空行显示 cat -b加行号显示 nl 加行号 cp 源文件路径 目的路径 -i覆盖时交互提示： touch创建一个已经存在的文件时，只更新时间戳]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用virtualbox安装centos]]></title>
    <url>%2F2019%2F06%2F13%2F%E7%94%A8virtualbox%E5%AE%89%E8%A3%85centos%2F</url>
    <content type="text"><![CDATA[一、安装Virtual Box1.下载virtual box官网 2.安装virtual box安装完成后查看网络出现Virtual Box Host-Only Network表示安装成功 二、配置虚拟机centos1.下载镜像官网 点击DVD ISO 或者去官网选择版本下载 下拉选项找到你要下载的版本号进行下载 选择任意一个链接下载 2.新建虚拟机 设置内存大小 创建磁盘 3.启动centos 安装成功，我安装的是无图形化的]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习]]></title>
    <url>%2F2019%2F06%2F12%2FLinux%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、Linux发展史1970年元年 二、Linux系统安装安装方式： ​ 真机模式 ​ 虚拟机安装：通过一些特定的手段，来进行模拟安装 ​ VMware workstation的安装：VMware Workstation pro 15破解版安装 终端[root@localhost 图片]$ root：该位置表示当前终端登录的用户名 @：发音at，表示“在” localhost：当前登录的主机名 图片：当前终端工作目录 #表示身份识别符，管理员登陆时显示#，普通用户显示$; 关机命令：shutdown -h now(正常关机)、halt(关闭内存)、init 0 VMware备份：两种：快照、克隆 快照：又称还原点，就是保存在拍快照时候的系统的状态（包含了所有的内容），在后期的时候随时可以恢复。【侧重于短期备份，需要频繁备份的时候可以使用快照，做快照的时候虚拟机的操作系统一般处于开启状态】 点击虚拟机 - 快照 - 快照管理器找到刚才建立的快照就可返回刚才的位置； 克隆：就是复制的意思。【侧重长期备份，做克隆的时候是必须的关闭的】 三、Linux系统的·文件什么是文件？ 一般是一个独立的东西，可以通过一些特定的工具进行打开，并且其中不能包含除了文字以外的东西； 什么是文件夹？ 可以在其中包含其他文件的东西 注意：日常运维工作中，有一半以上的工作内容，其实都是对文件的操作；Linux本身也是一个基于文件形式表示的操作系统； Linux一切皆文件 目录结构bin：全称binary，含义是二进制。该目录中存储的都是一些二进制文件，文件都是刻意被运行的； dev：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能被直接使用的，需要挂载（类似windows下的分配盘符）。 etc：该目录主要存储一些配置文件 Home：表示“家”，表示除了root用户以外其他用户的家目录，类似于windows下的user/用户目录 proc：process，表示进程，该目录中存储的是Linux运行时的进程 sbin：全称super binary，该目录也是储存一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行 tmp：表示临时的，当系统运行时候产生的临时文件会在这个目录存储 usr：存放着用户自己安装的软件。类似于windows下的program files var：存放的程序/系统的日志文件的目录 mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。 四、指令和选项什么是指令？ 指的是Linux终端（命令行）中输入的内容就称之为指令 Linux通用指令格式： #指令主体 [选项] [操作对象] 一个指令可以包含多个选项，操作对象也可以是多个 五、基础指令1.ls指令含义：ls（list） 用法1：#ls ——&gt;含义：列出当前工作目录下的所有文件/文件夹的名称 用法2：#ls 路径 ——&gt;含义：列出指定路径下的所有文件/文件夹的名称 路径分为两种：相对路径、绝对路径 相对路径：相对首先要有一个参照物（一般是当前的工作路径） ​ “./“(当前路径)和”../(上一级路径)” 绝对路径：绝对路径不需要参照物，直接从根“/”开始寻找对应路劲 用法3：#ls 选项 路径——&gt;含义：在列出指定路径下的文件夹/文件的名称，并以指定的格式进行显示 选项： ​ -l：表示list，表示以详细列表的形式进行展示 ​ -a：表示显示所有的文件/文件夹（包含了隐藏文件/文件夹） 上述列表中第一列字符表示文档的类型，其中”-“表示该行对应的文档类型是文件，”d”表示文档类型为文件夹 在Linux中隐藏文档一般都是以”.”开头 用法4：#ls -lh 路径——&gt;含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示 文件夹不管实际大小是多少一般都是显示4k大小 2.pwd指令用法：#pwd(print working directory,打印当前工作目录) 3.cd命令用法：#cd 路径（change directory，改变目录） 在Linux中有一个特殊的符号”~”，表示当前用户的家目录。 4.mkdir指令用法1：#mkdir 路径 (make directory，创建目录)；路径可以是文件夹名称也可以是包含名称的一个完整路径 注意：ls列出的结果颜色说明，其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限 用法2：#mkdir -p 路径——&gt;含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错 用法3：#mkdir 路径1 路径2 路径3......——&gt;含义：表示一次性创建多个目录 5.touch命令用法：#touch 文件路径 ——&gt;含义：创建文件；路径可以是直接的文件名也可以是路径 用touch创建多个文件 6.cp指令用法：#cp 源路径 目的路径（copy，复制） 含义：复制文件/文件夹到指定位置的位置 注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致；cp命令进行文件夹复制操作的时候需要添加选项“-r”【-r表示递归复制】,否则目录将被忽略 7.指令用法：#mv 源路径 目的路径(move，移动，剪切) 含义：移动文档到新的位置 补充：Linux中重命名也是mv，语法和移动一样 8.rm指令rm（remove，移除、删除） 作用：移除/删除文档 语法：#rm 选项 需要移除的文档路径 选项： ​ -f：强制删除，不提示是否删除 ​ -r：表示递归 注意：删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项 *为通配符，表示任意的字符 9.vim命令vim（是一款文本编辑器） 语法：#vim 文件路径 作用：打开一个文件（可以不存在，也可以存在） i键表示插入模式进行编辑，ESC表示退出编辑模式，再输入:wq 10.输出重定向一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术 &gt;：覆盖输出，会覆盖掉原先的文件内容 &gt;&gt;：追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加 语法：#正常执行的命令 &gt;/&gt;&gt; 文件的路径 注意：文件可以不存在，不存在则新建 11.cat指令作用：cat有直接打开一个文件的功能 语法：#cat 文件的路径 作用：cat还可以对文件进行合并 语法：#cat 待合并的文件路径1 待合并的文件路径2 ...... 文件路径n &gt; 合并之后的文件路径 六、进阶命令（重点）1.df指令作用：查看磁盘的空间 语法：#df -h表示以可读性较高的形式展示大小 2.free指令作用：查看内存使用情况 语法：#free -m,-m是以兆（MB）为单位显示 Swap：用于临时内存，当系统真实内存不够用的时侯可以临时使用磁盘空间来充当内存 3.head指令作用：查看一个文件的前n行，如果不指定n，则默认显示前10行。 语法：#head -n 文件路径【n表示数字】 4.tail指令作用：查看一个文件的末n行，如果n不指定默认显示后10行 语法：#tail -n 文件路劲 【n表示数字】 作用：可以通过tail指令来查看一个文件的动态变化 语法：#tail -f 文件路径 一般用于查看系统的日志比较多 q键退出即可 5.less指令作用：查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车（从数字行开始显示）、空格键（翻页）、方向键（换行显示））查看更多 语法：#less 需要查看的文件路径 6.wc指令作用：统计文件内容信息（包含行数、单词数、字节数） 语法：#wc [选项] 需要统计的文件路劲 选项： ​ -l：表示lines，行数 ​ -w：表示words，单词数 【依照空格来判断单词数量】 ​ -c：表示bytes，字节数 7.date指令（重点）作用：表示操作时间日期（读取、设置） 语法：#date 语法：#date +%F (等价于#date “+%Y-%m-%d”) 语法：#date &quot;+%F %T&quot; (等价于#date “+%Y-%m-%d %H:%M:%S”)引号表示让“年月日与时分秒”成为一个不可分割的整体 作用：获取之前或者之后的某个时间（备份） 语法：#date -d &quot;-1 day&quot; &quot;+%Y-%m-%d %H:%M:%S&quot; 符号的可选值：+（之后）/ -（之后） 单位可选值：day（天）、month（月份）、year（年） %F 表示完整的年月日 %T 表示完整的的时分秒 %Y 表示四位年份 %m 表示两位月份（带前导0） %d 表示日期（带前导0） %H 表示小时（带前导0） %M 表示分钟（带前导0） %S 表示秒数（带前导0） 8.cal指令作用：用来操作日历 语法：#cal等价于#cal -1直接输出当前月份的日历 语法：#cal -3表示输出上一个月+本月+下一个月的日历 语法：#cal -y 年份表示输出某一个年份的日历 9.clear / ctrl + L指令作用：清除终端中已存在的命令和结果（信息）清屏 语法：#clear 或者快捷键：ctrl+L 注意：该命令并不是真的清除了之前的信息，而是把之前的信息的隐藏到了最上面，通过滚动条继续查看以前的信息。 10.管道(重要)管道符：| 作用：管道一般可以用于“过滤”，“特殊”，“扩展处理”。 语法：管道不能单独使用，必须要配合前面所讲的一些指令使用，其作用主要是辅助作用。 #ls /| grep y 以管道作为分界线，前面的命令有个输出，后面需要输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入。 grep指令：主要用于过滤 特殊用法案例：通过管道的操作方法来实现less的等价效果（了解） #less 路径 == #cat 路径 | less 七、高级指令1.hostname指令作用：操作服务器的主机名（读取、设置） 语法：#hostname ——含义：表示输出完整的主机名 语法：#hostname -f ——含义：表示输出当前主机名中的FQDN（全限定域名） 2.id命令作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。 语法1：#id 默认显示当前执行该命令的用户的基本信息 语法2：#id 用户名显示指定用户的基本信息 验证上述信息是否正确？ 验证用户信息：通过文件/etc/paswd 验证用户组信息：通过文件/etc/group 3.whoami指令作用：“我是谁？”显示当前登录的用户名，一般用于shell脚本,用于获取当前操作的用户名方便记录日志。 语法：#whoami 4.ps -ef指令（重点）指令：ps 作用：主要是查看服务器的进程信息 选项含义： ​ -e：等价于“-A”，表示列出全部的进程信息 ​ -f：显示全部列（显示全字段） 列的含义： ​ UID：该进程执行的用户id； ​ PID：进程id； ​ PPID：该进程的父级进程id，如果一个程序的父进程找不到，该程序的进程称之为僵尸进程； ​ C：CPU的占用率，其形式是百分数； ​ STIME：进行的启动时间； ​ TIY：终端设备，发起该进程的设备识别符号，如果显示“？”，则表示该进程并不是由终端设备发起； ​ TIME：进程执行的时间； ​ CMD：该进程的名称或者对应的路径； 5.top指令（重点）作用：查看服务器的进程占的资源 语法： ​ 进入命令：#top (动态显示) ​ 退出命令：按下q键 表头含义： PID：进程id； USER：该进程对应的用户； PR：优先级； VIRT：虚拟内存； RES：常驻内存； SHR：共享内存； ​ 计算一个进程实际使用的内存 = 常驻内存（RES）-共享内存（SHR） S：表示进行的状态[sleeping,其中S表示睡眠，R表示运行]； %CPU：表示cpu的占用百分比； %MEM：表示内存的占用百分比； TIME+：执行的时间； COMMAND：进程的名称或者路径； 在运行top的时候，可以按下方便的快捷键： M：表示将结果按照内存（MEM）从高到低进行降序排列； P：表示将结果按照CPU使用率从高到低进行降序排列； 1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展示显示各个CPU的详细信息。 6.du-sh命令作用：查看目录的真实大小 语法：#du -sh 目录路径 选项含义： ​ -s：summaries，只显示汇总的大小 ​ -h：表示以较高的可读性的形式进行显示 7.find指令作用：用于查找文件（其参数有55个之多） 语法：#find 路径范围 选项 选项的值 选项： ​ -name：按照文档名称进行搜索（支持模糊搜索） ​ -type：按照文档的类型进行搜索 文档类型：”_”表示文件（在使用find的时候需要f来替换），“d”表示文件夹； 8.service指令（重点）作用：用于控制一些软件的服务启动/停止/重启 语法：#service 服务名 start/stop/restart 9.kill指令（重点）作用：表示杀死进程（当遇到僵尸进程或者出于某些原因需要关闭进程的时候） 语法：#kill 进程 PID（语法需要配合ps -ef一起使用） 与kill命令作用相似但是比kill更加好用的杀死进程的命令：killall 语法：killall 进程名称 10.ifconfig指令（重点）作用：用于操作网卡相关的指令 简单语法：#ifconfig（获取网卡信息） Eth0表示Linux中的一个网卡，eth0是其名称。Lo（loop，本地回环网卡，其IP地址一般都是127.0.0.1）也是一个网卡名称。 其中inet是网卡的IP地址 11.reboot指令作用：重新启动计算机 语法：#reboot 重启 语法：#reboot -w模拟重启，但是不重启（只写关机与开机的日志信息） 12.shutdown指令作用：关机（慎用） 语法1：#shutdown -h now &quot;提示&quot; 或者 #shutdown -h 12:00 &quot;提示&quot; 如果想要取消关机计划的话，则可以按照以下方式去尝试： 针对于centos7.x之前的版本：ctrl+c 针对于centos7.x（包含）之后的版本：#shutdown -c 除了shutdown关机以外，还有以下几个命令： 123#init 0#halt#poweoff 13.uptime指令作用：输出计算机的持续在线时间（计算机从开机到现在运行的时间） 语法：#uptime 14.uname指令作用：获取计算机操作系统相关信息 语法1：#uname 获取操作系统的类型 语法2：#uname -a all,表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划） 15.netstat -tnlp指令作用：查看网络连接状态 语法：#netstat -tnlp 选项说明： ​ -t：表示只列出tcp协议的连接 ​ -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来显示； ​ -l：表示过滤出“state（状态）”列中其值为LISTEN（监听）的连接； ​ -p：表示显示发起连接的进程pid和进程名称； 16.man指令作用：manual，手册（包含了Linux中全部命令手册，英文） 语法：#man 命令（退出按下q键） 练习题1.如何通过命令行重启linux操作系统？#reboot 2.如何在命令行中快速删除光标前/后的内容？前：ctrl+u 后：ctrl+k 3.如何删除/tmp下所有A开头的文件？ #rm -f /tmp/A* 4.系统重要文件需要备份，如何使用/etc/passwd备份到/tmp目录下？ #cp /etc/passwd /tmp/ 5.如何查看系统最后创建的3个用户？ #tail -3 /etc/passwd 6.什么命令可以统计当前系统中一共有多少账户？ #wc -l /etc/passwd 或者#cat /etc/passwd|wc -l 7.如何创建/tmp/test.conf文件？ #touch /tmp/test.conf 8.如何通过vim编辑打开/tmp/test.conf? #vim /tmp/test.conf 9.如何查看/etc/passwd的头3行和尾3行？ #head -3 /etc/passwd 和#tail -3 /etc/passwd 10.如何一次性创建目录/text/1/2/3/4？#mkdir -p /text/1/2/3/4 11.如何最快的返回到当前账户的家目录？#cd ~ 或 #cd 12.如何查看/etc/所占的磁盘空间？#du -sh /etc 13.如何删除/tmp下所有的文件？ #rm -rf /tmp/* 14.尝试启动Apache的服务，并且检查是否启动成功？ #service httpd start #ps -ef|grep httpd 15.使用已学习命令杀死Apache的进程。 #killall httpd 八、vim的介绍vi是所有unix和Linux系统下的标准编辑器。 vi和vim都是linux中的编辑器，不同的是，vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。vim重点是光标的移动，模式切换店，删除，查找替换，复制，粘贴，撤销命令的使用。 九、vim三种模式（重点）vim中存在三种模式（大众的认知）：命令模式、编辑模式（输入模式）、末行模式（尾行模式）。 命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行，复制行，移动光标，粘贴等等），打开文件之后默认进入模式； 编辑模式：在该模式下可以对文件的内容进行编辑； 末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等等）； vim的打开文件的方式（4种，要求掌握的就前三种）： #vim 文件路径 作用：打开指定的文件 #vim +数字 文件的路径 作用：打开指定文件，并且将光标移动到指定行 #vim +/关键词 文件的路径 作用：打开指定的文件，并且高亮显示关键词 #vim 文件路径1 文件路径2 文件路径3 作用：同时打开多个文件 十、命令模式1.光标移动a.光标移动到行首 快捷键：shift + 6 或 ^（T字母上面的6，不要按小键盘的6） b.光标移动到行尾 快捷键：shift + 4 或 $（R字母的左上角的4，不是小键盘的4） c.光标移动到首行 快捷键：gg d.光标移动到末行 快捷键：G e：翻屏 向上翻屏：快捷键 ctrl + b 或 PgUp 向下翻屏：快捷键 ctrl + f 或 PgDn 2.复制操作 复制光标所在行 快捷键：yy 粘贴：在想要粘贴的地方按下p键 以光标所在行为准（包含当前行），向下复制指定的行数 快捷键：数字yy 可视化复制 快捷键：ctrl + v，然后按下方向键来选中要复制的区块，按下yy键进行复制，最后按下p键粘贴 3.剪切/删除 剪切/删除光标所在行 快捷键：dd （删除之后下一行上移） 注意：dd严格意义上说是剪切命令，但是如果剪切了不粘贴就是删除的效果。 剪切/删除光标所在行为准（包含当前行），向下删除/剪切指定的行 快捷键：数字dd （删除之后下一行上移） 剪切/删除光标所在当前行，但是删除之后下一行不上移 快捷键：D （删除之后当前行会变成空白行） 4.撤销/恢复撤销：输入:u（不属于命令模式） 或者 u (undo) 恢复：ctrl + r 恢复（取消）之前的撤销操作 5.光标的快速移动 快速将光标移动到指定的行 快捷键：数字 G 以当前光标为准向上/向下移动n行 快捷键：数字👆，数字👇 以当前光标为准向左/向右移动n字符 快捷键：数字👈，数字👉 末行模式下的快速移动方式：移动到指定的行 快捷键：输入英文“:”，其后输入行数数字，按下回车 十一、模式间的切换 十二、末行模式进入方式：由命令模式进入，按下“:”或者“/（主要是搜索）”即可进入 退出方式： 按一次esc 按二次esc 删除末行全部输入字符 1.保存操作（write）输入：:w 保存文件 输入：:w 路径 另存为 2.退出（quit）输入：:q 退出文件 3.保存并退出输入：:wq 保存并且退出 4.强制（!）输入：:q! 表示强制退出，刚才做的修改操作不做保存 5.调用外部命令（了解）输入：:!外部命令 6.搜索/查找输入：/关键词 在搜索结果中切换上/下一个结果：N/n （next） 如果需要取消高亮，则需要输入：:nohl (no highlight) 7.替换:s/搜索的关键词/新的内容 替换光标所在行的第一处符合条件的内容 :s/搜索的关键词/新的内容/g 替换光标所在行的全部符合条件的内容 :%s/搜索的关键词/新的内容 替换整个文档中每行第一个符合条件的内容 :%s/搜索的关键词/新的内容/g 替换整个文档的符合条件的内容 %表示整个文件，g表示全局（global） 8.显示行号输入：:set nu (number) 如果想取消显示，则输入：:set nonu 9.使用vim同时打开多个文件，在末行模式下进行切换文件查看当前已经打开的文件的名称：:files 在%a的位置有2种显示可能 %a：a=active，表示当前正在打开的文件； #；表示上一个打开的文件 切换文件的方式： 如果需要指定切换文件的名称，则可以输入：:open 文件名称 可以通过其他命令来切换上一个文件/下一个文件 输入：:bn 切换到下一个文件（back next） 输入：:bp 切换到上一个文件（back previous） 十三、编辑模式进入方式： i：在光标所在字符前开始插入 a：在光标所在字符后开始插入 o：在光标所在行的下面另起一新行插入 I：在光标所在行的行首开始插入，如果行首有空格则在空格之后插入 A：在光标所在行的行尾开始插入 O：在光标所在行的上面另起一行开始插入 S：删除光标所在行并开始插入 重点是i（insert），a（after） 十四、实用功能1.代码着色显示：syntax on syntax(语法) ​ 关闭显示：syntax off ​ 2.vim中计算器的使用当在编辑文件的时候需要使用计算器去计算一些公式，则此时需要用到计算器，但是需要退出，vim自身集成了一个简易的计算器。 a.进入编辑模式 b.按下按键“ctrl + R”，然后输入“=”，此时光标会变到最后一行 c.输入需要计算的内容，按下回车 十五、扩展1.vim的配置（重点）vim配置有三种情况： ​ a.在文件打开的时侯在末行模式下输入的配置（临时的） ​ b.个人配置文件（~/.vimrc，如果没有可以自行新建） ​ c.全局配置文件（vim自带，/etc/vimrc） 新建好个人配置文件之后进行编辑 在配置文件中进行配置 比如显示行号：set nu 配置好之后打开文件就会永远显示行号 配置文件优先级：如果针对同一配置项，个人配置文件中存在，则以个人配置文件为准，如果个人配置文件中不存在这一项，则以全局配置文件为准 2.异常退出异常退出：在编辑文件之后并没有正常的去wq（保存退出），而是遇到突然关闭终端或者断电的情况，则会显示下面效果。 解决办法：将交换文件（在编辑过程中产生的临时文件）删除即可 3.别名机制（实用）作用：相当于创建一些属于自己的自定义命令 别名机制依靠一个别名映射文件：~/.bashrc vim .bashrc添加alias cls=&#39;clear&#39;即可实现cls为clear的功能 注意：如果想新创造的命令生效，必须要重新登录当前用户。 4.退出方式可以用:q或 :wq 或者:x 说明： :x在文件没有修改的情况下，表示直接退出，在文件修改的情况下表示保存并退出； 如果文件没有被修改，但是使用wq进行退出时，则文件的修改时间会被更新；但是如果文件没有被修改，使用x进行退出的话，则文件修改时间不会被更新的；主要是会混淆用户对文件的修改时间的认定。 建议使用:x来进行对文件的保存退出；X表示对文件进行加密操作，不要使用 Linux自有服务自有服务：即不需要用户独立安装的服务，而是当系统安装好之后就可以直接使用的服务（内置） 一、运行模式运行模式也可称之为运行级别 在Linux中存在一个进程：init（initialize，初始化），进程id是1； 查看init进程：#ps -ef | grep init 该进程存在一个对应的配置文件：inittab（系统运行级别配置文件，位置/etc/inittab） 文件主要内容： 0 -表示关机级别（不要将默认的运行级别设置成这个值） 1 -单用户模式 2 -多用户模式，不带NFS（Network File Syetem) 3 -完全多用户模式 4 -没有被使用的模式（被保留模式） 5 -X11，完整的图形化界面模式 6 -表示重启级别（不要将默认的运行级别设置成这个值） 与该级别相关的几个命令： 1234#init 0 表示关机#init 3 表示切换到不带桌面的模式#init 5 切换到图形界面#init 6 重启电脑 注意：init指令需要超级管理员的权限，普通用户无法执行。 这些命令其实都是调用的init进程，将数字（运行级别）传递给进程，进程去读配置文件执行对应的操作。 1.切换到纯命令模式下(临时切换，重启之后又恢复)#init 3 切换之后需要输入用户名和密码，在输入密码时没有显示输入，只要输入密码正确，回车即可。 2.回到桌面模式#init 5 3.设置模式永久为命令行模式将/etc/inittab文件中的initdefault值设置为3（id:3:initdefault:），然后重启。 二、用户与用户组管理（重点）Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统 要实现用户账号的管理，要完成的工作主要有如下几个方面： 用户账号的添加、删除、修改以及用户密码的管理 用户组的管理 注意三个文件： 123/etc/passwd 储存用户的关键信息/etc/group 储存用户组的关键信息/etc/shadow 储存用户的密码信息 1.用户管理 添加用户 #useradd 选项 用户名 常用选项： ​ -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名 ​ -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名 ​ -u：uid，用户的id（用户的标识符），系统默认会从1000（500）之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义 ​ -c：添加注释 验证是否成功： ​ 验证/etc/passwd的最后一行，查看是否有创建的用户的信息； ​ 验证是否存在家目录（在centos下创建好用户之后随之产生一个同名家目录); 格式：用户名:密码:用户ID:用户组ID:注释:家目录:解释器shell 用户名：创建新用户名称，后期登录时需要输入； 密码：此密码位置一般情况下都是“x”，表示密码的占位； 用户ID：用户的标识符； 用户组ID：该用户所属的主组ID； 注释：解释该用户是做什么用的； 家目录：用户登录进入系统之后默认的位置； 解释器shell：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，传递给内核处理； 注意：在不添加选项的时候，执行useradd之后会执行一系列的操作 ​ a.创建同名家目录 ​ b.创建同名用户组 注意：查看用户的主组可以查看passwd文件，查看附加组可以查看group文件。 修改用户 #usermod 选项 用户名（user modify 用户修改） 常用选项： ​ -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名 ​ -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名 ​ -u：uid，用户的id（用户的标识符），系统默认会从500之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义 ​ -l：修改用户名 修改用户主组，附加组 ​ #usermod -l 新的用户名 旧的用户名 设置密码 Linux不允许没有密码的用户登陆到系统，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。 #passwd 用户名 切换用户命令：#su [用户名]（switch user）如果用户名不指定则表示切换到root用户 切换用户需要注意的事项是： ​ a.从root往普通用户切换不需要密码，但是反之则需要root密码； ​ b.切换用户之后前后的工作路径是不变的； ​ c.普通用户没有办法访问root用户家目录，但是反之则可以； 删除用户 语法：#userdel 选项 用户名 userdel：user delete（用户删除） 常用选项： ​ -r：表示删除用户的同时，删除其家目录； 注意：已经登录的用户p删除时侯提示失败，但没有登录的用户可以正常删除 解决办法：直接kill对用用户全部进程，再userdel -r 用户名 所有用户操作的命令（除passwd外）只有root超级管理员有权限执行。 2.用户组管理​ 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同。Linux下的用户属于与他同名的用户组，这个用户组在创建用户同时创建。 ​ 用户组的管理涉及用户的添加、删除和修改。实际上就是对/etc/group文件的更新。 文件结构： 用户组名:密码:用户组ID:组内用户名 密码：x表示占位符，虽然用户组可以设置密码，但是绝大部分的情况下不设置密码； 组内用户名：表示附加组是该组的用户名称； 用户组的添加 语法：#groupadd 选项 用户组名 常用选项： ​ -g：类似用户添加里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字，如果不指定，则默认从1000（500）开始。 用户组编辑 语法：#groupmod 选项 用户组名 常用选项： ​ -g：类似用户修改里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字； ​ -n：类似用户修改里的“-l”，表示设置新的用户组的名称 用户组删除 语法：#groupdel 用户组名 注意：当如果需要删除一个组，但是这个组是某个用户的主组时，则不允许删除；如果确实需要删除，则先从组内移除所有用户。 三、网络设置首先知道网卡配置文件位置：/etc/sysconfig/network-scripts 在目录中网卡的配置文件命名格式：ifcfg-网卡名称 BOOTPROTO：ip地址分配方式，dpch表示动态主机分配协议 ONBOOT：是否开机启动 HWADDR：硬件地址，MAC地址 重启网卡： ​ #service networking restart 在有的版本中可能没有service命令来快速操作服务，但是一个共性的目录：/etc/init.d这个目录中放着很多对服务的快捷方式。 ​ #/etc/init.d/networking restart 创建快捷方式： ​ 语法：ln -s 原始文件的路径 快捷方式的路径 其中，文件类型位置的“l”表示其类型为link（连接类型），后面的“-&gt;”指向的是原始文件路径。 重启单个网卡： ​ #ifdown 网卡名 停止某个网卡 ​ #ifup 网卡名 开启某个网卡 四、ssh服务（重点）ssh（secure shell，安全外壳协议），该协议有2个常用的作用：远程连接协议、远程文件传输协议。 写意使用端口号：默认是22，可以修改，则需要修改ssh服务的配置文件：/etc/ssh/ssh_config 注意： ​ a.注意范围，端口号范围是从0-65535； ​ b.不能使用别的服务已经占用的端口； 服务启动/停止/重启 #service sshd start/stop/restart #/etc/init.d/sshd start/stop/restart 1.远程终端终端工具·主要帮助运维人员连接远程的服务器，常见终端工具有：Xshell、secureCRT、Putty等。 获取IP地址，可以通过ifconfig命令查看，并测试IP的连接相通性。 打开Putty，输入相关信息 弹出key确认的时候点击“是”，以后不会再提示· 2.ssh服务文件传输可视化的界面工具：Filezilla 通过命令行工具来传输文件/文件夹 工具：PSCP.exe（必须使用命令行打开），为了使用方便可以将其放到环境变量目录中如果不清楚那些路径使环境变量路径，只需要将其放到C:/Windows目录下即可。 用法： 123pscp 选项 用户名@linux主机地址:资源路径 windows 本地的地址 （下载到windows）pscp 选项 资源路径 用户名@linux主机地址:远程路径 （上传到linux）pscp 选项 -ls 用户名@linux主机地址 （列出远程路径下结构） ​]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux常用命令]]></title>
    <url>%2F2019%2F06%2F11%2Flinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1. 文件管理ls命令 – 显示指定工作目录下的内容及属性信息ls 命令是Linux下最常用的指令之一。ls命令为英文单词 list 的缩写，正如英文单词 list 的意思，其功能是列出指定目录下的内容及其相关属性信息。 默认状态下，ls命令会列出当前目录的内容。而带上参数后，我们可以用ls做更多的事情。作为最基础同时又是使用频率很高的命令，我们很有必要搞清楚ls命令的用法，那么接下来一起看看吧！ 语法格式: ls [选项] [文件] 常用参数： -a 显示所有文件及目录 (包括以“.”开头的隐藏文件) -l 使用长格式列出文件及目录信息 -r 将文件以相反次序显示(默认依英文字母次序) -t 根据最后的修改时间排序 -A 同 -a ，但不列出 “.” (当前目录) 及 “..” (父目录) -S 根据文件大小排序 -R 递归列出所有子目录 参考实例 列出所有文件(包括隐藏文件)： 1ls -a 列出文件的详细信息： 1ls -l 列出根目录(/)下的所有目录： 1ls / 列出当前工作目录下所有名称是 “s” 开头的文件 : 1ls -ltr s* 列出 /bin 目录下的所有目录及文件的详细信息 : 1ls -lR /bin 列出当前工作目录下所有文件及目录并以文件的大小进行排序 : 1ls -AS pwd命令 – 显示当前路径pwd命令是“print working directory”中每个单词的首字母缩写，其功能正如所示单词一样，为打印工作目录，即显示当前工作目录的绝对路径。 在实际工作中，我们经常会在不同目录之间进行切换，为了防止“迷路”，我们可以使用pwd命令快速查看当前我们所在的目录路径。 语法格式: pwd [参数] 常用参数： -L 显示逻辑路径 参考实例 查看当前工作目录路径： 12pwd/home/linuxcool mkdir命令 – 创建目录mkdir命令是“make directories”的缩写，用来创建目录。 注意：默认状态下，如果要创建的目录已经存在，则提示已存在，而不会继续创建目录。 所以在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。 mkdir命令还可以同时创建多个目录，是不是很强大呢？ 语法格式 : mkdir [参数] [目录] 常用参数： -p 递归创建多级目录 -m 建立目录的同时设置目录的权限 -z 设置安全上下文 -v 显示目录的创建过程 参考实例 在工作目录下，建立一个名为 dir 的子目录： 1mkdir dir 在目录/usr/linuxcool下建立子目录dir，并且设置文件属主有读、写和执行权限，其他人无权访问 1mkdir -m 700 /usr/linuxcool/dir 同时创建子目录dir1，dir2，dir3： 1mkdir dir1 dir2 dir3 递归创建目录： 1mkdir -p linuxcool/dir cp命令 – 复制文件或目录cp命令可以理解为英文单词copy的缩写，其功能为复制文件或目录。 cp命令可以将多个文件复制到一个具体的文件名或一个已经存在的目录下，也可以同时复制多个文件到一个指定的目录中。 语法格式：cp [参数] [文件] 常用参数： -f 若目标文件已存在，则会直接覆盖原文件 -i 若目标文件已存在，则会询问是否覆盖 -p 保留源文件或目录的所有属性 -r 递归复制文件和目录 -d 当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录 -l 对源文件建立硬连接，而非复制文件 -s 对源文件建立符号连接，而非复制文件 -b 覆盖已存在的文件目标前将目标文件备份 -v 详细显示cp命令执行的操作过程 -a 等价于“dpr”选项 参考实例 复制目录： 1cp -R dir1 dir2/ 将文件test1改名为test2： 1cp -f test1 test2 复制多个文件： 1cp -r file1 file2 file3 dir 交互式地将目录 /usr/linuxcool 中的所有.c文件复制到目录 dir 中 1cp -r /usr/linuxcool/*.c dir mv命令 – 移动或改名文件mv命令是“move”单词的缩写，其功能大致和英文含义一样，可以移动文件或对其改名。 这是一个使用频率超高的文件管理命令，我们需要特别留意它与复制的区别：mv与cp的结果不同。mv命令好像文件“搬家”，文件名称发生改变，但个数并未增加。而cp命令是对文件进行复制操作，文件个数是有增加的。 语法格式：mv [参数] 常用参数： -i 若存在同名文件，则向用户询问是否覆盖 -f 覆盖已有文件时，不进行任何提示 -b 当文件存在时，覆盖前为其创建一个备份 -u 当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作 参考实例 将文件file_1重命名为file_2： 1mv file_1 file_2 将文件file移动到目录dir中 ： 1mv file /dir 将目录dir1移动目录dir2中（前提是目录dir2已存在，若不存在则改名)： 1mv /dir1 /dir2 将目录dir1下的文件移动到当前目录下： 1mv /dir1/* . 2. 文档编辑cat命令 – 在终端设备上显示文件内容Linux系统中有很多个用于查看文件内容的命令，每个命令又都有自己的特点，比如这个cat命令就是用于查看内容较少的纯文本文件的。cat这个命令也很好记，因为cat在英语中是“猫”的意思，小猫咪是不是给您一种娇小、可爱的感觉呢？ 注意：当文件内容较大时，文本内容会在屏幕上快速闪动（滚屏），用户往往看不清所显示的具体内容。因此对于较长文件内容可以按Ctrl+S键，停止滚屏；以及Ctrl+Q键可以恢复滚屏；而按Ctrl+C（中断）键则可以终止该命令的执行。或者对于大文件，干脆用more命令吧！ 语法格式：cat [参数] [文件] 常用参数： -n 显示行数（空行也编号） -s 显示行数（多个空行算一个编号） -b 显示行数（空行不编号） -E 每行结束处显示$符号 -T 将TAB字符显示为 ^I符号 -v 使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外 -e 等价于”-vE”组合 -t 等价于”-vT”组合 -A 等价于 -vET组合 –help 显示帮助信息 –version 显示版本信息 参考实例 查看文件的内容： 1cat filename.txt 查看文件的内容，并显示行数编号： 1cat -n filename.txt 查看文件的内容，并添加行数编号后输出到另外一个文件中： 1cat -n linuxcool.log &gt; linuxprobe.log 清空文件的内容： 1cat /dev/null &gt; /root/filename.txt 持续写入文件内容，碰到EOF符后结束并保存： 1234cat &gt; filename.txt &lt;&lt;EOF&gt; Hello, World &gt; Linux!&gt; EOF 将软盘设备制作成镜像文件： 1cat /dev/fd0 &gt; fdisk.iso echo命令 – 输出字符串或提取Shell变量的值echo命令用于在终端设备上输出字符串或变量提取后的值，这是在Linux系统中最常用的几个命令之一，但操作却非常简单。 人们一般使用在变量前加上$符号的方式提取出变量的值，例如：$PATH，然后再用echo命令予以输出。或者直接使用echo命令输出一段字符串到屏幕上，起到给用户提示的作用。 语法格式：echo [参数] [字符串] 常用参数： -n 不输出结尾的换行符 -e “\a” 发出警告音 -e “\b” 删除前面的一个字符 -e “\c” 结尾不加换行符 -e “\f” 换行，光标扔停留在原来的坐标位置 -e “\n” 换行，光标移至行首 -e “\r” 光标移至行首，但不换行 -E 禁止反斜杠转移，与-e参数功能相反 —version 查看版本信息 –help 查看帮助信息 参考实例 输出一段字符串： 12echo &quot;LinuxCool.com&quot; LinuxCool.com 输出变量提取后的值： 12echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin 对内容进行转义，不让$符号的提取变量值功能生效： 12echo \$PATH$PATH 结合输出重定向符，将字符串信息导入文件中： 1echo &quot;It is a test&quot; &gt; linuxcool 使用反引号符执行命令，并输出其结果到终端： 1echo `date` 输出带有换行符的内容 1234echo -e &quot;a\nb\nc&quot;abc 输出信息中删除某个字符，注意看数字3消失了： 12echo -e &quot;123\b456&quot; 12456 rmdir命令 – 删除空目录rmdir命令作用是删除空的目录，英文全称：“remove directory”。 注意：rmdir命令只能删除空目录。当要删除非空目录时，就要使用带有“-R”选项的rm命令。 rmdir命令的“-p”参数可以递归删除指定的多级目录，但是要求每个目录也必须是空目录。 语法格式 : rmdir [参数] [目录名称] 常用参数： -p 用递归的方式删除指定的目录路径中的所有父级目录，非空则报错 – – ignore-fail-on-non-empty 忽略由于删除非空目录时导致命令出错而产生的错误信息 -v 显示命令的详细执行过程 – – help 显示命令的帮助信息 – – version 显示命令的版本信息 参考实例 删除空目录： 1rmdir dir 递归删除指定的目录树： 1rmdir -p dir/dir_1/dir_2 显示指令详细执行过程： 123456rmdir -v dirrmdir: 正在删除目录 &apos;dir&apos;rmdir -p -v dir/dir_1/dir_2rmdir: 正在删除目录 &apos;dir/dir_1/dir_2rmdir: 正在删除目录 &apos;dir/dir_1&apos;rmdir: 正在删除目录 &apos;dir_2&apos; 显示命令的版本信息： 123456rmdir --versionrmdir (GNU coreutils) 8.30Copyright (C) 2018 Free Software Foundation, Inc.许可证 GPLv3+：GNU 通用公共许可证第 3 版或更新版本https://gnu.org/licenses/gpl.html。本软件是自由软件：您可以自由修改和重新发布它。在法律范围内没有其他保证。 tail命令 – 查看文件尾部内容tail用于显示文件尾部的内容，默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。 语法格式：tail [参数] 常用参数： –retry 即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow=name”连用 -c或——bytes= 输出文件尾部的N（N为整数）个字节内容 -f&lt;name/descriptor&gt; –follow：显示文件最新追加的内容 -F 与选项“-follow=name”和“–retry”连用时功能相同 -n或——line= 输出文件的尾部N（N位数字）行内容 –pid=&lt;进程号&gt; 与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令 –help 显示指令的帮助信息 –version 显示指令的版本信息 参考实例 显示文件file的最后10行： 1tail file 显示文件file的内容，从第20行至文件末尾： 1tail +20 file 显示文件file的最后10个字符： 1tail -c 10 file 一直变化的文件总是显示后10行： 1tail -f 10 file 显示帮助信息： 1tail --help expr命令 – 命令行计数器expr命令的英文全称是“expression”，即是表达式的意思，作用是一个命令行的计数器，常用于在UNIX/LINUX系统中求表达式变量的值，一般用于整数值，也可用于字符串。 语法格式：expr [表达式] 常用参数： 空格 隔开每个项 \（反斜杠） 放在 shell 特定的字符前面 “”(引号) 对包含空格和其他特殊字符的字符串要用引号括起来 参考实例 计算字串长度： 12expr length “this is a test” 14 抓取字串： 12expr substr “this is a test” 3 5 is is 抓取第一个字符数字串出现的位置： 12expr index &quot;sarasara&quot; a 2 整数运算： 123456789101112expr 14 % 95 expr 10 + 1020expr 1000 + 9001900expr 30 / 3 / 25expr 30 * 3 expr: Syntax error expr 30 \* 3 90 注意：使用乘号时，必须用反斜线屏蔽其特定含义。因为shell可能会误解显示星号的意义 使用expr进行四则运算： 12expr \( 10 + 10 \) \* 2 + 100 140 3. 系统管理uname命令 – 显示系统信息uname命令的英文全称即“Unix name”。 用于显示系统相关信息，比如主机名、内核版本号、硬件架构等。 如果未指定任何选项，其效果相当于执行”uname -s”命令，即显示系统内核的名字。 语法格式：uname [参数] 常用参数： -a 显示系统所有相关信息 -m 显示计算机硬件架构 -n 显示主机名称 -r 显示内核发行版本号 -s 显示内核名称 -v 显示内核版本 -p 显示主机处理器类型 -o 显示操作系统名称 -i 显示硬件平台 参考实例 显示系统主机名、内核版本号、CPU类型等信息： 12uname -aLinux linuxcool 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux 仅显示系统主机名： 12uname -nlinuxcool 显示当前系统的内核版本 : 12uname -r3.10.0-123.el7.x86_64 显示当前系统的硬件架构： 12uname -ix86_64 rsh命令 – 远端登入的shellrsh命令的英文全称为“remote shell”，该命令提供的用户环境，也就是shell，以便指令能够在指定的远端主机上执行。 语法格式： rsh [参数] 常用参数： -d 使用Socket层级的排错功能 -l 指定要登入远端主机的用户名称 -n 把输入的指令号向代号为/dev/null的特殊外围设备 参考实例 远程命令执行： 1rsh -l linuxcool 192.168.1.88 /bin/ls yes命令 – 重复打印字符串yes命令的作用是中输出指定的字符串，直到yes进程被杀死。不带任何参数输的yes命令默认的字符串就是y。 终止yes命令可以使用组合键ctrl+c yes命令通常在脚本中使用，在脚本中可以对对命令和程序的确认提示和问题进行管道输出并回答提问(例如：你确认要删除这个文件吗，按’y’ or ‘n’)。 语法格式: yes [字符串] – -help 显示帮助信息 – -version 显示命令版本信息 参考实例 重复打印一段字符： 1234567891011yes linuxcoollinuxcoollinuxcoollinuxcoollinuxcoollinuxcoollinuxcoollinuxcoollinuxcool...^C //使用ctrl+c强制停止 useradd命令 – 创建用户useradd命令用来创建新的用户或更改用户的信息。 useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码。使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中。 语法格式：useradd [参数] [用户名] 常用参数： -D 改变新建用户的预设值 -c 添加备注文字 -d 新用户每次登陆时所使用的家目录 -e 用户终止日期，日期的格式为YYYY-MM-DD -f 用户过期几日后永久停权。当值为0时用户立即被停权，而值为-1时则关闭此功能，预设值为-1 -g 指定用户对应的用户组 -G 定义此用户为多个不同组的成员 -m 用户目录不存在时则自动创建 -M 不建立用户家目录，优先于/etc/login.defs文件设定 -n 取消建立以用户名称为名的群组 -r 建立系统帐号 -u 指定用户id 参考实例 添加新用户linuxcool： 1useradd linuxcool 不创建家目录，并且禁止登陆： 1useradd -M -s /sbin/nologin linuxcool 添加新用户linuxcool，指定UID为888，指定归属用户组为root，cool成员，其shell类型为/bin/sh： 1useradd -u 888 -s /bin/sh -G root,cool linuxcool 添加新用户linuxcool，设置家目录为/tmp/linuxcool，用户过期时间为2019/05/01.过期后两天停权： 1useradd -e &quot;2019/05/01&quot; -f 2 -d /tmp/linuxcool linuxcool who命令 – 打印当前登录用户who命令用来打印当前登录用户信息，包含了系统的启动时间 、 活动进程 、 使用者 ID、使用终端等信息，是系统管理员了解系统运行状态的常用命令。 who命令的输出信息默认来自文件“/var/log/utmp”和“/var/log/wtmp”。 语法格式： who [参数] [选项] 常用参数： -a 打印全面信息 -b 打印系统最近启动时间 -d 打印死掉的进程 -l 打印系统登录进程 -H 带有列标题打印用户名，登录终端和登录时间 -t 打印系统上次锁定时间 -u 打印已登录用户列表 参考实例 打印用户登录信息（-H 带有列标题打印）： 123who -H名称 线路 时间 备注root pts/0 2019-04-10 12:31 (192.168.12.34) 打印全部信息： 12345678who -H -a名称 线路 时间 空闲 进程号 备注 退出系统引导 2019-04-03 15:01运行级别 3 2019-04-03 15:02登录 tty1 2019-04-03 15:02 852 id=tty1 2019-04-03 15:31 1022 id=102 终端=0 退出=0root + pts/0 2019-04-10 12:27 . 2789 (192.168.12.34) 打印系统最近启动时间 ： 12who -b系统引导 2019-04-03 15:01 打印系统登录进程： 12who -l登录 tty1 2019-04-03 15:02 852 id=tty1 4. 磁盘管理df命令 – 显示磁盘空间使用情况df命令的英文全称即“Disk Free”，顾名思义功能是用于显示系统上可使用的磁盘空间。默认显示单位为KB，建议使用“df -h”的参数组合，根据磁盘容量自动变换合适的单位，更利于阅读。 日常普遍用该命令可以查看磁盘被占用了多少空间、还剩多少空间等信息。 语法格式： df [参数] [指定文件] 常用参数： -a 显示所有系统文件 -B &lt;块大小&gt; 指定显示时的块大小 -h 以容易阅读的方式显示 -H 以1000字节为换算单位来显示 -i 显示索引字节信息 -k 指定块大小为1KB -l 只显示本地文件系统 -t &lt;文件系统类型&gt; 只显示指定类型的文件系统 -T 输出时显示文件系统类型 – -sync 在取得磁盘使用信息前，先执行sync命令 参考实例 显示磁盘分区使用情况： 12345678910df文件系统 1K-块 已用 可用 已用% 挂载点devtmpfs 1980612 0 1980612 0% /devtmpfs 1994756 0 1994756 0% /dev/shmtmpfs 1994756 1040 1993716 1% /runtmpfs 1994756 0 1994756 0% /sys/fs/cgroup/dev/mapper/fedora_linuxhell-root 15718400 2040836 13677564 13% /tmpfs 1994756 4 1994752 1% /tmp/dev/sda1 999320 128264 802244 14% /boottmpfs 398948 0 398948 0% /run/user/0 以容易阅读的方式显示磁盘分区使用情况： 12345678910df -h 文件系统 容量 已用 可用 已用% 挂载点 devtmpfs 1.9G 0 1.9G 0% /dev tmpfs 2.0G 0 2.0G 0% /dev/shm tmpfs 2.0G 1.1M 2.0G 1% /run tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup /dev/mapper/fedora_linuxhell-root 15G 2.0G 14G 13% / tmpfs 2.0G 4.0K 2.0G 1% /tmp /dev/sda1 976M 126M 784M 14% /boot tmpfs 390M 0 390M 0% /run/user/0 显示指定文件所在分区的磁盘使用情况： 123df /etc/dhcp文件系统 1K-块 已用 可用 已用% 挂载点/dev/mapper/fedora_linuxcool-root 15718400 2040836 13677564 13% / 显示文件类型为ext4的磁盘使用情况： 123df -t ext4文件系统 1K-块 已用 可用 已用% 挂载点/dev/sda1 999320 128264 802244 14% /boot lsblk命令 – 查看系统的磁盘lsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。 lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。 语法格式：lsblk [参数] 常用参数： -a 显示所有设备 -b 以bytes方式显示设备大小 -d 不显示 slaves 或 holders -D print discard capabilities -e 排除设备 -f 显示文件系统信息 -h 显示帮助信息 -i use ascii characters only -m 显示权限信息 -l 使用列表格式显示 -n 不显示标题 -o 输出列 -P 使用key=”value”格式显示 -r 使用原始格式显示 -t 显示拓扑结构信息 参考实例 lsblk命令默认情况下将以树状列出所有块设备： 12345678910lsblklsblk NAME MAJ:MIN rm SIZE RO type mountpointsda 8:0 0 232.9G 0 disk ├─sda1 8:1 0 46.6G 0 part / ├─sda2 8:2 0 1K 0 part ├─sda5 8:5 0 190M 0 part /boot ├─sda6 8:6 0 3.7G 0 part [SWAP] ├─sda7 8:7 0 93.1G 0 part /data └─sda8 8:8 0 89.2G 0 part /personal sr0 11:0 1 1024M 0 rom 默认选项不会列出所有空设备： 1lsblk -a 也可以用于列出一个特定设备的拥有关系，同时也可以列出组和模式： 1lsblk -m 要获取SCSI设备的列表，你只能使用-S选项，该选项是用来以颠倒的顺序打印依赖的： 1lsblk -S 例如，你也许想要以列表格式列出设备，而不是默认的树状格式。可以将两个不同的选项组合，以获得期望的输出： 1lsblk -nl fdisk命令 – 磁盘分区fdisk命令的英文全称是“Partition table manipulator for Linux”，即作为磁盘的分区工具。进行硬盘分区从实质上说就是对硬盘的一种格式化， 用一个形象的比喻，分区就好比在一张白纸上画一个大方框，而格式化好比在方框里打上格子。 语法格式：fdisk [参数] 常用参数： -b 指定每个分区的大小 -l 列出指定的外围设备的分区表状况 -s 将指定的分区大小输出到标准输出上，单位为区块 -u 搭配”-l”参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址 -v 显示版本信息 参考实例 查看所有分区情况： 1fdisk -l 选择分区磁盘： 1fdisk /dev/sdb 在当前磁盘上建立扩展分区： 1fdisk /ext 不检查磁盘表面加快分区操作： 1fdisk /actok 重建主引导记录： 1fdisk /cmbr quota命令 – 显示磁盘已使用的空间与限制quota命令用于显示磁盘已使用的空间与限制。执行quota命令可查询磁盘空间的限制，并得知已使用多少空间。 语法参数：quota [参数] 常用参数： -g 列出群组的磁盘空间限制 -q 简明列表，只列出超过限制的部分 -u 列出用户的磁盘空间限制 -v 显示该用户或群组，在所有挂入系统的存储设备的空间限制 -V 显示版本信息 参考实例 显示目前执行者（root ）的 quota 值： 1quota -guvs 显示 test 这个使用者的 quota 值： 1quota -uvs test arpd命令 – 收集arp信息arpd命令是用来收集免费arp信息的一个守护进程，它将收集到的信息保存在磁盘上或者在需要时，提供给内核用户用于避免多余广播。 语法格式：arpd [参数] 参考实例 -l 将arp数据库输出到标准输出设备显示并退出 -f 指定读取和加载arpd数据库的文本文件，文件的格式与“-l”输出信息类似 -b 指定arpd数据库文件，默认的位置为“/var/lib/arpd.db -a 指定目标被认为死掉前查询的次数 -k 禁止通过内核发送广播查询 -n 设定缓冲失效时间 常用参数： 启动arpd进程： 1arpd -b /var/tmp/arpd.db 一段时间后看结果： 1killall arpd ; arpd -l -b /var/tmp/arpd.db 启用内核帮助程序，将主要角色留给内核： 1arpd -b /var/tmp/arpd.db -a 1 eth0 eth1 完全替换接口eth0和eth1上的内核决议。 在这种情况下，内核仍会进行单播探测以验证条目，但所有广播活动都被抑制并在arpd的授权下进行： 1arpd -b /var/tmp/arpd.db -a 3 -k eth0 eth1 禁止内核发送广播查询 ： 1arpd -k 5. 文件传输curl命令 – 文件传输工具curl命令是一个利用URL规则在shell终端命令行下工作的文件传输工具；它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。 作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征；做网页处理流程和数据检索自动化。 语法格式：curl [参数] [网址] 常用参数： -O 把输出写到该文件中，保留远程文件的文件名 -u 通过服务端配置的用户名和密码授权访问 参考实例 将下载的数据写入到文件，必须使用文件的绝对地址： 1curl https://www.linuxcool.com/abc.txt --silent -O 访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权： 12curl -u root https://www.linuxprobe.com/Enter host password for user &apos;root&apos;: ftpwho命令 – 显示ftp会话信息ftpwho命令用于显示当前所有以FTP登入的用户会话信息。 执行该命令可得知当前用FTP登入系统的用户有哪些人，以及他们正在进行的操作。 语法格式：ftpwho [参数] 常用参数： -h 显示帮助信息 -v 详细模式，输出更多信息 参考实例 查询当前正在登录FTP 服务器的用户： 1ftpwho fsck命令 – 检查并修复Linux文件系统fsck命令的英文全称是“filesystem check”，即检查文件系统的意思，常用于检查并修复Linux文件系统的一些错误信息，操作文件系统需要先备份重要数据，以防丢失。 Linux fsck命令用于检查并修复Linux文件系统，可以同时检查一个或多个 Linux 文件系统；若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。 语法格式：fsck [参数] [文件系统] 常用参数： -a 自动修复文件系统，不询问任何问题 -A 依照/etc/fstab配置文件的内容，检查文件内所列的全部文件系统 -N 不执行指令，仅列出实际执行会进行的动作 -P 当搭配”-A”参数使用时，则会同时检查所有的文件系统 -r 采用互动模式，在执行修复时询问问题，让用户得以确认并决定处理方式 -R 当搭配”-A”参数使用时，则会略过/目录的文件系统不予检查 -t 指定要检查的文件系统类型 -T 执行fsck指令时，不显示标题信息 -V 显示指令执行过程 参考实例 修复坏的分区文件系统： 12345678910fsck -t ext3 -r /usr/local fsck from util-linux 2.23.2 e2fsck 1.42.9 (28-Dec-2013) fsck.ext3: Is a directory while trying to open /usr/local The superblock could not be read or does not describe a correct ext2 filesystem. If the device is valid and it really contains an ext2 filesystem (and not swap or ufs or something else), then the superblock is corrupt, and you might try running e2fsck with an alternate superblock: e2fsck -b 8193 /usr/local: status 8, rss 1232, real 0.020288, user 0.002022, sys 0.005354 显示fsck系统安装的版本号： 12fsck --version fsck from util-linux 2.23.2 ftpshut命令 – 指定时间关闭FTP服务器ftpshut命令为系统管理者提供了在设置的时间关闭FTP服务器，且能在关闭之前发出警告信息通知用户的功能。 关闭时间若设置后为”none”，则会马上关闭服务器。如果采用”+30″的方式来设置表示服务器在30分钟之后关闭。依次类推，假设使用”1130″的格式则代表服务器会在每日的11时30分关闭，时间格式为24 小时制。FTP服务器关闭后，在/etc目录下会产生一个名称为shutmsg的文件，把它删除后即可再次启用FTP服务器。 语法格式：ftpshut [参数] 常用参数： -d 切断所有FTP连线时间 -l 停止接受FTP登入的时间 参考实例 在晚上11:00 关闭FTP服务器，并在关闭前5 分钟拒绝新的FTP登录，前3 分钟关闭所有ftp的链接，且给出警告信息 ： 1ftpshut-d 3 -1 5 1100 &quot;Server will be shutdown at 23:00:00&quot; lprm命令 – 删除打印队列中的打印任务lprm命令的英文全称是“Remove jobs from the print queue”，意为用于删除打印队列中的打印任务。尚未完成的打印机工作会被放在打印机贮列之中，这个命令可用来将未送到打印机的工作取消。 语法格式：lprm [参数] [任务编号] 常用参数： -E 与打印服务器连接时强制使用加密 -P 指定接受打印任务的目标打印机 -U 指定可选的用户名 参考实例 将打印机hpprint中的第102号任务移除： 1lprm -Phpprint 102 将第101号任务由预设打印机中移除： 1lprm 101 6. 网络通讯ping命令 – 测试主机间网络连通性ping命令主要用来测试主机之间网络的连通性，也可以用于。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。 不过值得我们注意的是：Linux系统下的ping命令与Windows系统下的ping命令稍有不同。Windows下运行ping命令一般会发出4个请求就结束运行该命令；而Linux下不会自动终止，此时需要我们按CTR+C终止或者使用-c参数为ping命令指定发送的请求数目。 语法格式：ping [参数] [目标主机] 常用参数： -d 使用Socket的SO_DEBUG功能 -c 指定发送报文的次数 -i 指定收发信息的间隔时间 -I 使用指定的网络接口送出数据包 -l 设置在送出要求信息之前，先行发出的数据包 -n 只输出数值 -p 设置填满数据包的范本样式 -q 不显示指令执行过程 -R 记录路由过程 -s 设置数据包的大小 -t 设置存活数值TTL的大小 -v 详细显示指令的执行过程 参考实例 检测与linuxcool网站的连通性： 1ping www.linuxcool.com 连续ping4次： 1ping -c 4 www.linuxcool.com 设置次数为4，时间间隔为3秒： 1ping -c 4 -i 3 www.linuxcool.com 利用ping命令获取指定网站的IP地址： 12ping -c 1 linuxcool.com | grep from | cut -d &quot; &quot; -f 4220.181.57.216 netstat命令 – 显示网络状态netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。 从整体上看，netstat的输出结果可以分为两个部分：一个是Active Internet connections，称为有源TCP连接，其中”Recv-Q”和”Send-Q”指%0A的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到；另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。 语法格式：netstat [参数] 常用参数： -a 显示所有连线中的Socket -p 显示正在使用Socket的程序识别码和程序名称 -u 显示UDP传输协议的连线状况 -i 显示网络界面信息表单 -n 直接使用IP地址，不通过域名服务器 参考实例 显示详细的网络状况： 1netstat -a 显示当前户籍UDP连接状况： 1netstat -nu 显示UDP端口号的使用情况： 123456netstat -apu Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name udp 0 0 0.0.0.0:bootpc 0.0.0.0:* 4000/dhclient udp 0 0 localhost:323 0.0.0.0:* 3725/chronyd udp6 0 0 localhost:323 [::]:* 3725/chronyd 显示网卡列表： 12345netstat -i Kernel Interface table Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg eth0 1500 0 181864 0 0 0 141278 0 0 0 BMRU lo 16436 0 3362 0 0 0 3362 0 0 0 LRU 显示组播组的关系： 1234567netstat -g IPv6/IPv4 Group Memberships Interface RefCnt Group --------------- ------ --------------------- lo 1 ALL-SYSTEMS.MCAST.NET eth0 1 ALL-SYSTEMS.MCAST.NET lo 1 ff02::1 eth0 1 ff02::1:ff0a:b0c eth0 1 ff02::1 ifconfig命令 – 显示或设置网络设备ifconfig命令的英文全称是“network interfaces configuring”，即用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。 语法格式：ifconfig [参数] 常用参数： add&lt;地址&gt; 设置网络设备IPv6的IP地址 del&lt;地址&gt; 删除网络设备IPv6的IP地址 down 关闭指定的网络设备 up 启动指定的网络设备 IP地址 指定网络设备的IP地址 参考实例 显示网络设备信息： 12345678910111213141516171819# ifconfigeth0 Link encap:Ethernet HWaddr 00:50:56:0A:0B:0C inet addr:192.168.0.3 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::250:56ff:fe0a:b0c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:172220 errors:0 dropped:0 overruns:0 frame:0 TX packets:132379 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:87101880 (83.0 MiB) TX bytes:41576123 (39.6 MiB) Interrupt:185 Base address:0x2024 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:2022 errors:0 dropped:0 overruns:0 frame:0 TX packets:2022 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:2459063 (2.3 MiB) TX bytes:2459063 (2.3 MiB) 启动关闭指定网卡： 12# ifconfig eth0 down# ifconfig eth0 up 为网卡配置和删除IPv6地址： 12# ifconfig eth0 add 33ffe:3240:800:1005::2/64# ifconfig eth0 del 33ffe:3240:800:1005::2/64 用ifconfig修改MAC地址： 12345# ifconfig eth0 down# ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE# ifconfig eth0 up# ifconfig eth1 hw ether 00:1D:1C:1D:1E # ifconfig eth1 up 配置IP地址： 123# ifconfig eth0 192.168.1.56 # ifconfig eth0 192.168.1.56 netmask 255.255.255.0# ifconfig eth0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255 ss命令 – 显示活动套接字信息ss是Socket Statistics的缩写。ss命令用来显示处于活动状态的套接字信息。它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。 语法格式：ss [参数] 常用参数： -n 不解析服务名称，已数字方式显示 -a 显示所有套接字 -l 显示处于监听状态的套接字 -o 显示计时器信息 -e 显示详细的套接字信息 -m 显示套接字的内存使用情况 -p 显示使用套接字的进程 -i 显示内部的TCP信息 -s 显示套接字使用概况 -4 仅显示ipv4的套接字 -6 仅显示ipv6的套接字 -0 显示PACKET套接字 -t 只显示TCP套接字 -u 只显示UDP套接字 -d 只显示DCCP套接字 -w 只显示RAW套接字 -x 只显示 Unix套接字 -D 将原始TCP套接字信息转储到文件 参考实例 显示TCP套接字： 123456# ss -t -a State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 0.0.0.0:ssh 0.0.0.0:* ESTAB 0 52 192.168.60.19:ssh 192.168.30.21:59321 LISTEN 0 128 *:websm *:* LISTEN 0 128 [::]:ssh [::]:* 显示UDP套接字： 12345# ss -u -aState Recv-Q Send-Q Local Address:Port Peer Address:Port UNCONN 0 0 0.0.0.0:bootpc 0.0.0.0:* UNCONN 0 0 127.0.0.1:323 0.0.0.0:* UNCONN 0 0 [::1]:323 [::]:* 显示套接字使用概况： 123456789# ss -sTotal: 185TCP: 4 (estab 1, closed 0, orphaned 0, timewait 0)Transport Total IP IPv6RAW 1 0 1 UDP 3 2 1 TCP 4 2 2 INET 8 4 4 FRAG 0 0 0 ipcalc命令 – 简单的IP地址计算器ipcalc命令的全称是：Calculate IP information for a host（计算主机的IP信息） ipcalc命令是一个简单的ip地址计算器，可以完成简单的IP地址计算任务。 语法格式： ipcalc [参数] [IP地址] 常用参数： -b 由给定的IP地址和网络掩码计算出广播地址 -h 显示给定IP地址所对应的主机名 -m 由给定的IP地址计算器网络掩码 -p 显示给定的掩码或IP地址的前缀 -n 由给定的IP地址和网络掩码计算网络地址 -s 安静模式，不显示任何错误信息 –help 显示帮助信息 参考实例 计算给定掩码的前缀 ： 12# ipcalc -p 192.168.88.56 255.255.255.0PREFIX=24 给定IP和网络掩码计算网络地址 ： 12# ipcalc -n 192.168.88.56 255.255.255.0NETWORK=192.168.88.0 给定IP显示对应的主机名： 12# ipcalc -h 223.5.5.5HOSTNAME=public1.alidns.com 使用多个参数计算给定IP的网络掩码，广播地址，网络地址： 1234# ipcalc -m -b -n 119.29.29.29/28NETMASK=255.255.255.240BROADCAST=119.29.29.31NETWORK=119.29.29.16 7. 设备管理mount命令 – 文件系统挂载mount命令用于加载文件系统到指定的加载点。此命令的最常用于挂载cdrom，使我们可以访问cdrom中的数据，因为你将光盘插入cdrom中，Linux并不会自动挂载，必须使用Linux mount命令来手动完成挂载。 语法格式：mount [参数] 常用参数： -t 指定挂载类型 -l 显示已加载的文件系统列表 -h 显示帮助信息并退出 -V 显示程序版本 -n 加载没有写入文件“/etc/mtab”中的文件系统 -r 将文件系统加载为只读模式 -a 加载文件“/etc/fstab”中描述的所有文件系统 参考实例 查看版本： 1# mount -V 启动所有挂载： 1# mount -a 挂载 /dev/cdrom 到 /mnt： 1# mount /dev/cdrom /mnt 挂载nfs格式文件系统： 1# mount -t nfs /123 /mnt 挂载第一块盘的第一个分区到/etc目录 ： 1# mount -t ext4 -o loop,default /dev/sda1 /etc setleds命令 – 设定键盘上方三个 LED 的状态setleds即是英文词组“set leds”的合并，翻译为中文就是设置LED灯。setleds命令用来设定键盘上方三个 LED 灯的状态。在 Linux 中，每一个虚拟主控台都有独立的设定。 这是一个十分神奇的命令，竟然可以通过命令来控制键盘的灯的状态。那么下面我一起来学习一下这个命令吧。 语法格式：setleds [参数] 常用参数： -F 设定虚拟主控台的状态 -D 改变虚拟主控台的状态和预设的状态 -L 直接改变 LED 显示的状态 +num/-num 将数字键打开或关闭 +caps/-caps 把大小写键打开或关闭 +scroll /-scroll 把选项键打开或关闭 参考实例 控制键盘灯num灯亮和灯灭： 12# setleds +num # setleds -num 控制键盘的大小写键打开或关闭，键盘指示灯亮与灭： 12# setleds +caps # setleds -caps 控制键盘的选项键打开或关闭，键盘指示灯亮与灭： 1# setleds +scroll 对三灯的亮与灭的情况进行组合，分别设置为数字灯亮，大小写灯灭，选项键scroll灯灭： 1# setleds +num -caps -scroll loadkeys命令 – 改变linux键盘驱动程序loadkeys命令可以根据一个键盘定义表改变 linux 键盘驱动程序转译键盘输入过程。 语法格式：loadkeys [参数] [文件] 常用参数： -v 印出详细的资料，你可以重复以增加详细度 -q 不要显示任何讯息 -c 清除所有 composite 定义 -s 将定串定义表清除 参考实例 显示功能键： 1# loadkeys --funcs-only 将定串定义表清除： 1# loadkeys -s 清除所有 composite 定义： 1# loadkeys -c 印出详细的资料，你可以重复以增加详细度： 1# loadkeys -v 不要显示任何讯息： 1# loadkeys -q 8. 备份压缩gzip命令 – 压缩和解压文件gzip命令的英文是“GNUzip”，是常用来压缩文件的工具，gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多处“.gz”扩展名。 gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和tar命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。 语法格式：gzip [参数] 常用参数： -a 使用ASCII文字模式 -d 解开压缩文件 -f 强行压缩文件 -l 列出压缩文件的相关信息 -c 把压缩后的文件输出到标准输出设备，不去更动原始文件 -r 递归处理，将指定目录下的所有文件及子目录一并处理 -q 不显示警告信息 参考实例 把rancher-v2.2.0目录下的每个文件压缩成.gz文件： 1# gzip * 把上例中每个压缩的文件解压，并列出详细的信息： 1# gzip -dv * 递归地解压目录： 1# gzip -dr rancher.gz unzip命令 – 解压缩zip文件unzip命令是用于.zip格式文件的解压缩工具 ，unzip命令将列出、测试或从zip格式存档中提取文件，这些文件通常位于MS-DOS系统上。 默认行为（就是没有选项）是从指定的ZIP存档中提取所有的文件到当前目录（及其下面的子目录）。一个配套程序zip（1L）创建ZIP存档；这两个程序都与PKWARE的PKZIP和PKUNZIP为MS-DOS创建的存档文件兼容，但许多情况下，程序选项或默认行为是不同的。 语法格式：unzip [参数] [文件] 常用参数： -l 显示压缩文件内所包含的文件 -v 执行时显示详细的信息 -c 将解压缩的结果显示到屏幕上，并对字符做适当的转换 -n 解压缩时不要覆盖原有的文件 -j 不处理压缩文件中原有的目录路径 参考实例 把/home目录下面的mydata.zip解压到mydatabak目录里面： 1# unzip mydata.zip -d mydatabak 把/home目录下面的wwwroot.zip直接解压到/home目录里面： 1# unzip wwwroot.zip 把/home目录下面的abc12.zip、abc23.zip、abc34.zip同时解压到/home目录里面： 1# unzip abc\*.zip 查看把/home目录下面的wwwroot.zip里面的内容： 1# unzip -v wwwroot.zip 验证/home目录下面的wwwroot.zip是否完整： 1# unzip -t wwwroot.zip zip命令 – 压缩文件zip程序将一个或多个压缩文件与有关文件的信息(名称、路径、日期、上次修改的时间、保护和检查信息以验证文件完整性)一起放入一个压缩存档中。可以使用一个命令将整个目录结构打包到zip存档中。 对于文本文件来说，压缩比为2：1和3：1是常见的。zip只有一种压缩方法(通缩)，并且可以在不压缩的情况下存储文件。(如果添加了bzip 2支持，zip也可以使用bzip 2压缩，但这些条目需要一个合理的现代解压缩来解压缩。当选择bzip 2压缩时，它将通货紧缩替换为默认方法。)zip会自动为每个要压缩的文件选择更好的两个文件(通缩或存储，如果选择bzip2，则选择bzip2或Store)。 语法格式：zip [参数] [文件] 常用参数： -q 不显示指令执行过程 -r 递归处理，将指定目录下的所有文件和子目录一并处理 -z 替压缩文件加上注释 -v 显示指令执行过程或显示版本信息 -n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件 参考实例 将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip： 1# zip -q -r html.zip /home/html 压缩文件 cp.zip 中删除文件 a.c： 1# zip -dv cp.zip a.c 把/home目录下面的mydata目录压缩为mydata.zip： 1# zip -r mydata.zip mydata 把/home目录下面的abc文件夹和123.txt压缩成为abc123.zip： 1# zip -r abc123.zip abc 123.txt 将 logs目录打包成 log.zip： 1# zip -r log.zip ./logs bzip2命令 – bz2文件的压缩程序Linux系统中bzip2命令的英文是“bunzip2”，即.bz2文件格式的压缩程序； bzip2命令系统默认是没有安装的，需要安装bzip2库才可以使用此命令。 bzip2命令采用新的压缩演算法，压缩效果比传统的LZ77/LZ78压缩演算法来得好。若没有加上任何参数，bzip2压缩完文件后会产生.bz2的压缩文件，并删除原始的文件。 语法格式：bzip2 [参数] 文件系统 常用参数： -c 将压缩与解压缩的结果送到标准输出 -d 执行解压缩 -f bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖，请使用此参数 -k bzip2在压缩或解压缩后，会删除原始的文件。若要保留原始文件，请使用此参数 -s 降低程序执行时内存的使用量 -t 测试.bz2压缩文件的完整性 -v 压缩或解压缩文件时，显示详细的信息 -z 强制执行压缩 参考实例 压缩文件： 1# bzip2 a.txt 检查文件完整性： 1# bzip2 -t a.txt.bz2 zipinfo命令 – 查看压缩文件信息zipinfo命令的全称为“zip information”，该命令用于列出压缩文件信息。执行zipinfo指令可得知zip压缩文件的详细信息。 语法格式：zipinfo [参数] 常用参数： -1 只列出文件名称 -2 此参数的效果和指定”-1″参数类似，但可搭配”-h”,”-t”和”-z”参数使用 -h 只列出压缩文件的文件名称 -l 此参数的效果和指定”-m”参数类似，但会列出原始文件的大小而非每个文件的压缩率 -m 此参数的效果和指定”-s”参数类似，但多会列出每个文件的压缩率 -M 若信息内容超过一个画面，则采用类似more指令的方式列出信息 -s 用类似执行”ls -l”指令的效果列出压缩文件内容 -t 只列出压缩文件内所包含的文件数目，压缩前后的文件大小及压缩率 -T 将压缩文件内每个文件的日期时间用年，月，日，时，分，秒的顺序列出 -v 详细显示压缩文件内每一个文件的信息 -x&lt;范本样式&gt; 不列出符合条件的文件的信息 -z 如果压缩文件内含有注释，就将注释显示出来 参考实例 显示压缩文件信息： 123456# zipinfo file.zip Archive: file.zip 486 bytes 3 files-rw-r--r-- 2.3 unx 0 bx stor 24-May-10 18:54 a.c-rw-r--r-- 2.3 unx 0 bx stor 24-May-10 18:54 b.c-rw-r--r-- 2.3 unx 0 bx stor 24-May-10 18:54 c.c3 files, 0 bytes uncompressed, 0 bytes compressed: 0.0% 显示压缩文件中每个文件的信息： 1# zipinfo -v file.zip 只显示压缩包大小、文件数目： 123# zipinfo -h file.zip Archive: file.zipZip file size: 907 bytes, number of entries: 3 生成一个基本的、长格式的列表(而不是冗长的)，包括标题和总计行： 1# zipinfo -l file 查看存档中最近修改的文件： 1# zipinfo -T file | sort –nr -k 7 | sed 15q 9. 其他命令bc命令 – 浮点运算bc的英文全拼为“ Binary Calculator ”，是一种支持任意精度的交互执行的计算器语言。bash内置了对整数四则运算的支持，但是并不支持浮点运算，而bc命令可以很方便的进行浮点运算，当然整数运算也不再话下。 语法格式：bc [选项] 常用参数： -i 强制进入交互式模式 -l 定义使用的标准数学库 -w 定义使用的标准数学库 -q 打印正常的GNU bc环境信息 参考实例 算术操作高级运算bc命令它可以执行浮点运算和一些高级函数： 12# echo &quot;1.212*3&quot; | bc 3.636 设定小数精度（数值范围）： 12# echo &quot;scale=2;3/8&quot; | bc .37 计算平方和平方根： 1234# echo &quot;10^10&quot; | bc 10000000000[root@linuxcool ~]# echo &quot;sqrt(100)&quot; | bc 10 rmmod命令 – 删除模块rmmod即“remove module”的简称,rmmod命令用于删除模块。 执行rmmod命令，可删除不需要的模块。Linux操作系统的核心具有模块化的特性，因此在编译核心时，不需要吧全部功能都放入核心，可以将这些功能编译成一个个单独的模块，待有需要时再分别载入它们。 语法格式：rmmod [参数] [模块名称] 常用参数： -a 删除所有目前不需要的模块 -s 把信息输出至syslog常驻服务，而非终端机界面 -v 显示指令执行的详细信息 -f 强制移除模块，使用此选项比较危险 -w 等待着，知道模块能够被除时再移除模块 参考实例 卸载模块pppoe并显示执行信息： 1# rmmod -v pppoe 卸载bridge模块： 1# rmmod bridge 卸载bridge模块并将错误信息写入syslog： 1# rmmod -s bridge 孤立正在使用的bridge模块，知道不被使用： 1# rmmod -w bridge 删除正在使用的bridge模块（-f可以删除正在使用的模块，非常危险，慎用）： 1# rmmod -f bridge Linux命令 我在上面这个网站看到的常用Linux命令，所以拿出来方便自己学习和记忆。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全国计算机信息安全技术]]></title>
    <url>%2F2019%2F06%2F11%2F%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[考试大纲 基本要求 1. 了解信息安全保障工作的总体思路和基本实践方法 2. 掌握信息安全技术的基本概念、原理、方法和技术 3. 熟练掌握计算机网络安全、系统软件安全和应用软件安全的基本知识和实践技能 4. 掌握信息安全设备的安装、配置和使用的基本方法 5. 了解信息系统安全设施部署与管理基本技术 6. 了解信息安全风险评估和等级保护原理与方法 7. 了解信息安全相关的标准、法律法规和道德规范 考试内容 一、信息安全保障概述 1. 信息安全保障的内涵和意义 2. 信息安全保障的总体思路和基本实践方法 二、信息安全基础技术与原理 1. 密码技术 (1)对称密码与非对称密码 (2)哈希函数 (3)数字签名 (4)密钥管理 2. 认证技术 (1)消息认证 (2)身份认证 3. 访问控制技术 (1)访问控制模型 (2)访问控制技术 4. 审计和监控技术 (1)审计和监控基础 (2)审计和监控技术 三、系统安全 1. 操作系统安全 (1)操作系统安全基础 (2)操作系统安全实践 2. 数据库安全 (1)数据库安全基础 (2)数据库安全实践 四、网络安全 1. 网络安全基础 2. 网络安全威胁技术 3. 网络安全防护技术 (1)防火墙 (2)入侵检测系统与入侵防御系统 (3)PKI (4)VPN (5)网络安全协议 五、应用安全 1. 软件漏洞概念与原理 2. 软件安全开发 3. 软件安全检测 4. 软件安全保护 5. 恶意程序 6. Web 应用系统安全 六、信息安全管理 1. 信息安全管理体系 2. 信息安全风险评估 3. 信息安全管理措施 七、信息安全标准与法规 1. 信息安全标准 2. 信息安全法律法规与国家政策 3. 信息安全从业人员道德规范 考试方式 上机考试，考试时长 120 分钟，满分 100 分。 包含：选择题(60 分)、填空题(20 分)、综合应用题(20 分)。 复习第一章信息安全保障概述1.1信息安全保障背景1.1.1信息技术及其发展阶段信息技术两个方面：生产：信息技术产业；应用：信息技术扩散 信息技术核心：微电子技术，通信技术，计算机技术，网络技术 第一阶段，电讯技术的发明；第二阶段，计算机技术的发展；第三阶段，互联网的使用 1.1.2信息技术的影响积极：社会发展，科技进步，人类生活 消极：信息泛滥，信息污染，信息犯罪 1.2信息安全保障基础1.2.1信息安全发展阶段通信保密阶段（20世纪四十年代）：机密性，密码学 计算机安全阶段（20世纪六十和七十年代）：机密性、访问控制与认证，公钥密码学（Diffie Hellman，DES），计算机安全标准化（安全评估标准） 信息安全保障阶段：信息安全保障体系（IA），PDRR模型：保护（protection）、检测（detection）、响应(response)、恢复（restore），我国PWDRRC模型：保护、预警（warning）、监测、应急、恢复、反击（counter-attack），BS/ISO 7799标准（有代表性的信息安全管理体系标准）：信息安全管理实施细则、信息安全管理体系规范 1.2.2信息安全的含义一是运行系统的安全，二是系统信息的安全：口令鉴别、用户存取权限控制、数据存取权限方式控制、审计跟踪、数据加密等 信息安全的基本属性：完整性、机密性、可用性、可控制性、不可否认性 1.2.3信息系统面临的安全风险1.2.4信息安全问题产生的根源：信息系统的复杂性，人为和环境的威胁1.2.5信息安全的地位和作用1.2.6信息安全技术核心基础安全技术：密码技术 安全基础设施技术：标识与认证技术，授权与访问控制技术 基础设施安全技术：主机系统安全技术，网络系统安全技术 应用安全技术：网络与系统安全攻击技术，网络与系统安全防护与响应技术，安全审计与责任认定技术，恶意代码监测与防护技术 支撑安全技术：信息安全评测技术，信息安全管理技术 1.3信息安全保障体系1.3.1信息安全保障体系框架生命周期：规划组织，开发采购，实施交付，运行维护，废弃 保障要素：技术，管理，工程，人员 安全特征：机密性，完整性，可用性 1.3.2信息系统安全模型与技术框架P2DR安全模型：策略（policy），防护，检测，响应；防护时间大于检测时间加上响应时间，安全目标暴露时间=检测时间+响应时间，越小越好；提高系统防护时间，降低检测时间和响应时间 信息保障技术框架（IATF）：纵深防御策略（）：人员，技术，操作；技术框架焦点域：保护本地计算机，保护区域边界，保护网络及基础设施，保护支撑性基础设施 1.4信息安全保障基本实践1.4.1国内外信息安全保障工作概况1.4.2信息安全保障工作的内容确定安全需求，设计和实施安全方案，进行信息安全评测，实施信息安全监控 第二章信息安全基础技术与原理2.1密码技术2.1.1对称密码与非对称密码对称密钥密码体制：发送方和接收方使用相同的密钥 非对称密钥密码体制：发送方和接收方使用不同的密钥 对称密钥体制： 加密处理速度快、保密度高，密钥管理分发复杂代价高、数字签名困难 分组密码：一次加密一个明文分组：DES，IDEA，AES；序列密码：一次加密一位或者一个字符：RC4，SEAL 加密方法：代换法：单表代换密码，多表代换；置换法 安全性：攻击密码体制：穷举攻击法（对于密钥长度128位以上的密钥空间不再有效），密码分析学；典型的密码攻击：唯密文攻击，已知明文攻击，选择明文攻击（加密算法一般要能够抵抗选择明文攻击才认为是最安全的，分析方法：差分分析和线性分析），选择密文攻击 基本运算：异或，加，减，乘，查表 设计思想：扩散，混淆；乘积迭代：乘积密码，常见的乘积密码是迭代密码，DES，AES 数据加密标准DES：基于Feistel网络，3DES，有效密钥位数：56 国际数据加密算法IDEA：利用128位密钥对64位的明文分组，经连续加密产生64位的密文分组 高级加密标准AES：SP网络 分组密码：电子密码本模式ECB，密码分组链模式CBC，密码反馈模式CFB，输出反馈模式OFB，计数模式CTF 非对称密码： 基于难解问题设计密码是非对称密码设计的主要思想，NP问题NPC问题 克服密钥分配上的困难、易于实现数字签名、安全性高，降低了加解密效率 RSA：基于大合数因式分解难得问题设计；既可用于加密，又可用于数字签名；目前应用最广泛 ElGamal：基于离散对数求解困难的问题设计 椭圆曲线密码ECC：基于椭圆曲线离散对数求解困难的问题设计 通常采用对称密码体制实现数字加密，公钥密码体制实现密钥管理的混合加密机制 2.1.2哈希函数单向密码体制，从一个明文到密文的不可逆的映射，只有只有加密过程，没有解密过程 可将任意长度的输入经过变换后得到固定长度的输出（原消息的散列或消息摘要） 应用：消息认证（基于哈希函数的消息认证码），数字签名（对消息摘要进行数字签名口令的安全性，数据完整性） 消息摘要算法MD5：128位 安全散列算法SHA：160位 SHA比MD5更安全，SHA比MD5速度慢了25%，SHA操作步骤较MD5更简单 2.1.3数字签名通过密码技术实现，其安全性取决于密码体制的安全程度 普通数字签名：RSA，ElGamal，椭圆曲线数字签名算法等 特殊数字签名：盲签名，代理签名，群签名，不可否认签名，具有消息恢复功能得签名等 常对信息的摘要进行签名 美国数字签名标准DSS：签名算法DSA 应用：鉴权：重放攻击；完整性：同形攻击；不可抵赖 2.1.4密钥管理包括密钥的生成，存储，分配，启用与停用，控制，更新，撤销与销毁等诸多方面密钥的分配与存储最为关键 借助加密，认证，签名，协议和公证等技术 密钥的秘密性，完整性，真实性 密钥产生：噪声源技术（基于力学，基于电子学，基于混沌理论的密钥产生技术）；主密钥，加密密钥，会话密钥的产生 密钥分配： 分配手段：人工分发（物理分发），密钥交换协议动态分发 密钥属性：秘密密钥分配，公开密钥分配 密钥分配技术：基于对称密码体制的密钥分配，基于公钥密码体制的密钥分配 密钥信息交换方式：人工密钥分发，给予中心密钥分发，基于认证密钥分发 人工密钥分发：主密钥 基于中心的密钥分发：利用公开密钥密码体制分配传统密码的密钥；可信第三方：密钥分发中心KDC，密钥转换中心KTC；拉模型，推模型；密钥交换协议：Diffie-Hellman算法 公开密钥分配：公共发布；公用目录；公约授权：公钥管理机构；公钥证书：证书管理机构CA，目前最流行 密钥存储： 公钥存储 私钥存储：用口令加密后存放在本地软盘或硬盘；存放在网络目录服务器中：私钥存储服务PKSS；智能卡存储；USB Key存储 2.2认证技术2.2.1消息认证产生认证码的函数： 消息加密：整个消息的密文作为认证码 消息认证码（MAC）：利用密钥对消息产生定长的值，并以该值作为认证码；基于DES的MAC算法 哈希函数：将任意长的消息映射为定长的哈希值，并以该哈希值作为认证码 2.2.2身份认证身份认证系统：认证服务器、认证系统客户端、认证设备 系统主要通过身份认证协议（单向认证协议和双向认证协议）和认证系统软硬件进行实现 认证手段：静态密码方式 动态口令认证：动态短信密码，动态口令牌（卡） USB Key认证：挑战/应答模式，基于PKI体系的认证模式 生物识别技术 认证协议：基于口令的认证协议，基于对称密码的认证，基于公钥密码的认证 2.3访问控制技术访问控制模型： 自主访问控制（DAC）：访问矩阵模型：访问能力表（CL），访问控制表（ACL）；商业环境中，大多数系统，如主流操作系统、防火墙等 强制访问控制（DAC）：安全标签：具有偏序关系的等级分类标签，非等级分类标签，比较主体和客体的安全标签等级,，访问控制安全标签列表（ACSLL）；访问级别：最高秘密级，秘密级，机密级，无级别及；Bell-Lapadula模型：只允许向下读、向上写，保证数据的保密性，Biba不允许向下读、向上写，保护数据完整性；Chinese Wall模型：多边安全系统中的模型，包括了MAC和DAC的属性 基于角色的访问控制（RBAC）：要素：用户，角色，许可；面向企业，大型数据库的权限管理；用户不能自主的将访问权限授权给别的用户；MAC基于多级安全需求，RBAC不是 2.3.2访问控制技术集中访问控制： 认证、授权、审计管理（AAA管理） 拨号用户远程认证服务RADIUS：提供集中式AAA管理；客户端/服务器协议，运行在应用层，使用UDP协议；组合认证与授权服务 终端访问控制器访问控制系统TACACS：TACACS+使用TCP；更复杂的认证步骤；分隔认证、授权、审计 Diameter：协议的实现和RADIUS类似，采用TCP协议，支持分布式审计 非集中式访问控制： 单点登录SSO Kerberos：使用最广泛的身份验证协议；引入可信的第三方。Kerberos验证服务器；能提供网络信息的保密性和完整性保障；支持双向的身份认证 SESAME：认证过程类似于Kerberos 2.4审计和监控技术2.4.1审计和监控基础审计系统：日志记录器：收集数据，系统调用Syslog收集数据；分析器：分析数据；通告器：通报结果 2.4.2审计和监控技术 恶意行为监控：主机监测：可监测的地址空间规模有限；网络监测：蜜罐技术（软件honeyd），蜜网（诱捕网络）：高交互蜜罐、低交互蜜罐、主机行为监视模块 网络信息内容审计：方法：网络舆情分析：舆情分析引擎、自动信息采集功能、数据清理功能；技术：网络信息内容获取技术（嗅探技术）、网络内容还原分析技术；模型：流水线模型、分段模型；不良信息内容监控方法：网址、网页内容、图片过滤技术 第三章系统安全3.1操作系统安全3.1.1操作系统安全基础基本安全实现机制： CPU模式和保护环：内核模式、用户模式 进程隔离：使用虚拟地址空间达到该目的 3.1.2操作系统安全实践UNIX/Linux系统： 文件系统安全：所有的事物都是文件：正规文件、目录、特殊文件（/dev下设备文件）、链接、Sockets；文件系统安全基于i节点中的三层关键信息：UID、GID、模式；模式位，权限位的八进制数表示；设置SUID（使普通用户完成一些普通用户权限不能完成的事而设置）和SGID，体现在所有者或同组用户权限的可执行位上；chmod改变文件权限设置、chown、chgrp；unmask创建文件默认权限 账号安全管理：/etc/passwd、/etc/shadow；伪用户账号；root账户管理：超级用户账户可不止一个，将UID和GID设置为0即可，使用可插入认证模块PAM进行认证登录 日志与审计：日志系统：记录连接时间的日志：/var/log/wtmp、/var/run/utmp，进程统计：pacct与acct，错误日志：/var/log/messages Windows系统： Windows安全子系统：winlogon和图形化标识和验证GINA、本地安全认证、安全支持提供者的接口（SSPI）、认证包、安全支持提供者、网络登录服务、安全账号管理器（SAM） 登录验证：Kerberos 用户权力与权限：用户权限：目录权限、文件权限；共享权限 日志与审计：系统日志、应用程序日志、安全日志 安全策略：密码策略；锁定策略；审核策略；用户全力指派；安全选项；装载自定义安全模板；windows加密文件系统 可信计算技术： 可信计算平台联盟（TCPA），可信计算组织（TCG） 可信PC，可新平台模块（TPM），可信软件栈（TSS），可信网络连接（TNC） 可信平台模块（TPM）：具有密码运算能力和存储能力，是一个含有密码运算部件和存储部件的小型片上系统；物理可信、管理可信的； 可信密码模块（TCM）：中国 可信计算平台：三个层次：可信平台模块（信任根）、可信软件栈、可信平台应用软件；我国：可信密码模块、可信密码模块服务模块、安全应用 可信网络连接（TNC）：开放性、安全性 3.2数据库安全3.2.1数据库安全基础 统计数据库安全 现代数据库运行环境：多层体系结构，中间层完成对数据库访问的封装 数据库安全功能： 用户标识和鉴定 存取控制：自主存取控制：用户权限有两个要素组成：数据库对象和操作类型，GRANT语句向用户授予权限，REVOKE语句收回授予的权限，角色：权限的集合；强制存取控制：主体和客体，敏感度标记：许可证级别（主体）、密级（客体），首先要实现自主存取控制 审计：用户级审计、系统审计；AUDIT设置审计功能，NOAUDIT取消审计功能 数据加密 视图与数据保密性：将视图机制与授权机制结合起来使用，首先用视图机制屏蔽一部分保密数据，然后在视图上再进一步定义存取权限 数据完整性： 语义完整性，参照完整性，实体完整性 约束：优先于使用触发器、规则和默认值 默认值：CREATEDEFAULT 规则：CREATE RULE，USE EXEC sp_bindefault，DROP RULE 事务处理：BEGAIN TRANSACTION，COMMIT，ROLLBACK；原子性、一致性、隔离性、持久性；自动处理事务、隐式事物、用户定义事物、分布式事务 3.2.2数据库安全实践 数据库十大威胁： 过度的特权滥用；合法的特权滥用；特权提升；平台漏洞；SQL注入；不健全的审计；拒绝服务；数据库通信协议漏洞；不健全的认证；备份数据库暴露 安全防护体系：事前检查，事中监控，事后审计 数据库安全特性检查： 端口扫描（服务发现）：对数据库开放端口进行扫描；渗透测试：黑盒式的安全监测，攻击性测试，对象是数据库的身份验证系统和服务监听系统，监听器安全特性分析、用户名和密码渗透、漏洞分析；内部安全监测：安全员数据、内部审计、安全配置检查、漏洞检测、版本补丁检测 数据库运行安全监控：网络嗅探器、数据库分析器、SQL分析器、安全审计 第四章网络安全4.1网络安全基础4.1.1TCP/IP体系架构4.1.2网络协议数据链路层协议：地址解析协议（ARP），逆向地址解析协议（RARP） 网络层协议：IP协议， Internet控制报文协议（ICMP）：发送出错和控制消息，提供了一个错误侦测与回馈机制 传输层协议：TCP协议，UDP协议 应用层协议：HTTP，SMTP和POP3，DNS 4.2网络安全威胁技术4.2.1扫描技术互联网信息搜集 IP地址扫描：操作系统命令ping（网络故障诊断命令）、tracer，自动化的扫描工具Namp 、Superscan 端口扫描：Namp软件；TCP全连接扫描，TCP SYN扫描，TCP FIN扫描，UDP的ICMP端口不可达扫描，ICMP扫描；乱序扫描和慢速扫描 漏洞扫描：网络漏洞扫描：模拟攻击技术；主机漏洞扫描：漏洞特征匹配技术、补丁安装信息的检测 弱口令扫描：基于字典攻击的弱口令扫描技术、基因穷举攻击的弱口令扫描技术 综合漏洞扫描：Nessus 扫描防范技术：防火墙，用安全监测工具对扫描行为进行监测 4.2.2网络嗅探非主动类信息获取攻击技术 防范：实现对网络传输数据的加密，VPN、SSL、SSH等加密和传输的技术和设备，利用网络设备的物理或者逻辑隔离的手段 4.2.3网络协议欺骗IP地址欺骗：和其他攻击技术相结合 ARP欺骗：中间人欺骗（局域网环境内实施），伪装成网关欺骗（主要针对局域网内部主机与外网通信的情况）；防范：MAC地址与IP地址双向静态绑定 TCP欺骗：将外部计算机伪装成合法计算机；非盲攻击：网络嗅探，已知目标主机的初始序列号，盲攻击：攻击者和目标主机不在同一个网络上 DNS欺骗：基于DNS服务器的欺骗，基于用户计算机的DNS欺骗 4.2.4诱骗式攻击网站挂马： 攻击者成功入侵网站服务器，具有了网站中网页的修改权限 技术：框架挂马：直接加在框架代码和框架嵌套挂马；JS脚本挂马；b ody挂马；伪装欺骗挂马 防范：Web服务器，用户计算机 诱骗下载： 主要方式：多媒体类文件下载，网络游戏软件和插件下载，热门应用软件下载，电子书爱好者，P2P种子文件 文件捆绑技术：多文件捆绑方式，资源融合捆绑方式，漏洞利用捆绑方式 钓鱼网站 社会工程 4.2.5软件漏洞攻击利用技术软件漏洞：操作系统服务程序漏洞，文件处理软件漏洞，浏览器软件漏洞，其他软件漏洞 软件漏洞攻击利用技术：直接网络攻击；诱骗式网络攻击：基于网站的诱骗式网络攻击，网络传播本地诱骗点击攻击 4.2.6拒绝服务攻击实现方式：利用目标主机自身存在的拒绝服务性漏洞进行攻击，耗尽目标主机CPU和内存等计算机资源的攻击，耗尽目标主机网络带宽的攻击 分类：IP层协议的攻击：发送ICMP协议的请求数据包，Smurf攻击；TCP协议的攻击：利用TCP本身的缺陷实施的攻击，包括SYN-Flood和ACK-Flood攻击，使用伪造的源IP地址，利用TCP全连接发起的攻击，僵尸主机；UDP协议的攻击；应用层协议的攻击：脚本洪水攻击 分布式拒绝服务（DDos）：攻击者，主控端，代理端，僵尸网络 防范：支持DDos防御功能的防火墙 4.2.7Web脚本攻击针对Web服务器端应用系统的攻击技术： 注入攻击：SQL注入，代码注入，命令注入，LDAP注入，XPath注入；防范：遵循数据与代码分离的原则 访问控制攻击，非授权的认证和会话攻击 针对Web客户端的攻击技术： 跨站脚本攻击（XSS）：反射型XSS（非持久性的跨站脚本攻击），存储型XSS（持久型的跨站脚本攻击），DOM-based XSS（基于文档对象模型的跨站脚本攻击）：从效果上来说属于反射型XSS 跨站点请求伪造攻击（CSRF）：伪造客户顿请求；防范：使用验证码，在用户会话验证信息中添加随机数 点击劫持攻击 4.2.8远程控制木马： 具有远程控制、信息偷取、隐藏传输功能的恶意程序；通过诱骗的方式安装；一般没有病毒的的感染功能；特点：伪装性，隐藏性，窃密性，破坏性； 连接方式：C/S结构；最初的网络连接方法；反弹端口技术：服务器端主动的发起连接请求，客户端被动的等待连接；木马隐藏技术：线程插入技术、DLL动态劫持技术、RootKit（内核隐藏技术） Wwbshell：用Web脚本写的木马后门，用于远程控制网站服务器；以ASP、PHP、ASPX、JSP等网页文件的形式存在；被网站管理员可利用进行网站管理、服务器管理等 4.3网络安全防护技术4.3.1防火墙一般部署在网络边界，也可部署在内网中某些需要重点防护的部门子网的网络边界 功能：在内外网之间进行数据过滤；对网络传输和访问的数据进行记录和审计；防范内外网之间的异常网络行为；通过配置NAT提高网络地址转换功能 分类：硬件防火墙：X86架构的防火墙（中小企业），ASIC、NP架构的防火墙（电信运营商）；软件防火墙（个人计算机防护） 防火墙技术： 包过滤技术：默认规则；主要在网络层和传输层进行过滤拦截，不能阻止应用层攻击，也不支持对用户的连接认证，不能防止IP地址欺骗 状态检测技术（动态包过滤技术）：增加了对数据包连接状态变化的额外考虑，有效阻止Dos攻击 地址翻译技术：静态NAT，NAT池，端口地址转换PAT 应用级网关（代理服务器）：在应用层对数据进行安全规则过滤 体系结构： 双重宿主主机体系结构：至少有两个网络接口，在双重宿主主机上运行多种代理服务器，有强大的身份认证系统 屏蔽主机体系结构：防火墙由一台包过滤路由器和一台堡垒主机组成，通过包过滤实现了网络层传输安全的同时，还通过代理服务器实现了应用层的安全 屏蔽子网体系结构：由两个包过滤路由器和一台堡垒主机组成；最安全，支持网络层、传输层、应用层的防护功能；添加了额外的保护体系，周边网络（非军事区，DMZ）通常放置堡垒主机和对外开放的应用服务器；堡垒主机运行应用级网关 防火墙的安全策略 4.3.2入侵检测系统和入侵防御系统入侵检测系统（IDS）： 控制台：在内网中，探测器：连接交换机的网络端口 分类：根据数据采集方式：基于网络的入侵检测系统（NIDS）、基于主机的入侵检测系统（HIDS）；根据检测原理：误用检测型入侵检测系统、异常检测型入侵检测系统 技术：误用检测技术：专家系统、模型推理、状态转换分析；异常检测技术：统计分析、神经网络；其他入侵检测技术：模式匹配、文件完整性检验、数据挖掘、计算机免疫方法 体系结构：集中式结构：单一的中央控制台；分布式结构：建立树形分层结构 部署：一个控制台可以管理多个探测器，控制台可以分层部署，主动控制台和被动控制台 入侵防御系统（IPS）： 部署：网络设备：网络中需要保护的关键子网或者设备的网络入口处，控制台 不足：可能造成单点故障，可能造成性能瓶颈，漏报和无保的影响 4.3.3PKI公共密钥基础设施是创建、管理、存储、分布和作废数字证书的一场系列软件、硬件、人员、策略和过程的集合 组成：数字证书是PKI的核心；安全策略；证书认证机构（CA）；证书注册机构；证书分发机构；基于PKI的应用接口 数字证书 信任模式：单证书认证机构信任模式，层次信任模型，桥证书认证机构信任模型 4.3.4VPN利用开放的物理链路和专用的安全协议实现逻辑上网络安全连接的技术 网络连接类型：远程访问型VPN（Client-LAN）客户机和服务器都安装VPN软件；网络到网关类型的VPN（LAN-LAN）客户端和服务器各自在自己的网络边界部署硬件VPN网关设备 VPN协议分类：网络隧道技术 第二层隧道协：封装数据链路层数据包；介于二、三层之间的隧道协议；第三层隧道协议IPSec，通用路由封装协议（GRE）；传输层的SSL VPN协议：SSL协议工作在TCP/IP和应用层之间 4.3.5网络安全协议Internet安全协议（IPSec）：引入加密算法、数据完整性验证和身份认证；网络安全协议：认证协议头（AH）、安全载荷封装（ESP，传输模式、隧道模式），密钥协商协议：互联网密钥交换协议（IKE） 传输层安全协议（SSL）：解决点到点数据安全传输和传输双方身份认证的网络安全传输协议；记录协议和握手协议 应用层安全协议： Kerberos协议；SSH协议：加密所有传输的数据，能防止DNS欺骗和IP欺骗；安全超文本传输协议（SHTTP）；安全多用途网际邮件扩充协议（S/MIME）；安全电子交易协议（SET）]]></content>
      <categories>
        <category>信息安全技术</category>
      </categories>
      <tags>
        <tag>计算机三级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript]]></title>
    <url>%2F2019%2F06%2F03%2FJavaScript%2F</url>
    <content type="text"><![CDATA[JavaScript简介1. JavaScript简介 JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。 Javascript包含了三个部分：ECMAScript、DOM和BOM 2. 如何使用JavaScript通过&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;中直接编写 通过&lt;script type=&quot;text/javascript&quot; src=&#39;目标文档的url&#39;&gt;&lt;/script&gt;链接外部的Js文件，一旦应用了外部文件，就不能编写代码了，即使编写了，浏览器也会忽略。 作为某个元素的事件属性值或者是超链接的href属性值 3. 代码屏蔽12345&lt;script type=&quot;text/javascript&quot;&gt;&lt;!-- Js代码//--&gt;&lt;script&gt; 如果浏览器不支持Js，可以使用&lt;noscript&gt;&lt;/noscript&gt;标签，显示noscript中的内容 4. Javascript的基本语法 Javascript的执行顺序：按照在html文件中的顺序依次执行 大小写敏感：Javascript严格区分大小写 忽略空白符和换行符 语句分隔符： 使用;结束语句,可以把多个语句写在一行，最后一个语句的分号可以省略，但尽量不要省略，可以使用{}括成一个语句组，形成一个块block 通过\对代码进行拆行操作 12document.write(&apos;hello\world&apos;); 注释： 单行注释 // 多行注释 /*注释内容*/ 保留字 通过document.write()向文档书写内容 通过console.log()向控制台写入内容 Javascript中的错误 语法错误：通过控制台进行调试 逻辑错误：通过alert()进行调试 5. 标识符 在JS中所有的可以由我们自主命名的都可以成为标识符。 规则： 标识符中可以含有字母、数字、_、$ 标识符不能以数字开头 标识符不能是ES中的关键字或保留字 标识符一般都采用驼峰命名法 数据类型与变量1. 原始数据类型 数值型 十进制数 十六进制数 八进制数 特殊值 Infinity无穷大 NaN ：可以通过isNaN()检测值是否为NaN 字符串型 定界符：&quot;&quot;或&#39;&#39; 转义符： 123456\n 回车换行\r 换行\t 水平制表符\&quot; &quot;\&apos; &apos;\\ \ 布尔值型 true | false 只有小写才是 2. 复合数据类型 对象(object) 数组(array) 函数(function) 3. 特殊数据类型 无定义数据类型undefined 空值null 在JS中一共有六种数据类型 String-&gt;字符串 Number-&gt;数值 Boolean-&gt;布尔值 Null-&gt;空值 Undefined-&gt;未定义 Object-&gt;对象 4. 变量 声明变量 通过var关键字声明变量，可以声明变量的同时给变量赋值，可以一次声明一个变量也可以一次声明多个变量，如果只声明变量未对其赋值，默认值为undefined，如果变量重名会产生覆盖。 注意：变量严格区分大小写，变量名称不要包含特殊字符，变量名称最好遵循驼峰标记法或下划线法，。变量名称最好含义明确。 变量在内存中的储存与释放 收集方式 收集内容 回收算法 5. 类型转换 隐式转换 转换成布尔类型假 12345underfined-&gt;falsenull -&gt;false数值型0或0.0或NaN-&gt;false字符串长度0-&gt;false其它对象-&gt;true 转换为数值型数据 123456undefined-NaNnull-&gt;0true-&gt;1false-&gt;0内容为数字-&gt;数字，否则转换成NaN其它对象-&gt;NaN 转换为字符串型数据 123456undefined-&gt;&quot;undefined&quot;null-&gt;&quot;null&quot;true-&gt;&quot;true&quot;false-&gt;&quot;false&quot;数值型-&gt;NaN、0或者与数值对应的字符串其它对象-&gt;如果存在这个对象则转换为toString()方法的值，否则转换为Undefined 显示转换 转换成数值 Number函数强制转换成数值 123456789数值-&gt;转换成原来的的值字符串-&gt;如果可以解析为数值，则转换成数值，否则转换成NaN或者0true-&gt;1,false-&gt;0undefined-&gt;NaNnull-&gt;0 转换成整形 parseInt(string,radix);返回转换成浮点型的值 当参数radix的值为0，或者没有设置这个参数，parseInt()会根据string来判断数字的基数。 当忽略radix，Javascript默认数字的基数规则为： ​ 如果string以0开头，parseInt()会把string其余部分解析为十六进制的整数转化为十进制 ​ 如果string以0开头，那么ECMAScript v3允许parseInt()的一个实现把其后的字符解析为八进制或十六进制的数 ​ 如果string以1~9的数字开头，parseInt()将把他解析为十进制的整数 ​ 字符串如果以合法字符开始，截取合法字符 ​ 开头和结尾的空格是允许的 ​ 如果字符串的第一个字符不能被转换为数字，parseInt()会返回NaN ​ 在字符串以”0”为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数 转换成浮点型 parseFloat(string);返回转换成浮点型的值 该函数指定字符串的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。 注意：Number函数将字符串转换为数值比parseInt函数严格很多。基本上只要有一个字符无法转换成数值，整个字符串就会被转换成NaN。 转换成字符串 通过String函数转换成字符串 123456数值-&gt;数值本身字符串-&gt;字符串本身true-&gt;&quot;true&quot;false-&gt;&quot;false&quot;undefined-&gt;&quot;undefined&quot;null-&gt;&quot;null&quot; 转换成字符串型toString() 转换成布尔类型 通过Boolean函数强制转换成布尔值 123450、-0、0.0-&gt;falseNaN-&gt;false空字符串-&gt;falseundefined-&gt;falsenull-&gt;false 运算符与表达式1. 表达式表达式是用于Javascript脚本运行时进行计算的式子，可以包含常量、变量、运算符。 2. 运算符 算术运算符 +、-、*、/、%、++、-- 注意：+号用来连接两个字符串。只要+连接的操作数中有一个是字符串类型，JS就会自动把非字符串型数据作为字符串型数据来处理。JS代码的执行顺序是从左到右，所有在+连接的表达式中，遇到字符串型数据之前，所有出现的数值型数据（或者可以自动转换为数值型的数据）仍被作为数值来处理。为了避免这种情况，我们可以在表达式前拼一个空字符串。 字符连接符 通过+连接字符串 赋值运算符 =、+=、-=、*=、/=、%= 比较运算符 &gt;、&gt;=、&lt;、&lt;=、==、!=、===、!== 注意：比较运算符的结果为布尔类型。==只比较值是否相等、===比较值和类型。 逻辑运算符 &amp;&amp;、||、！ 注意：逻辑运算符的结果为布尔类型，&amp;&amp;如果第一个表达式为false，造成短路，||如果第一个表达式为true，造成短路。 三元运算符 exp1?exp2:exp3 其他运算符 逗号运算符 逗号用来将多个表达式连接为一个个表达式，新表达式的值为最后一个表达式的值，多用在变量声明处 vold运算符 vold运算符用来指明一个表达式无返回结果 typeof运算符 typeof运算符用来返回同一个字符串，返回的是操作数的数据类型 3. 运算符的优先级1234567891011121314151617• .、[]、 new• ()• ++、 --• !、~、+(单目)、-(单目)、typeof、void、delete• %、*、/• +(双目)、-(双目)• &lt;&lt; 、 &gt;&gt;、 &gt;&gt;&gt;• &lt;、&lt;=、&gt;、&gt;=• ==、!==、===• &amp;• ^• |• &amp;&amp;• ||• ?:• =、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=、&amp;=、^=、|=• , 通过()改变优先级 4. 流程控制 条件语句 if(exp)执行一句代码 if(exp){执行代码段;} if(exp){exp为true执行代码段}else{exp为false执行代码段;} if...elseif...与switch...case if嵌套 循环语句 1234for循环for(exp1;exp2;exp3)&#123; 循环体;&#125; while循环 do...while循环 特殊循环控制 break终止循环 continue跳过当次循环，进入下次循环 函数1. 什么是函数？函数是完成某一功能的代码段，函数是可重复执行的代码段，函数方便管理和维护。 2. 自定义函数 通过function关键字 1234function 函数名称([参数,...])&#123; 代码段; return 返回值；&#125; 注意：函数名称不要包含特殊字符；函数名称最好含义精确；函数名称最好遵循驼峰标记法或者下划线法；函数名称严格区分大小写；函数名如果重复会产生覆盖；函数可以有参数也可以没有参数，可以有一个参数也可以有多个参数；函数通过return加返回值，如果没有return默认返回undefined；函数不调用不执行； 匿名函数 函数表达式可以存储在变量中，变量也可以作为一个函数使用 可以将匿名函数作为参数传递给其它函数，接收方函数就可以通过所传递进来的函数完成某些功能 可以通过匿名函数来执行某些一次性的任务 通过Function()构造函数 通过内置Javascript函数构造器（Function()）定义； ​ var myFunction 3. 调用函数 作为一个函数调用 通过函数名称()进行调用，如果有参数传递相应的参数即可 在HTML中默认的全局对象是HTML页面本省，所以函数是在属于HTML页面。在浏览器中的页面对象是浏览器窗口（window对象），所以函数会自动变为window对象的函数。也可以通过window.函数名称()进行调用 全局对象 当函数没有被自身的对象调用时，this的值就会变成全局对象。在web浏览器中全局对象是浏览器窗口window对象。 函数作为方法调用 可以将函数定义为对象的方法进行调用 使用构造函数调用函数 如果函数调用前使用了new关键字，则调用了构造函数 作为回调函数调用函数 call()、apply() 4. 参数函数可以有参数也可以没有参数，如果定义了参数，在调用函数的时侯没有传值，默认设置为undefined；在调用函数时如果传递参数超过了定义时参数，js会忽略掉多余参数；js中不能直接写默认值，可以通过arguments对象来实现默认值效果；可以通过arguments对象实现可变参数的函数；通过值传递参数在函数体内对变量做修改不会影响变量本身；通过对象传递参数在函数体内对变量做更改会影响变量本身； 5. 变量的作用域 局部变量 在函数体内声明的变量，仅在函数体内可以使用 全局变量 函数体外声明的变量，在变量声明开始到脚本结束都可以使用 注意：尽量控制全局变量的数量，容易引发BUG；最好总是使用var语句来声明变量 6. JavaScript全局函数isFinite(value)检测某个值是否是无穷值，如果number是NaN或者+Infinity或者-Infinity的数，isFinite()返回false。 isNaN(value)检测某个值是否是NaN，isNaN()检测是否是非数值，如果值为NaN返回true，否则返回false。 encodeURI(uri)将字符串编码为URI，函数是不会转义的，使用encodeURIComponent()方法分别对特殊含义的ASCII标点符号进行编码；decodeURI(uri)解码某个编码的URI； encodeURIComponent(uri)将字符串编码为URI组件;decodeURIComponent(uri)解码一个编码的URI组件； escape()对字符串进行编码；unescape()解码由escape()编码的字符串； eval()将Javascript字符串当作脚本来执行；注意：如果参数是一个表达式，eval()函数将执行表达式。如果参数是JavaScript语句，eval()将执行Javascript语句；eval()函数是一种由函数执行的动态代码，比直接执行脚本慢很多；慎重使用eval()函数，尽量不用，保证程序的安全性； Number(object)把对象的值转换位数字；注意：如果对象的值无法转换为数字，Number()函数返回NaN；如果参数是Date对象，Number()返回从1970年1月1日到现在所经历的毫秒数； String()把对象的值转换为字符串；String()函数返回与字符串对象的toString()方法一样； 7. 特殊形式的函数 函数也是数据 JavaScript中函数也是一种数据类型，只不过这种特殊类型有两个重要特性，即它们所包含的是代码、他们是可以执行的。 回调函数 回调函数的优势： ​ 可以让我们在不做命名的情况下传递函数，这样可以节省全局变量； ​ 我们可以将一个函数调用操作委托给另一个函数，这样就可以节省一些代码编写； ​ 有助于提升性能； 自调函数 ​ 优势：使用自调匿名函数不会产生任何全局变量； ​ 缺点：函数无法重复执行，适合执行一些一次性的或初始化的任务； 内部（私有）函数 ​ 优势：确保全局名字空间的纯净性，防止命名冲突；私有性之后我们就可以选择只将一些必要函数暴露给外部，并保留属于自己的函数，使其不被其他应用程序所调； 返回函数的函数 闭包 ​ 作用域链 ​ 词法作用域 注意：闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中中可能导致内存泄露。尽量再退出函数之前，将不使用的局部变量全部删除；闭包会在父函数的外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包函数当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 Javascript中的对象1. Javascript对象Javascript对象是基本数据类型之一，是复合类型；JavaScript中几乎所有事物都是对象；Javascript的对象是拥有属性和方法的数据。 Javascript中的对象可以简单理解成”名称:值”对(name:value) ​ JavaScript中的对象与这些概念类似： ​ Perl和Ruby中的散列（哈希） ​ C/C++中的散列表 ​ Java中的HashMap ​ PHP中的关联数组 ​ 名称：“名称是一个Javascript字符串”； ​ 注意：可以将属性名括在引号之间 ​ 这三种形式一样： 123var obj=&#123;prop:1&#125;var obj=&#123;&quot;prop&quot;:1&#125;var obj=&#123;&apos;prop&apos;:1&#125; ​ 必须放到引号之间： ​ 如果属性名是Javascript的保留字之一 ​ 如果属性名包含各种特殊字符（除字母、数字、下划线以外的字符） ​ 如果属性名以数字开头 ​ 在ECMAScript5中，保留字可以用做不带引号的属性名，但对于ECMAScript3中必须使用引号括起来 ​ 在ECMAScript5中对象直接量中的最后一个属性后的逗号将被忽略，在ECMAScript3的大部分实现中也可以忽略这个逗号，但在IE中报错。 2. JavaScript中的对象分类 内建对象 ​ 通过var obj={}对象字面量（object literal）法 ​ 通过var obj=new Object()创建 ​ 通过构造函数创建对象： ​ function Person(){} ​ var Person=function(){} ​ 构造器属性(constructor property): ​ 当我们创建对象的时候，实际上同时也赋予了该对象一种特殊的属性，就是构造器属性；这个构造器属性实际上是一个指向用于创建该对象的构造器函数的引用 ​ 通过instanceof操作符可以检测一个对象是否由某个指定的构造器函数创建的 注意：使用的时候通过new操作符得到对象：var person1=new Person()；用构造器创建对象的时候可以接收参数；构造器函数的首字母最好大写，区别其他的一班函数 ​ 通过Object.create创建对象 自定义对象 3. 访问对象的属性和方法属性： ​ 数据属性 ​ 访问属性 属性操作： ​ 访问属性： ​ 对象名.属性名 ​ 对象名[属性名] ​ 当处于某个对象方法内部的时候，可以通过this来访问同一对象的属性 ​ 添加属性： ​ 对象名]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[第一章1.1 计算机网络在信息时代中的作用 21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。 网络是指“三网”，即电信网络、有线电视网络和计算机网络。 计算机网络向用户提供最重要的功能： 连通性——计算机网络使上网用户之间都可以交换信息。 共享——资源共享。 1.2 因特网概述 网络(network)由若干结点(node)和连接这些结点的链路(link)组成。 结点——用于计算机网络中，表示计算机或路由器。 链路——连接的线路。 互联网是“网络的网络”(network of networks)。 连接在因特网上的计算机都称为主机(host)。 internet——互连网（互联网） Internet——当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，使用TCP/IP协议族作为通信规则。前身是美国的阿帕网APPRANET n起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网 因特网发展三个阶段 第一阶段——从单个网络ARPANET向互联网发展 第二阶段——逐步建成了三级结构的因特网 第三阶段——逐渐形成了多层次ISP结构的因特网 计算机网络、互联网、互连网 计算机网络：一些相互连接的计算机的集合。 互连网、互联网：一些相互连接的计算机网络的集合（网络的网络，互连网(互联网)由许多网络通过路由器互连而成）。 1.3 因特网的组成 边缘部分——由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。 核心部分——由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。 两种通信方式 客户服务器方式（C/S 方式——Client/Server） 客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。客户是服务的请求方，服务器是服务的提供方。 对等方式（P2P 方式——Peer to Peer） 因特网核心部分 在网络核心部分起特殊作用的是路由器(router)。 路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。 电路交换 从通信资源的分配角度来看，“交换”就是按照某种方式动态地分配传输线路的资源。 电路交换必定是面向连接的。 且利用率很低。 电路交换的三个阶段： 建立连接 通信 释放连接 分组交换（存储转发） 报文：要发送的整块数据 分组：先将报文划分成较短的、固定长度的数据段，每一个数据段前面添加上首部构成分组或包。 每一个分组的首部都含有地址等控制信息。分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。用这样的存储转发方式，最后分组就能到达最终目的地。 因特网的核心部分是由许多网络和把它们互连起来的路由器组成，而主机处在因特网的边缘部分。在因特网核心部分的路由器之间一般都用高速链路相连接，而在网络边缘的主机接入到核心部分则通常以相对较低速率的链路相连接。主机的用途是为用户进行信息处理的，并且可以和其他主机通过网络交换信息。路由器的用途则是用来转发分组的，即进行分组交换的。 分组交换优点 高效 灵活 迅速 可靠 分组在各结点存储转发时需要排队，这就会造成一定的时延。 分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。无法确保通信时端到端所需的带宽，在通信量较大时可能造成网络拥塞。 1.4计算机网络的的定义与分类最简单定义：计算机网络是一些互相连接、自治的计算机的集合。 分类： 从网络的作用范围进行分类 广域网 WAN (Wide Area Network) 局域网 LAN (Local Area Network) 城域网 MAN (Metropolitan Area Network) 个人区域网 PAN (Personal Area Network) 从网络的使用者分类 公用网（public network） 专用网（private network） 1.5计算机网络的主要性能指标 速率 速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是b/s，或kb/s,Mb/s, Gb/s 等。 带宽 “带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。 现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。 吞吐量 吞吐量/吞吐率(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。 吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。 受网络的带宽或网络的额定速率的限制。 时延 对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。提高链路带宽减小了数据的发送时延. 丢包率 丢包率即分组丢失率，是指在一定的时间范围内，分组在传输过程中丢失的分组数量与总的分组数量的比率。 具体：接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。 在现代计算机网络中网络拥塞是丢包的主要原因。因此，丢包率往往反映了网络的拥塞情况。 利用率 信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。 网络利用率则是全网络的信道利用率的加权平均值。 信道利用率并非越高越好。 若令 D0 表示网络空闲时的时延，D表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示D和 D0之间的关系： 1.6计算机网络体系结构网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。 三要素：语法，即数据与控制信息的结构或格式。 语义，即各个控制信息的具体含义，包括需要发出何种控制信息，完成何种动作以及做出何种响应。 同步（或时序），即事件实现顺序和时间的详细说明，包括数据应该在何时发送出去以及数据应该以什么速率发送。 计算机网络的体系结构(architecture)是计算机网络的各层及其协议的集合。l体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件。 物理层: 如何在物理媒体上传送比特流 数据链路层: 相邻节点间分组(帧)的传输 PPP, 以太网 网络层: 如何将分组从源主机通过中间路由器传送到目的主机 IP, 选路协议 运输层: 提供不同主机上应用程序间的数据传输服务 TCP, UDP 应用层:如何通过应用进程间的交互来完成特定网络应用。 FTP, SMTP, STTP 实体(entity) 表示任何可发送或接收信息的硬件或软件进程。 协议是控制两个对等实体进行通信的规则的集合。 在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。 要实现本层协议，还需要使用下层所提供的服务。 本层的服务用户只能看见服务而无法看见下面的协议。 下面的协议对上面的服务用户是透明的。 协议是“水平的”，即协议是控制对等实体之间通信的规则。 服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。 1.7计算机网络在我国发展1994年4月20日我国用64kbit/s专线正式连入因特网。 1.8两个重要的新兴网络技术云计算 基础设施即服务 平台即服务 软件即服务 物联网 对象识别 环境监控和对象跟踪 对象的自能控制 第二章2.1物理层的基本概念物理层协议的主要任务就是确定与传输媒体的接口的一些特性 机械特性 电器特性 功能特性 规程特性 2.2数据通信的基础知识数据通信系统： 源系统：源点、发送器 传输系统 目的系统：接收器、终点 通信的目的是传送消息。数据是信息的实体。信号是数据的电气或电磁表现。 编码：将数字数据转换成数字信号的过程。 调制：将数字数据转换成模拟信号的过程。 提高数据传输速率的途径 要使用更好的传输媒体，使用先进的编码和调制技术，但不管采用好的传输媒体和怎样先进的调制技术，数据传输速率总是受限的，不可能任意地提高，否则就会出现较多的差错。 传输方式 2.3物理层下面的传输媒体导引型传输媒体 双绞线 屏蔽双绞线 STP(Shielded Twisted Pair) 无屏蔽双绞线 UTP (Unshielded Twisted Pair) 同轴电缆 50 W 同轴电缆 75 W 同轴电缆 光纤 非导引型传输媒体 无线传输所使用的频段很广。 短波通信主要是靠电离层的反射，但短波信道的通信质量较差。 微波在空间主要是直线传播。 地面微波接力通信 卫星通信 2.4信道复用技术复用：通过一条物理线路同时传输多路用户的信号 频分复用：所有用户在同样的时间占用不同的带宽资源。 时分复用：所有用户在不同的时间占用同样的频带宽度 统计时分复用： 2.5数字传输系统将模拟电话信号转换为数字信号目前采用的都是脉冲编码调制PCM (Pulse Code Modulation)技术，将一路模拟电话信号转换为64 kbit/s的PCM数字脉冲信号。 为了充分利用高速传输线路的带宽，通常将多路PCM信号用TDM方法汇集成时分复用帧，按某种固定的复用结构进行长途传输。 两个互不兼容的PCM复用速率标准：即北美体制和欧洲体制 早期的数字传输系统存在许多缺点。主要由速率标准不统一和不是同步传输。 传统SDH/SONET传输网络由光传输系统和交换结点的电子设备组成。 全光网AON (All Optical Network) 用光网络结点代替原来交换结点的电子设备，组成以端到端光通道为基础的全光传输网，避免因光/电转换所带来的带宽瓶颈，而路由器等电信号处理设备在边缘网络连接用户终端设备。 2.6互连网接入技术接入：将端系统连接到边缘路由器。接入技术解决的就是最终用户接入本地ISP“最后一公里”的问题。通常，人们将端系统连接到ISP边缘路由器的物理链路及相关设备的集合称为接入网AN(accessnetwork)。 通过拨号调制解调器接入（非带宽接入） –允许最高56Kbps接入速率(通常会更低) –不能同时上网和打电话 –不提供持续连接 ADSL接入 上行和下行带宽做成不对称的。 上行指从用户到 ISP，而下行指从 ISP 到用户。 ADSL 在用户线（铜线）的两端各安装一个 ADSL 调制解调器。 我国目前采用的方案是离散多音调 DMT (Discrete Multi-Tone)调制技术。这里的“多音调”就是“多载波”或“多子信道”的意思。 光纤接入 以太网接入 无线接入 第三章3.1使用点对点信道的数据链路层信道类型： 点对点信道：这种信道使用一对一点对点通信方式。 广播信道：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。 链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。 数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。 封装成帧 封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。首部和尾部的一个重要作用就是进行帧定界。 透明传输 字节填充(byte stuffing)或字符填充(character stuffing)——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。如果转义字符也出现数据当中，那么应在转义字符前面插入一个转义字符。当接收端收到连续的两个转义字符时，就删除其中前面的一个。 ** 为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。 在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。 循环冗余检验的原理 循环冗余检验 CRC 和帧检验序列 FCS并不等同。CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。FCS 可以用CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。 仅用循环冗余检验CRC差错检出技术只能做到无差错接受。 可靠传输 要做到“可靠传输”就必须用到确认和重传机制。 停止等待协议 使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。这种可靠传输协议常称为自动重传请求ARQ(Automatic Repeat reQuest).ARQ 表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组 。 在发送完一个帧后，必须暂时保留已发送的帧的副本。数据帧和确认帧都必须进行编号。只要超过了一段时间还没有收到确认，就认为已发送的帧出错或丢失了，因而重传已发送过的帧。这就叫做超时重传。超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些。 停止等待协议不适合发送时延小于往返时延的情况。优点是简单，缺点是信道利用率低。 流水线传输 发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。 3.2点对点协议PPP特点： 简单 封装成帧 透明性 多种网络层协议 多种类型链路 差错检测 检测连接状态 PPP协议组成 一个将IP数据包封装到串行链路的方法。 链路控制协议LCP 网络控制协议NCP PPP协议的帧格式 透明传输问题 当 PPP 用在同步传输链路时，协议规定采用硬件来完成比特填充（和 HDLC 的做法一样）。 当 PPP 用在异步传输时，就使用一种特殊的字符填充法。 零比特填充 在发送端，只要发现有 5 个连续 1，则立即填入一个 0。接收端对帧中的比特流进行扫描。每当发现5 个连续1时，就把这 5 个连续 1 后的一个 0 删除， 3.3使用广播信道的数据链路层由于用广播信道连接的计算机共享同一传输媒体，因此使用广播信道的局域网被称为共享式局域网。虽然交换式局域网在有线领域已完全取代了共享式局域网，但无线局域网仍然使用的是共享媒体技术。 媒体接入控制（MAC） 静态划分信道：频分多址、时分多址、码分多址 动态接入控制： 随机接入 受控接入 局域网 网络为一个单位所拥有，且地理范围和站点数目均有限。 局域网的数据链路层的两个子层： 逻辑链路控制 LLC (Logical Link Control)子层。（与传输媒体无关）。 媒体接入控制 MAC (Medium Access Control)子层。 3.4共享式以太网为了通信的简便以太网采取了两种重要的措施 采用较为灵活的无连接的工作方式，即不必先建立连接就可以直接发送数据。 以太网对发送的数据帧不进行编号，也不要求对方发回确认。 这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。 以太网提供的服务 以太网的服务是不可靠的交付，即尽最大努力的交付。当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做。差错的纠正由高层来决定。如果高层发现丢失了一些数据而进行重传，但以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送。 载波监听多点接入/碰撞检测 CSMA/CD 最先发送数据帧的站，在发送数据帧后至多经过时间 2t （两倍的端到端往返时延）就可知道发送的数据帧是否遭受了碰撞。 以太网的端到端往返时延 2t 称为争用期，或碰撞窗口。 经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。 使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）。 每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 当连接很多站点时，以太网的平均吞吐量要比以太网的最高数据率小很多. 以太网的MAC帧格式 3.5网络和以太网交换机用集线器扩展以太网 优点：使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信。 扩大了局域网覆盖的地理范围。 缺点：碰撞域增大了，但总的吞吐量并未提高。 如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。 由于争用期的限制，并不能无限扩大地理覆盖范围 在数据链路层扩展以太网 使用网桥。网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口。 使用网桥优点 过滤通信量 扩大了物理范围 提高了可靠性 可互连不同物理层、不同MAC子层和不同速率的局域网。 使用网桥缺点 存储转发增加了时延。 在MAC 子层并没有流量控制功能。 具有不同 MAC 子层的网段桥接在一起时时延更大。 网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。 集线器在转发帧时，不对传输媒体进行检测。 网桥在转发帧之前必须执行 CSMA/CD 算法。 若在发送过程中出现碰撞，就必须停止发送和进行退避。 透明网桥是一种即插即用设备。 网桥在转发表中登记以下三个信息 在网桥的转发表中写入的信息除了地址和接口外，还有帧进入该网桥的时间。 虚拟局域网 虚拟局域网其实只是局域网给用户提供的一种服务，而不是一种新型局域网！ 简化网络管理。 控制广播风暴。 增强网络的安全性。 3.6以太网的演进速率达到或超过 100 Mb/s 的以太网称为高速以太网。 3.7无线局域网有固定基础设施的无线局域网 一个移动站若要加入到一个基本服务集 BSS，就必须先选择一个接入点 AP，并与此接入点建立关联。 移动站与AP建立关联的方法 被动扫描，即移动站等待接收接入站周期性发出的信标帧(beacon frame)。 主动扫描，即移动站主动发出探测请求帧(probe request frame)，然后等待从 AP 发回的探测响应帧(probe response frame)。 使用CSMA/CA协议 无线局域网不能使用CSMA/CD，而只能使用改进的CSMA协议。改进办法就是把CSMA增加一个碰撞避免功能。 无线局域网不能简单地搬用 CSMA/CD 协议。这里主要有两个原因。 对于无线信道，接收信号强度往往会远远小于发送信号强度。如要在无线局域网的适配器上实现碰撞检测，对硬件的要求非常高。。 即使我们能够实现碰撞检测的功能，并且当我们在发送数据时检测到信道是空闲的，在接收端仍然有可能发生碰撞（隐蔽站问题）。 第四章4.1网络层概述分组转发和路由选择（转发表） 电信网的成功经验让网络负责可靠交付 虚电路服务 面向连接，建立虚电路，使用可靠传输协议(虚电路是逻辑上的连接) 因特网采用设计思路 网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。 网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。 网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。 数据报服务 虚电路转发表 每台中间路由器在转发分组时必须用一个新的VC号替代原来的VC号。 4.2网际协议IP网际层协议IP 地址解析协议ARP 逆地址解析协议RARP 网际控制报文协议ICMP 网际组管理协议IGMP 中间设备 物理层：转发器 数据链路层：网桥或桥接器 网络层：路由器 网络层以上：网关 虚拟互连网 所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。 IP地址及编址方式 点分十进制记法：32位二进制代码，每8位插入一个空格，转换成十进制，提高可读性。 分类编址 IP地址 ::= {&lt;网络号&gt;,&lt;主机号&gt;} ::=代表“定义为” IP地址的使用范围 | 网络类别 | 最大网络数 | 第一个可用的网络号 | 最后一个可用的网络号 | 每个网络中最大的主机数 || ——– | ——————- | —————— | ——————– | ———————- || A | 126（2^7-2） | 1 | 126 | 16777214 || B | 16383(2^14-1) | 128.1 | 191.255 | 65534 || C | 2,097,151 (221 - 1) | 192.0.1 | 223.255.255 | 254 | 划分子网 三级的IP地址 IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;} 无分类编址CIDR IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;} 在分类编址中，给定一个IP地址，就确定了它的网络号和主机号。但在无分类编址中，由于网络前缀是不定长，IP地址本身并不能确定其网络前缀和主机号。 使用子网掩码(subnet mask)可以找出 IP 地址中的网络部分(网络前缀)。 CIDR 还使用“斜线记法” ，它又称为CIDR记法，即在 IP 地址面加上一个斜线“/”，然后写上网络前缀所占的位数。 地址解析协议ARP IP地址——&gt;ARP——&gt;物理地址 物理地址——&gt;RARP——&gt;IP地址 IP数据报由首部和数据两部分组成，首部前一部分是固定长度，共20字节，是所有IP数据报必须具有的。 IP数据报分片 4.3网际控制报文协议ICMPICMP 不是高层协议，而是 IP 层的协议。 ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。 前四个字节是统一的三个字段：类型、代码、检验和 ICMP报文的种类 差错报告报文 ICMP询问报文 PING PING用来测试两个主机之间的连通性 PING 使用了 ICMP 回送请求与回送回答报文。 PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。 4.4因特网的路由选择协议静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。 分层次的路由选择协议 自治系统AS 自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种AS 内部的路由选择协议和共同的度量以确定分组在该AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在AS之间的路由。 因特网两大路由选择协议 内部网关协议IGP RIP三个要点： ​ 仅和相邻路由器交换信息。 ​ 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 ​ 按固定的时间间隔交换路由信息，例如，每隔 30 秒。 OSPF三个要点： ​ 向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。 ​ 发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 ​ 只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。 外部网关协议EGP 划分区域 划分区域的好处就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。 4.5路由器的工作原理转发和路由选择的区别 “转发”(forwarding)就是路由器根据转发表将用户的 IP 数据报从合适的端口转发出去。 “路由选择”(routing)则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。 路由表是根据路由选择算法得出的。而转发表是从路由表得出的。 在讨论路由选择的原理时，往往不去区分转发表和路由表的区别。 由输入端口、变换结构、输出端口 交换机与路由器的比较 交换机的优点是即插即用，并具有相对高的分组过滤和转发速度。缺点是：大型交换机网络要求交换机维护大的转发表，主机中维护大的ARP表，并可能产生广播风暴，逻辑拓扑被限制为树。 路由器的优点是能提供更加智能的路由选择，并能隔离广播域。缺点是：路由器不是即插即用的，对每个分组处理时间通常比交换机更长。 4.6VPN与NAT用隧道技术实现虚拟专用网 4.7IP多播IP多播的一些特点 ​ 多播使用组地址—— IP 使用 D 类地址支持多播。多播地址只能用于目的地址，而不能用于源地址。 ​ 永久组地址——由因特网号码指派管理局 IANA 负责指派。 ​ 动态的组成员 利用局域网的硬件多播 IP多播需要两种协议 网际组管理协议IGMP ​ IGMP 并非在因特网范围内对所有多播组成员进行管理的协议。 ​ IGMP 不知道 IP 多播组包含的成员数，也不知道这些成员都分布在哪些网络上。 ​ IGMP 协议是让连接在本地局域网上的多播路由器知道本局域网上是否有主机（严格讲，是主机上的某个进程）参加或退出了某个多播组。 多播路由器选择协议 ​ 多播转发必须动态地适应多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。 ​ 多播路由器在转发多播数据报时，不能仅仅根据多播数据报中的目的地址，而是还要考虑这个多播数据报从什么地方来和要到什么地方去。 ​ 多播数据报可以由没有加入多播组的主机发出，也可以通过没有组成员接入的网络。 4.9下一代的网际协议IPV6IPV6引进的主要变化 IPv6 仍支持无连接的传送所引进的主要变化如下 更大的地址空间。IPv6 将地址从 IPv4 的 32 位 增大到了 128 位。 扩展的地址层次结构。 灵活的首部格式。 改进的选项。 允许协议继续扩充。 支持即插即用（即自动配置） 支持资源的预分配。 IPv6 数据报的目的地址可以是以下三种基本类型地址之一： 1.单播(unicast) 单播就是传统的点对点通信。 2.多播(multicast) 多播是一点对多点的通信。 3.任播(anycast) 这是 IPv6 增加的一种类型。任播的目的站是一组计算机，但数据报在交付时只交付其中的一个，通常是距离最近的一个。 从IPV4到IPV6的过渡 双协议栈 隧道技术 第五章5.1运输层协议概述从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。 运输层协议和网络层协议的主要区别 IP协议的作用范围是提供主机之间的逻辑通信 TCP（传输控制协议）和UDP（用户数据报协议）协议的作用范围是提供进程之间的逻辑通信 运输层的主要功能 运输层为应用进程之间提供端到端的逻辑通信（但网络层是为主机之间提供逻辑通信）。 运输层还要对收到的报文进行差错检测。 可靠数据传输 流量控制 拥塞控制 5.2用户数据报协议UDPUDP 只在 IP 的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能。 UDP 在某些方面有其特殊的优点 发送数据之前不需要建立连接 UDP 的主机不需要维持复杂的连接状态表。 UDP 用户数据报只有 8 个字节的首部开销。 网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。 UDP的特点 UDP是无连接的。 UDP使用尽最大努力交付，即不保证可靠交付，同时也不使用拥塞控制，因此主机不需要维持具有许多参数的、复杂的连接状态表。 由于 UDP 没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。 UDP是面向报文的。 UDP支持一对一、一对多、多对一和多对多的交互通信。 5.3传输控制协议TCPTCP的主要特点： ​ TCP 是面向连接的运输层协议。 ​ 每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 ​ TCP 提供可靠交付的服务。 ​ TCP 提供全双工通信。 ​ 面向字节流。 发送缓存和接收缓存 TCP 连接是一条虚连接而不是一条真正的物理连接。 一对一通信 TCP 把连接作为最基本的抽象。 每一条 TCP 连接唯一地被通信两端的两个端点所确定。即： TCP 连接 ::= {(IP1: port1), (IP2: port2)} UDP与TCP复用的区别 TCP报文段结构 TCP 报文段分为首部和数据两部分。 TCP 的全部功能都体现在它首部中各字段的作用。 TCP 报文段首部的前 20个 字节是固定的，后面有 4N 字节是根据需要而增加的选项(N 必须是整数)。因此 TCP 首部的最小长度是 20 字节。 TCP的可靠传输 TCP在IP的不可靠的尽最大努力服务的基础上实现了一种可靠数据传输服务，保证数据无差错、无丢失、按序和无重复的交付。 由于TCP下面的传输数据的互联网的结构非常复杂，因此不能采用最简单的停止等待协议来实现可靠传输。 以字节为单位的滑动窗口 流量控制 •流量控制(flow control)就是让发送方的发送速率不要太快，既要让接收方来得及接收。 •利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。 超时重传时间的选择 指数加权 karn算法（不采用重传） 新的 RTTS = (1 - a) * (旧的 RTTS) + a * (新的 RTT 样本) RTO = RTTS + 4 *RTTD 新的 RTTD = (1 - b) (旧的RTTD）+b|RTTS - 新的 RTT样本| 快速重传 5.4拥塞控制如果网络中的负载(load)，即发送到网络中的分组数量，超过了网络的容量，即网络中能处理的分组数量，那么在网络中就会发生拥塞(congestion)。 所谓拥塞控制(congestion control)就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。 开环控制和闭环控制 开环控制方法就是在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不产生拥塞。 闭环控制是基于反馈环路的概念。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML-CSS基础]]></title>
    <url>%2F2019%2F05%2F15%2FHTML-CSS%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[HTML软件架构 C/S：C(客户端，用户通过客户端来使用软件)，S表示服务器。一般软件都是C/S架构。 软件使用前必须安装 软件更新时，服务器与客户端同时更新 不能跨平台使用 C/S架构的软件客户端和服务器通信采用的是自有协议，相对来说比较安全 B/S：B(浏览器)，B/S架构软件通过使用浏览器访问网页的形式，来使用软件。 软件不需要安装，直接使用浏览器访问指定网址即可； 软件更新时，客户端不需要更新 软件可以跨平台使用 客户端和服务器之间通信采用的是通用HTTP协议，相对来说不安全 软件开发流程 网页设计师根据需求设计网页（PS） 前端工程师将设计做成静态网页（HTML） 后台工程师将静态网页修改为动态网页（JSP） 网页组成 结构（HTML用于描述页面的结构） 表现（CSS用于控制页面中元素的样式） 行为（JavaScript用于响应用户操作） 乱码 编码：依据一定的规则，将字符转换为二进制编码的过程； 解码：一句一定的规则，将二进制编码转换为字符的过程； 特殊符号称为实体（转义字符），转换用&amp;实体名字； &lt; &amp;lt; &amp;copy; 图片格式JPEG（JPG） JPEG图片支持的颜色比较多，图片可以压缩，但是不支持透明 一般使用JPEG来保存照片等颜色丰富的图片 GIF GIF支持的颜色少，只支持简单的透明，支持动态图 图片颜色单一或者是动态图时可以使用GIF PNG PNG支持颜色多，并且支持复杂的透明 可以用来显示颜色复杂的透明的图片 图片使用规则： 效果不一致，使用效果好的 效果一致，使用容量小的 meta标记作用 可以用来设置网页关键字 &lt;meta name=&quot;keywords&quot; content=&quot;HTML5,JavaScript,前端，后端，Python&quot; /&gt; 用来指定网页的描述 搜索引擎在检索页面时，会同时检索页面中的关键词和描述，但是这两个值不会影响页面在搜索引擎中的排名 &lt;meta name=&quot;description&quot; content=&quot;子在川上曰：逝者如斯夫！&quot; 可以用作请求重定向 &lt;meta http-equiv=&quot;refresh&quot; content=&quot;4(秒数);url=http:www.baidu.com(目标路径)&quot; /&gt; src属性配置src属性配置的是图片的路径，目前我们所要使用的路径全是相对路径 相对路径：相对路径指相对于当前资源所在目录的位置 语法规范 HTML中不区分大小写 HTML中注释不能嵌套 HTML标签必须结构完整，要么成对出现，要么自结束标签 HTML标签可以嵌套，但是不能交叉嵌套 HTML标签中的属性必须有值，且值必须加引号 浏览器尽最大的努力正确的解析页面，你所有的不符合语法规范的内容，浏览器都会为你自动修正，但是有些情况会修正错误 内联框架使用内联框架可以引入一个外部的页面，使用iframe来创建一个内联框架，属性： src:指向一个外部页面的路径，可以使用相对路径 width: height: name:可以为内联框架指定一个name属性 在现实开发中不推荐使用内联框架，因为内联框架的内容不会被搜索引擎所检索 &lt;iframe src=&quot;demo2.html&quot; name=&quot;tom&quot;&gt;&lt;/iframe&gt; a标签&lt;a href=&quot;#&quot;&gt;&lt;/a&gt; 如果链接地址设为#，则点击超链接以后，会自动跳转到当前页面顶部。id是html中属性作为标签的唯一标识，id属性在同一页面中只能有一个不能重复。 1.&lt;a id=&quot;1&quot; href=&quot;#&quot;&gt;回到顶部&lt;/a&gt; 2.&lt;a href=&quot;#1&quot;&gt;回到底部&lt;/a&gt; 通过2可以快速到1的地方 还可以发送电子邮件的超链接，点击超链接以后可以自动打开计算机中默认的邮件客服端href=”mailto:123@nik.com“；当点击这个超链接时，会默认打开计算机的默认电子邮件客服端，并且将收件人设置为mailto后的邮件地址； CSS层叠样式表（Cascading Style Sheets）,css可以用来为网页创建样式表，通过样式表可以对网页进行装饰。 可以将CSS样式编写到元素的style属性中，将样式直接编写到style属性中，这种样式称为内联样式，内联样式只对当前的元素中的内容起作用，内联样式不方便复用，内联样式属于结构与表现耦合，不方便后期维护，不推荐使用 CSS样式 内联样式：&lt;p style=&quot;color:red;font-size:20px;&quot;&gt; 内部样式： type12345678......&lt;style type=&quot;text/css&quot;&gt;p&#123;​ color:red;​ font-size:40px;&#125;&lt;/style&gt;...... 外部样式表：将样式表写到外部的CSS文件中，然后通过link标签来将外部的CSS文件引入到当前页面中，这样外部文件中的CSS样式表将会应用到当前页面中。将CSS样式统一编写到外部的样式表中，完全使结构和表现分离，可以是样式表可以在不同的页面使用，最大限度的使样式可以进行复用，将样式表统一写在样式表中，然后通过link标签引入，可以利用浏览器的缓存加快用户访问的速度提高用户体验，所以在开发中我们推荐使用的方式就是外部的CSS文件； 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css(style文件)&quot; /&gt; CSS注释/**/作用和HTML注释类似，只不过它必须编写在style标签中，或者是css文件中 CSS的语法 选择快 通过选择器可以选中页面中指定的元素，并且将声明块中的样式应用到选择其对应的元素上 声明块 声明块紧跟在选择器的后边，使用一对{}括起来，声明块中实际上就是一组一组的名值对结构，这一组一组的名值对我们称为声明，在一个声明块中可以写多个声明，多个声明之间使用;隔开，声明的样式名和样式值之间使用:来连接。 IDEnodep++ sublime HBuilder（免费、国产） webstorm（收费） 块元素和内联元素 div就是一个块元素，块元素就是会独占一行的元素，无论有多少内容，他都会独占一行。 div标签没有任何语义，就是纯粹的块元素，并且不会为它里边的元素设置任何的默认样式，div元素主要用来对页面进行布局的。 p hn span是一个内联元素（行内元素），所谓的行内元素，是指只占自身大小的元素，不会占用一行常见的内联元素 span没有任何语义，span标签专门用来选中文字，然后为文字来设置样式 a img iframe span 块元素主要用来做页面的布局，内联元素主要用来选中文本设置样式，一般情况下只使用块元素去包含内联元素，而不会使用内联元素去包含一个块元素。a元素可以包含任意元素，除了它本身。p元素不可以包含任何块元素。 元素选择器 作用：通过元素选择器可以选择页面中的所有指定元素 语法：标签名{} id选择器 通过元素的id属性值选中唯一的一个元素 语法：#id属性值{} 类选择器 通过元素的class属性值选中一组元素 语法：.class属性值{} 选择分组（并集选择器） 通过选择器分组可以同时选中多个选择器对应的元素 语法：选择器1，选择器2，选择器N{} 通配选择器 他可以用来选中页面的所有元素 语法：*{} 复合选择器（交集选择器） 可以选中同时满足多个选择器的元素 语法：选择器1选择器2选择器N{} 元素关系 父元素：直接包含子元素的元素 子元素：直接被父元素包含的元素 祖先元素：直接或间接包含后代元素的元素，父元素也是祖先元素 后代元素：直接或间接被祖先元素包含的元素，子元素也是后代元素 兄弟元素：拥有相同父元素的元素叫做兄弟元素 后代元素选择器 作用：选中指定元素的指定后代元素 语法：祖先元素 后代元素{} 子元素选择器 作用：选中指定父元素的指定元素 语法：父元素 &gt; 子元素 伪类伪类专门用来表示元素的一种特殊的状态，当我们需要为处在这些特殊状态的元素设置样式时，就可以使用伪类 a:link{color:red;}表示正常链接 a:visited{color:blue;}表示访问过的链接 a:hover{color:yellow;}表示鼠标滑过的链接 a:active{color:green;}表示的是超链接被点击的状态 浏览器是通过历史记录来判断一个链接是否访问过，由于涉及到用户的隐私问题，所以使用visited味蕾只能设置字体的颜色 :hover和:active也可以对其他元素设置 IE6中不支持对超链接外的元素设置:hover和:active -:focus{}表示获取焦点 -:before{}表示指定元素前 -:after{}表示指定元素后 -::selection{}表示选中的元素 -:first-letter{}表示首字母 -:first-line{}表示首行 属性选择器title属性，这个属性可以给任何标签指定，当鼠标移入到元素上时，元素中的title属性的值将会作为提示文字显示 作用：可以根据元素中的属性或属性值来选取指定元素 语法： [属性名]选取含有指定属性的元素 [属性名=”属性值”]选择含有指定属性值的元素 [属性名^=”属性值”]选取属性值以指定内容开头的元素 [属性名$=”属性值”]选取属性值以指定内容结尾的元素 [属性名*=”属性值”]选取属性值以包含指定内容元素 例：p[title]{background-color:red;} ​ p[title=&quot;属性值&quot;]{color:red;} ​ p[title^=&quot;属性值&quot;]{color:red;} ​ p[title$=&quot;属性值&quot;]{color:red;} 子元素的伪类p:first-child{background-color:red}可以选中第一个元素 p:last-child{background-color:red}可以选中最后一个元素 p:nth-child（3）{background-color:red}可以选中任意位置的元素，3表示是第三个元素，even表示偶数位置的元素，odd表示是奇数位置的元素。 child是在所有的子元素中排列，而type是在当前类型的子元素中排列。 p:first-of-type{background-color:red;}表示第一个p元素背景设置为热点。 p:last-of-type{background-color:red;}表示最后一个p元素背景设置为热点。 p:nth-of-type（even）{background-color:red;}表示任意位置的p元素。 兄弟选择器– 查找后边一个兄弟元素• 兄弟元素 + 兄弟元素{} – 查找后边所有的兄弟元素• 兄弟元素 ~ 兄弟元素{} 否定伪类 作用：可以从已选中的元素中剔出某些元素 语法：p:not(.hello（选择器）){background-color：red；} 样式继承• 就像父亲的财产会遗传给儿子一样，在 CSS 中祖先元素的样式 同样也会被子元素继承。• 继承是指应用在一个标签上的那些 CSS 样式会同时被应用到其 内嵌标签上。• 比如为父元素设置了字体颜色，子也会应用上相同的。 比如为父元素设置了字体颜色，子也会应用上相同的。 比如为父元素设置了字体颜色，子也会应用上相同的。• 当然并不是所有的样式都会被继承，这一点我们讲到具体时，再去讨论。 权重（优先级）当使用不同的选择器，选中同一个元素时并且设置相同的样式时，这样样式之间产生冲突，最终到底采用哪个选择器定义的样式，由选择器的优先级（权重）决定，优先级高的优先运行 优先级的规则 内联样式：优先级1000 id选择器：优先级100 类和伪类：优先级10 元素选择器：优先级1 通配*：优先级0 继承的样式没有优先级 当选择器中包含多种选择器时，需要将多种选择器的优先级相加然后再比较，但是选择器优先级计算不会超过他的最大数量级，如果选择器的优先级一样，则使用靠后的样式。 并集选择器的优先级是单独计算，可以在样式的最后添加一个!important,则此时该样式将会获得一个最高的优先级，将会优先于所有的样式显示甚至超过内联样式，但是在开发中尽量避免使用!important 伪类的顺序l v h a 文本标签&lt;em&gt;和&lt;strong&gt;这两个标签都表示一个强调的内容，&lt;em&gt;主要表示语气上的强调，&lt;em&gt;在浏览器中默认使用斜体显示 &lt;strong&gt;表示强调的内容，比&lt;em&gt;更强烈，默认使用粗体显示 &lt;i&gt;标签中的内容会以斜体显示,&lt;b&gt;标签中的内容会以粗体显示 &lt;small&gt;&lt;/small&gt;表示比父元素小的字号。&lt;cite&gt;&lt;/cite&gt;标签可以指明对其内容的应用或参考。 &lt;q&gt;&lt;/q&gt;表示加引号，&lt;blockquote&gt;&lt;/blockquote&gt;表示 &lt;sub&gt;&lt;/sub&gt;和&lt;sup&gt;&lt;/sup&gt; &lt;ins&gt;&lt;/ins&gt; 表示插入的内容，显时通常会加上下 划线。&lt;del&gt;&lt;/del&gt;表示删 除的内容，显时通常会加上除线 &lt;pre&gt;&lt;/pre&gt;表示预格式，&lt;code&gt;&lt;/code&gt;表示代码，一般结合使用pre和code来表示一段代码 列表 无序列表 disc默认值，实心的圆点 square实心的方块 circle空心的园 有序列表 1 默认值 a i 定义列表 &lt;dl&gt; &lt;dt&gt;&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt; &lt;/dl&gt; &lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;都是块元素，列表可以嵌套 长度单位 像素px：是我们在网页中使用的最多一个单位，一个像素就相当于我们屏幕中的一个小店，我们的屏幕实际上就是由这些像素点构成的，但是这些像素点是不能直接看见的。不同显示器一个像素的大小也不相同，显示效果越好越清晰，像素越小，反之像素越大。 百分比%：也可以将单位设置成一个百分比的形式，这样浏览器将会根据其父元素的样式来计算该值。好处是当父元素发生变化时，子元素也会按照比例发生改变，我们创建一个自适应的页面时，经常使用百分比作为单位。 em：em和百分比相似，它是相对于当前元素的字体大小来计算的，1em = 1font-size。使用em时，当字体发生变化时，em也随之变化，当设置字体相关的样式时，经常会使用em。 颜色rgb(255,255,255) rgb(100%,100%100%) #ffffff 字体的样式设置字体的颜色，使用color来设置文字的颜色color:red; 设置字体的大小，浏览器中一般默认的文字大小都是16px，font-size设置的并不是文字本身的大小，在页面中每个文字都是处在一个看不见的框中，我们设置的font-size实际上是设置格的高度，并不是字体的大小，一般情况下文字都要比这个格要小一些，也有时会比格大。根据字体的不同，显示效果也不同。 通过font-family可以指定文字的字体，当采用某种字体时，如果浏览器支持则使用该字体，如果字体不支持，则使用默认字体，该样式可以同时指定多个字体，多个字体之间使用,分开，当采用多个字体时，浏览器会优先使用前边的字体，如果前边没有，再尝试下一个。 浏览器使用的字体默认是计算机中的字体，如果计算机中有，则使用，如果没有就不用。在开发中，如果字体太奇怪或用的太少了，尽量就不要使用。 颜色单位 颜色的单词 RGB(0~255,0~255,0~255) RGB(1~100%,1~100%,1~100%) 字体分类 erif（衬线字体） sans-serif（非衬线字体） monospace （等宽字体） cursive （草书字体） fantasy （虚幻字体） 可以将这些字体设置为这些大的分类，当设置为大的分类以后，浏览器会自动选择指定的字体并应用样式。一般将字体的大分类，指定为font-family中的最后一个字体。 font-style设置字体斜体 font-weight设置字体的粗细 font-variant用来设置小型大写字母，有normal和small-caps文本以小型大写字母显示。 在css中还为我们提供了一个样式叫font，使用该样式可以同时设置字体相关的所有样式，可以将字体的样式的值，统一写在font样式中，不同的值之间使用空格隔开 使用font设置字体样式时，斜体 加粗 小大字母没有顺序要求，甚至可写可不写，如果不写则使用默认值，但是要求文字的大小和字体必须写，而且字体必须是最后一个样式，大小必须是倒数第二个样式。 font可以一次性同时设置多个字体的样式。 语法：font:加粗 斜体 小型大写 大小/行高 字体这里前边几个加粗、斜体和小型大写的顺序无所谓，也可以不写，但是大小和字体必须写且必须写到后两个。 行间距在CSS并没有为我们提供一个直接设置行间距的方式，我们只能通过设置行高来间接设置行间距，行高越大行间距越大。使用line-height来设置行高，网页中的文字实际上也是写在一个看不见的线中，而文字默认会在行高中垂直居中显示。 行间距 = 行高 - 字体 通过设置line-height可以间接的设置行高，可接受的值：直接接受一个大小；或指定一个百分数，则会相对于字体去计算行高；可以直接传一个数值，则行高会设置字体大小的相应倍数。 对于单行文本来说，可以将行高设置为和父元素的高度一致，这样可以是单行文本在父元素中垂直居中。 font:加粗 斜体 小型大写 大小/行高 字体，行高是可选的，如果不指定则会使用默认值。 大写化text-transform样式用于将元素中的字母全都变成大小。 大写：text-transform:uppercase 小写：text-tansform:lowercase 首字母大写：text-transform:capitalize 正常：text-transform:none 文本的修饰 text-decoration属性，用来给文本添加各种修饰。通过它可以为文本的上方、下方或者中间添加线条。可选值： underline overline line-through none 字母间距和单词间距 letter-spacing用来设置字符之间的间距 word-spacing用来设置单词之间的间距 对齐文本text-align用于设置文本的对齐方式 可选值： left：左对齐 right：右对齐 justify：两边对齐 center：居中对齐 首行缩进text-indent用来设置首行缩进 该样式需要指定一个长度，并且只对第一行生效。 盒子模型CSS处理网页时，它认为每个元素都包含在一个不可见的盒子里。为什么要想象成盒子呢？因为如果把所有的元素都想象成盒子，那么我们对网页的布局就相当于是摆放盒子。 一个盒子会分成几个部分 内容区（content） 内边距（padding） 边框（border） 外边距（margin） 使用width来设置盒子内容区的宽度，使用height来设置盒子内容区的高度 边框设置 border-width 表示边框宽度 border-color 表示边框颜色 border-style 表示边框样式 边框可以设置多种样式：– none（没有边框）– dotted（点线）– dashed（虚线）– solid（实线）– double（双线）– groove（槽线）– ridge（脊线）– inset（凹边）– outset（凸边） 当属性值只有一个时，则代表上、下、左、右一样，两个时代表上下、左右，当只有三个时，则代表上、左右、下，有四个时代表上、右、下、左。 例如：border-width:20px 30px 40px 10px; 还可以使用border-xxx-width，xxx可以有top、right、bottom、left表示上、右、下、左各边的宽度。 三者缺一不可，但大部分浏览器中，边框的宽度和颜色都是有默认值，而边框的样式默认值都是none，所有无法显示，必须要设置border-style border:red solid 10px，三个属性值顺序不限，但border一指定就同时指定四个边，不能分别指定。但可以用border-xxx来表示某一边。 内边距指的就是元素内容区与边框以内的空间，默认情况下width和height不包含padding的大小。 内边距会影响盒子的可见框的大小，元素的背景会延伸到内边距，盒子的大小由内容区、内边距和边框共同决定 盒子可见框宽度 = border-left-width + padding-left + width +padding-right + border-right-width 外边距外边距指的是当前盒子与其它盒子之间的距离，不会影响可见框的大小，而会影响到盒子的位置。 盒子有四个方向的外边距 margin-top margin-right margin-bottom margin-left 由于页面中的元素都是靠左靠上摆放的，所以注意当我们设置上和左外边距时，会导致盒子自身的位置发生改变。如果是设置右和下外边距会改变其它盒子的位置。如果外边距设置的是负值，则元素会向反方向移动。 margin还可以设置为auto，auto一般只设置给水平方向的margin，如果指定，左外边距或右外边距的margin为auto则会将外边距设置为最大值，垂直方向外边距如果设置为auto，则外边距默认就是0。 如果将left和right同时设置为auto，则会居中。 垂直外边距的重叠在网页中相邻的垂直方向的外边距会发生外边距重叠，所谓外边距重叠是指兄弟元素之间相邻外边距会取最大值而不是取和。 可以在相邻两个元素之间输入一个数 或者设置一个外边距和内边距 浏览器默认样式浏览器为了在页面中没有样式时，也可以有一个比较好的效果，所以为很多的元素设置一些默认的margin和padding，而它的这些默认样式，正常情况下我们是不需要使用的。所以我们往往在编写样式之前需要将浏览器中的默认的margin和padding统统的去掉。 清楚浏览器默认样式： 1234*&#123; padding:0; margin:0;&#125; 内联元素的盒模型内联元素不能设置width和height，但可以设置水平方向的内边距，也可以设置垂直方向内边距，但是不会影响页面的布局。内联元素可以设置边框，但是垂直的边框不会影响到页面的布局，会影响水平方向的页面布局。 内联元素支持水平方向的外边距，水平方向的相邻外边距不会重叠，而是求和。内联元素不支持垂直方向外边距。 display将一个内联元素变成块元素，通过display样式可以修改元素类型 inline：可以将一个元素作为内联元素显示 block：可以将一个元素设置块元素显示 inline-block：将一个元素转换为行内块元素，可以使一个元素既有行内元素的特点又有块元素的特点，既可设置行高，又不会独占一行。 none：使用该方式隐藏元素，不会在页面中显示，并且不再占据页面的位置。 visibility可以用来设置元素的隐藏和显示状态。visible默认值，元素默认会在页面中显示。hidden元素会隐藏不显示，但它的位置会依然保持。 overflow子元素默认是存在于父元素的内容区中，理论上讲子元素的大小超过了父元素的最大可以等于父元素的内容区，则超过的大小会在父元素意外的位置显示，超过父元素的内容，我们称为溢出内容，在父元素外边显示，通过overflow可以设置父元素如何处理溢出内容 可选值： – scroll ：添加滚动条,不论内容是否溢出，都会添加水平和垂直方向的滚动条。– auto ：根据需要添加滚动条– hidden ：隐藏超出盒子的内容 – visible visible visible：默认值 文档流文档流处在网页的最底层，它表示的是一个页面中位置，我们创建的元素默认都处在文档流中。 元素在文档流中的特点 块元素在文档流中会独占一行，块元素会自上向下排列。块元素在文档流中默认宽度是父元素的100%。块元素在文档流中的高度默认被内容撑开。 内联元素在文档流中只有自身的大小，会默认从左向右排列，如果在一行中不足以容纳所有的内联元素，则会到下一行，继续自左向右。内联元素的宽度和高度默认都被内容撑开。 当元素的宽度的值为auto时，此时指定内边距不会影响可见框的大小，而是会自动修改宽度，以适应内边距。 浮动块元素在文档流中默认垂直排列，所以这个三个div自上至下依次排开，如果希望块元素在页面中水平排列，可以是使块元素脱离文档流。使用float来使元素浮动，从而脱离文档流。 可选值： – none：不浮动– left：向左浮动– right ：向右浮动 当为一个元素设置浮动以后（float属性是一个非none的值），元素会立即脱离文档流，元素脱离文档流以后，它下边的元素会立即向上移动看，元素移动后，会尽量向页面的左上或右上漂浮，直到遇到父元素的边框或者其他的浮动元素，如果浮动元素上边是一个没有浮动的元素，则浮动元素不会超过块元素。浮动的元素不会超过它上边的兄弟元素，最多最多一边齐。 浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以通过浮动来设置文字环绕图片的效果。 当元素设置浮动以后，会完全脱离文档流，块元素脱离文档流以后，高度和宽度都被内容撑开。内联元素脱离文档流以后会变成块元素。 简单布局 高度塌陷问题在文档流中，父元素的高度默认就是被子元素撑开的，也就是说子元素多高，父元素就多高。但是为子元素设置浮动以后，子元素会完全脱离文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。由于父元素高度塌陷，则父元素下的所有元素都会向上移动。这样将会导致页面布局混乱。所以在开发中一定要避免出现的高度塌陷的问题，我们可以将父元素的高度写死，以免塌陷的问题出现，但是一定高度写死，父元素的高度将不能自动适应子元素的高度，所以这种方案是不推荐使用的！ 解决高度塌陷问题 根据W3C的标准，在页面中元素都一个隐含的属性叫做Block Formatting Context，简称BFC，该属性可以设置打开或者关闭，默认是关闭的。当开启元素的BFC以后，元素将会具有如下的特性： 父元素的垂直外边距不会和子元素重叠 开启BFC的元素不会被浮动元素所覆盖 开启BFC的元素可以包含浮动的子元素 如何开启元素的BFC 设置元素浮动——使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失，而且使用这种方式也会导致下边的元素上移，不能解决问题。 设置元素绝对定位 设置元素为inline-block——可以解决问题，但是会导致宽度丢失，不推荐使用这种方式。 将元素的overflow设置为一个非visible的值 推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式。 但是在IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做haslayout，该属性的作用和BFC类似，所在IE6浏览器可以通过开haslayout来解决该问题。开启方式有很多，我们直接使用一种副作用最小的——直接将元素的zoom设置为1即可。 zoom表示放大的意思，后边跟着一个数值，写几就将元素放大几倍，zoom:1;表示不放大元素，但是通过该样式可以开启haslayout。zoom这个样式只在IE中支持，其他浏览器都不支持。 clear可以用来清除其他浮动元素对当前元素的影响，可选值： none：默认值，不清除浮动 left：清除左侧浮动元素对当前元素的影响 right：清除右侧浮动元素对当前元素的影响 both：清除两侧浮动元素对当前元素的影响，清除影响对它最大的那个元素的浮动。 清除浮动以后，元素会回到其他元素浮动之前的位置。 解决高度塌陷方案二 可以直接在高度塌陷的父元素的最后，添加一个空白的div，由于这个div并没有浮动，所以它是可以撑开父元素的高度的，然后进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，基本没有副作用。或者通过after伪类向元素的最后添加一个空白的块元素，然后对其清除浮动，这样做和添加一个div的原理一样，可以达到一个相同的效果，而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用。 1234567.clearfix:after&#123; content:&quot;&quot;; displayP:block; clear:both;&#125;......&lt;div class=&quot;box1 clearfix&quot;&gt; 导航条练习 开班信息练习 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; body&#123; font: 12px/1 宋体; &#125; .outer&#123; width: 300px; margin: 50px auto; &#125; .title&#123; border-top:2px #019e8b solid; height: 36px; background-color: #f5f5f5; line-height: 36px; padding: 0 22px 0 16px; &#125; .title a&#123; float: right; color: red; &#125; .title h3&#123; font: 16px/36px &quot;微软雅黑&quot;; &#125; .content&#123; border: 1px solid #deddd9; padding: 0 28px 0 20px; &#125; .content a&#123; color: black; text-decoration: none; font-size: 12px; &#125; .content a:hover&#123; color: yellowgreen; text-decoration: underline; &#125; .content h3&#123; margin-top:14px ; margin-bottom: 16px; &#125; .content .right&#123; float: right; &#125; ul&#123; list-style: none; border-bottom:1px dashed #deddd9; &#125; .content .border&#123; border: none; &#125; .content .red&#123; color: red; font-weight: bold; &#125; .content li&#123; margin-bottom: 15px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;16年面授开班计划&lt;/a&gt; &lt;h3&gt;近期开班&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;h3&gt;&lt;a href=&quot;&quot;&gt;JavaEE+云计算-全程就业班&lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span class=&quot;red&quot;&gt;预约报名&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span class=&quot;red&quot;&gt;2016-04-27&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span class=&quot;red&quot;&gt;无座，名额爆满&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span class=&quot;red&quot;&gt;2016-04-27&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-04-27&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-03-15&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-02-25&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;a href=&quot;&quot;&gt;Android+人工智能-全程就业班&lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span class=&quot;red&quot;&gt;预约报名&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span class=&quot;red&quot;&gt;2016-04-10&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-03-17&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-02-20&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2015-12-23&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;a href=&quot;&quot;&gt;前端+HTML5-全程就业班&lt;/a&gt;&lt;/h3&gt; &lt;ul class=&quot;no-border&quot;&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span class=&quot;red&quot;&gt;预约报名&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span class=&quot;red&quot;&gt;2016-05-10&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a class=&quot;right&quot; href=&quot;#&quot;&gt;&lt;span&gt;开班盛况&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;开班时间：&lt;span&gt;2016-03-16&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 相对定位与绝对定位定位：定位指的是将指定的元素放到页面的任意位置，通过定位可以任意的摆放元素。通过position属性来设置元素的定位 可选值： static：默认值，元素没有开启定位 relative：开启元素的相对定位 当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生了变化。相对定位是相对于元素在文档流中原来的位置进行定位。相对定位的元素不会脱离文档流。相对定位会使元素提升一个层级。相对定位不会改变元素的性质，块还是块，内联还是内联。 通常偏移量只需要使用两个就可以对一个元素进行定位。 absolute：开启元素的绝对定位 开启绝对定位，会使元素脱离文档流。开启绝对定位以后，如果不设置偏移量，则元素的位置不会发生变化。绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的（一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位），如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位。绝对定位会使元素提升一个层级。绝对定位会改变元素的性质，内联元素变成块元素，块元素的宽度和高度默认都被内容撑开。 fixed：开启元素的固定定位（也是绝对定位的一种） 固定定位是一种绝对定位，它的大部分特点和绝对定位一样。不同的是固定定位永远都会相对于浏览器窗口进行定位，固定定位会固定在浏览器窗口某个位置，不会随滚动条滚动。IE6不支持固定定位。 元素层级如果定位元素的层级是一样的，则下边的元素会盖住上边的，通过z-index属性可以用来设置元素的层级，可以为z-index指定一个正整数作为值，该值将会作为当前元素的层级。层级越高，越优先显示。对于没有开启定位的元素不能使用z-index。父元素的层级永远盖不住子元素的层级。 透明背景opacity可以用来设置元素背景的透明，它需要一个0~1之间的值，0表示全透明，1表示完全不透明，0.5表示半透明。opacity属性在IE8及以下的浏览器中不支持，IE8及以下的浏览器需要使用如下属性代替alpha(opacity=透明度)。透明度，需要一个0~100之间的值，0表示完全透明，100表示完全不透明，50为半透明。 背景background-color:red; 使用background-image:url(相对路径);来设置背景图片，如果 ​ 背景图片大于元素，默认会显示图片的左上角 ​ 背景图片和元素一样大，则会将背景图片全部显示 ​ 背景图小于元素大小，则会默认将背景图片平铺以充满元素 可以同时为一个元素指定背景颜色和背景图片，这样背景颜色将会作为背景图片的底色。 用background-repeat:repeat;来设置背景图片的重复方式，可选值： repeat：默认值，背景图片会双向重复（平铺） no-repeat：背景图片不会重复，有多大就显示多大 repeat-x：背景图片沿水平方向重复 repeat-y：背景图片沿垂直方向重复 用background-position：center center；来设置背景图片的位置（九宫格）用right、left、center、top、bottom。第一个值是左右，第二个值是上下。如果只给出一个值，则第二个值默认值是center。也可以直接指定两个偏移量，第一个值水平偏移量，第二个是垂直偏移量。如果是正值就向右或下偏移，如果是负值就向左或上偏移。 用background-attachment:fixed;来设置背景图片是否随页面一起滚动，可选值： scroll：默认值，背景图片随着窗口滚动 fixed：背景图片会固定在某一位置，不随页面滚动 不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素。 按钮练习产生闪烁的原因：背景图片是以外部资源加载进网页的，浏览器没加载一个外部资源就需要单独的发送一次请求，但是我们外部资源并不是同时加载，浏览器会在资源被使用采取才去加载资源。由于加载图片需要一定时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况。 解决方法：通过将三张图片整合到一张图片上，这样就可以同时将三张图片一起加载，就不会出现闪烁问题，再用background-position来切换要显示的图片的位置，这种技术叫做图片整合技术（css-sprite）。 整合技术优点： 将多个图片整合成一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高了用户体验。 将多个图片整合为一张图片，减小了图片的总大小，提高请求的速度，增加了用户体验。 背景简写方式 background: red url() center center no-repeat fixed; 没有顺序要求，也没有数量要求，不写就代表默认值。 表格通过border-spacing:0px属性来设置table与td边框之间距离。 通过border-collapse：collapse；来设置表格边框合并。 设置了边框合并，则border-spacing自动失效。 在一些情况下表格是非常长的，这时就需要将表格分为三个部分，表头，表格主体，表格底部。thead、tbody、tfoot来区分表格的不同部分，他们都是table的子标签，都需要直接写到table中，tr需要写到这些标签中，并且thead中内容永远会显示到表格头部，tbody中内容永远都会显示在表格的底部，tfoot中的内容永远都会显示在表格底部。 如果表格中没有写tbody，浏览器会自动在表格中添加tbody，并且将所有的tr都放到tbody中，所以注意tr并不是table的子元素，而是tbody的子元素，通过table &gt; tr 无法选中进行，需要通过tbody &gt; tr 来选择设置。 表格布局表格的列数由td最多的决定，表格可以嵌套，可以在td中放置一个表格。 已经被淘汰，不易维护。 clearfix子元素和父元素相邻的垂直外边距会发生重叠，子元素的外边距会传递给父元素。使用空的table标签可以隔离父元素的外边距，阻止外边距的重叠。 即可解决高度塌陷，又可确保父元素和子元素的垂直外边距不会重叠 表单使用 &lt;form&gt; &lt;/form&gt; 标签来创建一个表单表单中必须要有两个属性 action和method，action表示提交单到服务器中的地址 method 。 用户填写的消息会附在url地址的后边以查询字符串的形式发送给服务器url地址？查询字符串 格式：属性名=属性值 123456789101112131415161718192021用户名&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;admin&quot;&gt;密码&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;单选按钮：性别&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;man&quot; /&gt;男&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;woman&quot; /&gt;女多选框：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;zq&quot;&gt;足球&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;ymq&quot;&gt;羽毛球&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;ppq&quot;&gt;乒乓球下拉列表：&lt;select name=&quot;char&quot;&gt; &lt;optgroup label=&quot;前两个&quot;&gt; &lt;option value=&quot;A&quot;&gt;a&lt;/option&gt; &lt;option value=&quot;B&quot; selected=&quot;selected&quot;&gt;b&lt;/option&gt; &lt;/optgroup&gt; &lt;optgroup label=&quot;后两个&quot;&gt; &lt;option value=&quot;C&quot;&gt;c&lt;/option&gt; &lt;option value=&quot;D&quot;&gt;d&lt;/option&gt; &lt;/optgroup&gt;&lt;/select&gt;如果希望在单选框中或多选框中指定默认选项，则可以在希望选中的项中添加checked=&quot;checked&quot;属性。而在下拉列表option中添加selected=&quot;selected&quot;来设置默认选中项。在select添加一个multiple=&quot;multiple&quot;,则下拉列表变成一个多选的下拉列表。 在select中可以使用optgroup对选项进行分组，可以通过lable属性来指定分组的名字。 &lt;label for=&quot;id中的值&quot;&gt;文字&lt;/label&gt;用来设置点击文字就跳到该选项框中。 fieldset 、legend 、label• fieldset 用来为表单项进行分组。• legend 用于指定每组的名字。• label 标签用来为表单项定义描述文字。 框架集框架集和内联框架的作用类似，都是用于在一个页面中引入其他的外部的页面，框架集可以同时引入多个页面，而内联框架只能引入一个，在h5标准中，推荐使用框架集，而不使用内联框架 。使用frameset来创建一个框架集，注意frameset不能和body出现在同一个页面中，所以要使用框架集，页面中就不可以使用body标签。 属性： rows：指定框架集中的所有的框架，一行一行的排列 cols：指定框架集中所有的页面，一列一列的排列 这两个属性frameset必须选择一个，并且需要在属性中指定每一部分所占的大小。 franeset和iframe一样，它里边的内容都不会被搜索引擎所检索，所以如果使用框架集则意味着页面中不能有自己的内容，只能引入其他页面，而我们每单独加载一个页面，浏览器都需要重新发送一次请求，引入几个页面就需要发送几次请求 IE6中png修复在IE6中对图片格式png24，则会导致透明度效果无法正常显示 解决方法： 可以使用png8来代替png24，即可解决问题，但是使用png8来代替png24以后，图片的清晰度会有所下降。 使用Javascript来解决问题，需要向页面中引入一个外部的Javascript文件然后再写一个简单的JS代码，来处理该问题。 有一些情况，有一些特殊的代码我们只需要在某些特殊浏览器中执行，而其他的浏览器中不需要执行，这时就可以使用CSS Hack来解决该问题，CSS Hack实际上指的是一个特殊的代码，这段代码只在某些浏览器中可以识别，而其它浏览器不能识别，通过这种方式，来为一些浏览器设置特殊的代码。 1234条件HACK只对IE浏览器有效，其他浏览器都会将它识别为注释，IE10及以上的浏览器已经不支持这种方式。&lt;!--[if IE 6]&gt; .......&lt;![endif]--&gt; 属性级HACK12345678.body&#123; background-color:red; /*在样式前添加一个下划线，则该样式只有IE6及以下的浏览器才可以识别*/ _background-color:yellow; /*在样式前添加一个*的样式，只有在IE7及以下的浏览器才能识别*/ *background-color:blue; /**/&#125; CSS Hack一般情况下不使用。]]></content>
      <categories>
        <category>html+css</category>
      </categories>
      <tags>
        <tag>html+css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式复习]]></title>
    <url>%2F2019%2F04%2F26%2F%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[第一章嵌入式系统概念：以应用为中心，以计算机为基础，软件、硬件可裁剪，功能、可靠性、成本、体积、功耗严格要求的专用计算机系统（国内）；用于控制、监控或辅助操作机器和设备的装置（IEEE）； 嵌入式发展阶段：无操作系统阶段、简单操作系统阶段、实时操作系统阶段、面向Internet阶段； 嵌入式应用领域：工业控制、交通管理、信息家电、家庭智能管理、网络及电子商务、环境监测和机器人等方面。 嵌入式技术的发展趋势： 嵌入式应用软件的开发需要强大的开发工具和操作系统的支持； 联网成为必然趋势； 精简系统内核、算法，设备实现小尺寸、微功耗和低成本； 提供精巧的多媒体人机界面； 嵌入式系统的基本组成： 嵌入式系统的重要特征： 系统内核小 专用性强 系统精简和高实时性操作系统 高效率的设计 创新性和有效性 嵌入式软件开发走向标准化 嵌入式系统开发工具和环境 嵌入式系统的硬件组成： 嵌入式系统基本硬件架构主要包括有处理器、外围电路及接口和外部设备三大部分。其中外围电路一般有时钟、复位电路、程序存储器、数据存储器和电源模块等部件组成； 嵌入式处理器分类： ​ 嵌入式微控制器（MCU）：主要特点：单片化，体积大大减小，功耗和成本低、可靠性提高。 ​ 嵌入式DSP处理器（DSP）：专门用于信号处理方面的处理器，具有在系统结构和指令算法方面进行了特殊设计，执行DSP算法，编译效率较高，指令执行速度也很快。 ​ 嵌入式微处理器（MPU）：只保留和嵌入式应用紧密相关的功能硬件，去除冗余部分，体积小、重量轻、成本低、可靠性高的优点。 ​ 嵌入式片上系统（System On Chip）：成功实现了软/硬件无缝结合。可以直接在处理器片内嵌入操作系统的代码模块。可以用VHDL等硬件描述语言进行系统设计。只需要使用精确的编程语言，综合时序设计可直接在器件库中调用各种通用处理器标准。 嵌入式系统好处：就是屏蔽了底层硬件的差别，给上层应用提供统一的接口，并管理进程调度和资源（如CPU时间、内存）分配等。 主要有实时系统、分时系统（非实时系统）和顺序执行系统。 （1）实时操作系统：系统内有多个程序运行，每个程序有不同的优先级，只有最高优先级的任务才能占有CPU的控制权。VXworks、UC/OS （2）分时操作系统：系统内同时可以有多个程序运行，把CPU的时间分按顺序分成若干片，每个时间片内执行不同的程序，如UNIX，windows。 （3）顺序执行系统：系统内只含有一个程序，独占CPU的运行时间，按语句顺序执行该程序，直至执行完毕，另一程序才能启动运行。如DOS操作系统 实时性： 它的正确性不仅与系统的逻辑正确性相关，而且与系统的响应时间相关。 具有强(硬）实时特点的嵌入式操作系统 ​ 系统在指定的时间内未能实现某个确定的任务，会导致系统的全面失败，则被称为硬（强）实时系统。硬实时系统，其系统响应时间在毫秒或微秒级。一个硬实时系统通常在硬件上需要添加专门用于时间和优先级管理的控制芯片，uc/os和VxWorks是典型的实时操作系统。 具有弱（软）实时特点的嵌入式操作系统 ​ 在软实时系统中，虽然响应时间同样重要，但是超时却不会发生致命的错误。软实时系统则主要在软件方面通过编程实现现实的管理。比如Windows CE、uCLinux是一个多任务分时系统。一般软实时系统，其系统响应时间在毫秒或几秒的数量级上，其实时性的要求比强实时系统要差一些（电子菜谱的查询）。 第一章： 在日常生活中，你接触过哪些嵌入式产品？他们都有些什么功能? 答：数字电视、手持通信、智能玩具。 嵌入式硬实时操作系统与软实时操作系统的区别是什么？ 答：硬实时操作系统的系统在指定的时间内未能实现某个确定的任务，会导致系统的全面失败，一个硬实时系统通常在硬件上需要添加专门用于时间和优先级管理的控制芯片，响应时间在毫秒或微秒级上。在软实时系统中，虽然响应时间同样重要，但是超时却不会发生致命的错误。软实时系统则主要在软件方面通过编程实现现实的管理，系统响应时间在毫秒或几秒的数量级上 嵌入式处理器是如何分类的？ 答：嵌入式微控制器（MCU）、嵌入式DSP处理器（DSP）、嵌入式微处理器（MPU）、嵌入式片上系统（System On Chip）。 嵌入式操作系统的作用是什么？ 答：屏蔽了底层硬件的差别，给上层应用提供统一的接口，并管理进程调度和资源（如CPU**时间内存）分配等。** 交叉开发的概念。 答：在一台通用计算机上进行软件的编辑、编译，然后下载到嵌入式系统中运行调试。 主流的操作系统的特点 答：windows：用户多；Linux：开源，免费； 第二章嵌入式系统的硬件基本组成 嵌入式系统的硬件是以嵌入式微处理器为核心，主要由嵌入式微处理器、总线、存储器以及I/O接口和设备组成。 嵌入式微处理器的体系结构 目前使用冯．诺依曼结构的CPU和微控制器品种有很多，例如Intel公司的8086系列及其他CPU，ARM公司的ARM7、MIPS公司MIPS处理器等。 目前使用哈佛结构的CPU和微控制器品种有很多，除DSP处理器外，还有摩托罗拉公司的MC68系列、Zilog公司的Z8系、ATMEL公司的AVR系列和ARM公司的ARM9、ARM10和ARM11等。 总线 片内总线：与嵌入式微处理器集成在一起（如：AMBA、AVALON、OCP、ISHBONE等）。 片外总线：集成在嵌入式微处理器内或外接芯片扩展上，用于连接外部设备。 片内总线的选择取决于CPU core；片外总线的选择取决与应用； 存储器 片内存储器:存储容量小、速度快、价格较高 可以做主存的存储器有： ​ ROM类：Nor Flash、EPROM、E2PROM、PROM等； ​ RAM类：SRAM、DRAM、SDRAM等； 外存：容量大、成本低 在嵌入式系统中常用的外存有： ​ NandFlash ​ DOC（Disk On Chip） ​ CF（Compact Flash） ​ SD（Secure Digital） ​ MMC（Multi MediaCard）等 SRAM速度快、价格贵； DRAM速度较SRAM慢、价格便宜； NOR Flash具有随机存储速度快、电压低、功耗低、稳定性高等特点。 NandFlash具有容量大、回写速度快、芯片面积小等特点，主要用于外存。 输入/输出接口和设备 输入/输出接口主要有中断控制器、DMA、串行和并行接口等，设备主要有定时器（Timers）、计数器（counters）、看门狗（watchdog timers）、RTC、UARTs、PWM（Pulse width modulator）、AD/DA、显示器、键盘和网络等。 嵌入式处理器分类 按用途来分,嵌入式微处理器可以分为嵌入式DSP和通用的嵌入式微处理器两种； 在最普通的情况下，嵌入式微处理器包括： 片内存储器：部分嵌入式微处理器 外部存储器的控制器，外设接口(串口，并口) LCD控制器：面向终端类应用的嵌入式微处理器 中断控制器，DMA控制器，协处理器 定时器，A/D、D/A转换器 多媒体加速器：当高级图形功能需要时 总线 其他标准接口或外设 流水线 通常采用单周期执行指令，可能导致比较长的流水线 流水线的概念：流水线，亦称管线，是现代计算机处理器中必不可少的部分，是指将计算机指令处理过程拆分为多个步骤，并通过多个硬件处理单元并执行来加快指令执行速度。 嵌入式微处理器的功耗管理 降低工作电压 提供不同的时钟频率 关闭暂时不使用的功能块 提供功耗管理机制 运行模式（Running Mode）：处理器处于全速运行状态下。 待命模式（Standby Mode）：处理器不执行指令，所有存储的信息是可用的，处理器能在几个周期内返回运行模式。 时钟关闭模式（clock-off mode）：时钟完全停止，要退出这个模式系统需要重新启动。 影响功耗的其他因素还有总线和存储器的类型大小 ARM(Advanced RISC Machine)是专门从事基于RISC技术芯片设计开发的公司，主要出售芯片设计技术的授权，作为知识产权供应商，本身不直接从事芯片生产，靠转让设计许可由合作公司生产各具特色的芯片，半导体生产商从ARM公司购买其设计的ARM微处理器核，根据各自不同的应用领域，加入适当的外围电路，从而形成自己的ARM微处理器芯片进入市场。 ARM内核是一种32位RISC微处理器，具有功耗低、性价比高、代码密度高等三大特色。 什么是Thumb指令？ ​ Thumb指令集可以看作是ARM指令压缩形式的子集，它是为减小代码量而提出，具有16bit的代码密度。 什么是Thumb-2指令？ ​ Thumb-2是16位Thumb指令集的一个超集，在Thumb-2中，16位指令首次与32位指令并存，结果在Thumb状态下可以做的事情丰富了许多。 ‘T’是Thumb指令或者Thumb-2指令； ‘E’提供DSP能力 ‘J’增加了Jazelle扩展以支持Java加速技术 数据类型 字节型类型（Byte）：数据宽度为8bits 半字数据类型（HalfWord）：数据宽度为16bits，存取式必须是以2字节对齐方式 字数据类型（Word）：数据宽度为32bits，存取时必须以4字节对齐的方式 char：1 short：2 int：4 long：4 float：4 double：8 什么叫字节对齐？ 如果一个数据是以能被4或者2整除的地址开始的连续存储，那么它就是字节对齐，否则就是非字节对齐。 为什么必须字节对齐？ 原因：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。如有些只能访问偶地址，有些只能访问4的倍数地址。字节对齐存储可提高CPU效率 7种CPU模式 处理器工作状态： ARM:32位，执行字对准的ARM指令（从能被4整除的存储器地址一次取4字节arm指令） Thumb:16位，执行半字对准的Thumb指令（从能被2整除的存储器地址一次取2字节Thumb指令） ARM和Thumb之间状态的切换不影响处理器的模式或寄存器的内容 处理器为什么要有两种状态？ 在保证处理器性能的同时，更少的占用内存，更低的功耗 ARM处理器有37个寄存器 31个通用寄存器：程序计数器、堆栈及其他通用寄存器；6个状态寄存器 R8-R12各有两组物理寄存器：一组为FIQ模式，另一组是除FIQ以外的其他模式。 R13-R14各有6个分组的物理寄存器，一个用于用户模式和系统模式，其他5个分别用于5种异常模式。访问时需要指定它们的模式，如：R13_＜mode＞，R14_＜mode＞；其中：＜mode＞可以从usr、svc、abt、und、irq和fiq六种模式中选取一个 程序状态寄存器 异常 是由内部或者外部原因引起的，当异常发生时CPU将暂停执行当前指令自动到指定的向量地址读取指令并且执行。 内存和I/O ARM的寻址空间是线性的地址空间，2^32=4G ARM支持大端和小端的内存数据方式 总线宽度、频率与总线带宽之间的关系 答：总线带宽=（总线宽度/8）总线频率 第三章 驱动层BSP BSP的概念：BSP是板级支持包，是介于主板硬件和操作系统之间的一层，属于操作系统的一部分，主要目的是为了支持操作系统，使之能够更好的运行与硬件主板。 BSP对于不同的操作系统有不同的形式 操作系统层OS 操作系统功能简单来说就是隐藏硬件细节，而只提供给应用程序开发人员一个个抽象的接口。 操作系统层包括嵌入式内核、嵌入式TCP/IP网络系统、嵌入式文件系统、嵌入式GUI系统和电源管理等部分。其中嵌入式内核是基础和必备的部分，其他部分要根据嵌入式系统的需要来确定。 操作系统负责确定可在CPU上执行的程序及其执行时间的长短，此功能称为进程调度，调度的方法由操作系统所定的优先策略决定。 中间层 中间层为上层软件提供了设备操作接口。 应用层 应用层软件主要由多个相对独立的应用任务组成。每个应用任务完成特定的工作。 嵌入式软件运行流程： 上电复位、板级初始化阶段 嵌入式系统完成上电复位后完成板级初始化工作。板级初始化程序具有完全的硬件特性，一般采用汇编语言实现。不同的嵌入式系统，板级初始化时要完成的工作具有一定的特殊性，但以下工作一般是必须完成的： CPU中堆栈指针寄存器的初始化。 CPU芯片级的初始化：中断控制器、内存等的初始化。 系统引导/升级阶段 根据需要分别进入系统软件引导阶段或系统升级阶段。通过测试通信端口数据或判断特定开关的方式分别进入不同阶段。 远程升级：TFTP、FTP、HTTP 串口本地升级：超级终端、特定升级软件 系统初始化阶段 系统初始化需要按特定顺序进行 应用初始化阶段 进行应用任务的创建，信号量、消息队列的创建和应用相关的其它初始化工作。 多任务应用运行阶段 系统进入多任务状态，操作系统按照已确定的算法进行任务调度，各应用任务分别完成特定功能。 操作系统可以简单的分为通用操作系统和实时操作系统（RTOS） 实时操作系统就是”在给定时间内提供某种程度的服务，如果在规定的时间内没有得到结果，那整个的系统就是失败”。 实时操作系统特点： 多任务 任务的事件驱动 中断与中断优先级 异常中断的优先级 微处理器的异常中断响应过程 从异常中断处理程序中返回 同步与异步 资源与临界资源 容错与安全 操作系统体系结构： 体系结构是操作系统的基础，它定义了硬件与软件的界限、内核与操作系统其它组件的组织关系、系统与应用的接口。 目前操作系统的体系结构可分为：单块结构（Linux）、层次结构和客户/服务器（微内核）结构。 目前嵌入式操作系统主要采用分层和模块化相结合的结构或微内核结构。 分层和模块化相结合的结构将操作系统分为硬件无关层、硬件抽象层和硬件相关层，每层在划分功能模块。移植工作便集中在硬件相关层。微内核结构便于扩展。 嵌入式操作系统的功能 负责嵌入式系统的全部软、硬件资源的分配、调度，将CPU时钟、I/O、中断等资源封装起来给用户提供一个标准的API接口，供用户调用。由应用程序接口、设备驱动程序接口、设备驱动、操作系统内核等组成。 嵌入式内核 任务管理 内存管理 通信、同步和互斥机制 中断管理 时间管理任务扩展功能 实时系统的评价指标 在实时系统中主要有三个指标来衡量系统的实时性，即响应时间（Response Time）、生存时间（Survival Time）、吞吐量（Throughput）。 响应时间：是计算机识别一个外部时间到作出响应的时间，在控制应用中它是最重要的指标，如果实践部能即时处理，系统可能就会崩溃。 任务调度，这是操作系统内核的主要职责之一，它决定该轮到哪个任务运行了,调度是基于任务的优先级。 生存时间：是数据有效等待时间，在这段时间里数据是有效的。 吞吐量：是在一给定时间内，系统可以处理的事件总数。 非占先式内核的优缺点： 优点：正在运行着的任务占有CPU，而不必单行被别的任务抢占。 缺点：其响应高优先级的任务慢。 常见的嵌入式操作系统特点： 1.uC/OS-II:公开源代码、代码结构清晰、注释详尽、组织有调理、可移植性好、可裁剪、可固化、抢占式内核、最多可管理60个任务。可用于8位，16/32位单片机或DSP。 2.Linux:具有可移植性、一定的稳定性、各种性能的升级能力，开发更容易。开放源代码，不存在黑箱技术。内核小、功能强大、运行稳定、效率高。开放源代码的操作系统易于定制裁剪，在价格上极具竞争力。不支持X86CPU，还可支持其他数十种CPU芯片。有大量的且不断增加的开发工具和开发环境。其内核的结构在网络方面是非常完整的，提供了对多种互联网方式的全面支持。 3.Windows CE:其核心全是由C语言开发，内核提供内存管理、抢先多任务和中断处理功能。具有高度模块化，可在内核基础上添加各种模块，适合作为可裁剪的32位嵌入式操作系统，既适用于工业设备的嵌入式控制模块，也适用于消费类电子产品。其核允许每个进程有256个优先级，采用抢占式优先权调度法。它嚄没有DOS模式，不能运行现有的应用程序，有严格的内存限制，有精简的运行库和API，硬件并不十分标准化。 4.VxWorks:具有可靠性、实时性和可裁剪性。支持多种处理器，如:x86、i960、Sun Sparc、MIPS、PowerPC等。 第四章嵌入式系统大致可以分为四个层次： 硬件层 特点： 处理器体系结构不统一 硬件资源通常受限 外部设备的种类繁多 有实时性和可靠性要求 OEM层 Bootloader的功能：初始化硬件,加载操作系统映像（0S Image ）到内存，然后跳转到操作系统代码去执行。 BSP是介于主板硬件和操作系统之间的一层也可以说是属于操作系统的一部分，主要目的是为了支持操作系统使之能够正常地运行于硬件主板上。 bootLoader获得操作系统的方式： ​ 方式一:串口、USB(U-BOOT)、以太网下载(E-BOOT)； ​ 方式二：从本地的存储设备例如CF卡和硬盘中读取操作系统映像。 操作系统层 Windows CE 是一个微内核操作系统。操作系统的基本功能被放在多个独立的进程（EXE）里面实现。在运行的时候，这些进程大致有如下几个： 内核NK. EXE ; 图形系统GWES. EXE ; 对象存储FILESYS .EXE ; 设备管理系统DEVICE .EXE ; 服务SERVICES. EXE 应用程序层 应用程序层位于Windows CE层次结构的最顶层。从系统的角度看，每个应用程序都是Windows CE 中的单独的程。 在Windows CE中，应用程序与操作系统交互的接口同样是Win32 API 。 进程与线程： 进程：进程即是程序的一次动态执行实例。 线程：线程是Windows CE中最小的可执行单元。 进程与程序的区别： 进程是动态概念，而程序是静态的概念。 进程有创建、执行及结束完整的生命周期，而程序只是一个文件。 一个进程可以对应多个进程，而一个进程只能对应一个程序。 进程本身不参加系统的调度，也没有有优先级和上下文。真正参加系统调度的是线程，系统只识别和调度线程，每个进程在创建的时候都会创建一个主线程作为该进程默认的执行体。进程只是线程的容器。一个进程可拥有的线程数理论上是没有限制的，只与当前可用的内存有关。系统中同时最多只能有32个进程。 wince线程的状态 Windows CE开发流程： 硬件设计 自己设计硬件：开发难度大、周期长，需要开发人员有很好的硬件基础。 从OEM厂商购买：难度最小，周期最短，需要一定的经费，有较好的售后支持。 定制操作系统 应用程序开发 安装包（像桌面Windows一样） 作为操作系统的一个组件，打包进入操作系统的运行时映像中。 WinCE开发环境过程 安装.NET Framework 安装Platform Builder开发工具和升级包 安装开发板支持包根据具体的实验箱而定 建立并编译WinCE系统平台 定制软件开发工具包（SDK） 建立eMbedded Visual C++ 4.0开发环境（EVC文件夹） 安装同步软件 Windows CE开发中涉及到的工具 Platform Buider 功能： 可对Windows CE操作系统进行定制、构建、下载、调试及发布； 可开发简单的基于Windows CE的应用程序； Visual Studio 功能： 可编写Windows应用程序、Web应用程序和移动设备应用程序。 eMbedded Visual C++ 功能： 可用C/C++语言来为Windows CE开发应用程序 如果使用EVC4为Windows CE5.0开发应用程序，那么就必须安装EVCSP4 SDK SDK概念：软件开发工具包是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等创建应用软件的开发工具的集合。 功能 为某种特定的Windows CE平台开发应用程序，必须安装特定的SDK。 ACtiveSync 简介：ActiveSync用来连接Windows CE设备和安装桌面Windows的PC机的工具。 主要功能： PC机可借助ActiveSync的通信功能查看Windows CE上的文件系统，以及安装软件。 对于开发人员，还可使用ActiveSync下载编写的应用程序和进行代码调试。 依赖关系：对各种软件的安装必须按一定顺序；否则可能导致软件或则软件的部分功能不能使用。 第五章• Wince的平台初始化文件 common． 文件、 platform． 文件、project．*文件的作用域；读懂.dat文件的代码，读懂.bib中 memory、modules、files的代码。 答：common．*文件的作用域是所有的OSDesign，对common．x文件的修改会影响到所有的OSDesign platform． 文件的作用范围是使用该BSP的OSDesign，因此一般把与硬件相关的配置信息放到platform．文件中； project． 文件的作用范围仅仅是当前OS Design，一般在poject．文件中只存放与本项目相关的一些配置信息。 ;;创建根目录下子目录Program Files root: -Directory (“Program Files”) ;;创建目录Program Files下一个子目录My Projects Directory (“\Program Files”): -Directory (“My Projects”) ;;复制文件从\Windows\Myproj.exe到\Program Files\My Projects\My Project.exe Directory (“\Program Files\My Projects”): -File (“My Project.exe”, “\Windows\My proj.exe”) ;;复制文件从\Windows\control.lnk到\control.lnk root: -File (“\control.lnk”, “\Windows\control.lnk”) MEMORY ; Name Start Size Type modules、files 模块名称 路径 内存块 类型 ; @CESYSGEN IF CE_MODULES_DEVICE device.exe $(_FLATRELEASEDIR) \device.exe NK SHM • SDK的概念及作用 答：SDK是一系列头文件、库文件、文档、平台管理器和运行时库的总称。应用开发人员可使用SDK为某个特定平台开发应用程序。 第六章Windows CE应用程序开发工具： 1.Platform Builder 应用程序将被链接到OS内核中 一旦修改代码，必须再重新编译镜像 容易调试OS内核,不容易调试应用程序 2.Embedded Visual C++ 易于调试和测试 必须安装相应的为特定平台开发的SDK，从而开发相应的应用程序 3.VIsual Studio 目标平台上需要安装 .NET compact framework 易于调试和测试 必须安装相应的为特定平台开发的SDK，从而开发相应的应用程序 4.Embedded Visual Tools 3.0 应用程序开发流程： 1.安装合适的SDk 2.编写代码和调试 3.发布应用程序 两种途径获得SDK： 1.开发人员可以从微软或者第三方处获得SDK； 2.开发人员可以通过Platform Builder导出自己的SDK； 应用程序发布涉及到代码签名和代码打包 Windows CE应用程序开发，代码的选择： 1.托管代码：是指使用.NET compact framework开发的程序代码，执行时需要有.NET的运行时环境。 2.本地代码：是指用C++等高级语言开发的程序代码，可执行文件被编译成与CPU指令集有关的机器码，可以直接运行。 托管代码主要的优缺点 优点：与硬件平台无关；与编程语言无关； 缺点：执行效率低； 托管代码优缺点与本地代码优缺点互补 Windows CE的应用编程接口（API） Win32 API（应用程序接口） 包括源代码文件（.c/.cpp/.H等）和资源文件（.BMP/.ICO/.CUR/.FON） 源代码文件经过C/C++编译器编译后形成目标文件；资源文件经过资源编译器编译后形成.RES二进制资源。然后，链接器负责把目标文件、二进制资源及库文件等统一链接，最终形成可执行文件。 MFC与ATL Microsoft .NET Framework精简版 各种编程接口的比较 资源大小： 开发效率和执行时间：]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用VMware Workstation15安装Ubuntu19.04]]></title>
    <url>%2F2019%2F04%2F25%2F%E7%94%A8VMware-Workstation15%E5%AE%89%E8%A3%85Ubuntu19-04%2F</url>
    <content type="text"><![CDATA[Ubuntu（友帮拓、优般图、乌班图）是一个以桌面应用为主的开源GNU/Linux操作系统，Ubuntu 是基于DebianGNU/Linux，支持x86、amd64（即x64）和ppc架构，由全球化的专业开发团队（Canonical Ltd）打造的。 1.下载Ubuntuubuntu下载地址：官网 18是LTS版是长期支持（Long Term Support）的缩写。直到2023年四月，免费安全和维护更新。19只提供九个月到2020年1月，根据自己需求选择，我这里选择19。 2.安装我相信大家都应该安装好了自己的Vmware Workstation15，如果没有安装好，可以参考一下我的另一篇博客：VMware Workstation pro 15破解版安装 1.双击运行VMware Workstation Pro 2.创建新的虚拟机可以选择典型和自定义，我喜欢个性化，所以就选择了自定义。 下一步 选择安装程序光盘映像文件(iso)(M):，点击浏览选择刚刚下载的Ubuntu镜像 进行简单的配置用户名和密码 设置虚拟机名称和安装的位置 根据自己电脑的CPU来设置处理器数量和内核数量 设置内存 默认选择，下一步 创建新虚拟磁盘 分配磁盘空间大小和选择将虚拟磁盘存储为单个文件 默认，下一步 完成 3.开始安装ubuntu 点击开启此虚拟机 我们可以先看看，点击Try Ubuntu 然后关闭重新启动进行安装 选择语言后进行安装 直接点击继续 简单的配置自己的用户名以及密码 这个安装时间有点长 安装完成后重启 3.使用 打开终端输入sudo apt-get update sudo apt-get upgrade]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装中文搜狗输入法]]></title>
    <url>%2F2019%2F04%2F21%2Fkali%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%2F</url>
    <content type="text"><![CDATA[我们在使用大多数linux系统时，有些不提供中文输入法，这就导致我们在使用时存在一些困难，毕竟刚接触linux系统，还是图形界面，对我们这些初学Linux的人来说有许多？那么我们要坚持一个不懂就学懂好习惯，去网上查找答案，因为英语不是很好（英语大神请绕道），所以就需要中文输入法； kali安装搜狗输入法1.修改软件源leafpad /etc/apt/sources.list ) 或 vim /etc/apt/sources.list键盘输入e 进入下面界面 输入i键后，进行编辑，即下方显示“– 插入 –” 编辑完成后，按ESC键退出，然后再按”:wq”保存并退出。 123456789101112#kali官方源deb http://http.kali.org/kali kali-rolling main non-free contrib#中科大的源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free#阿里云源deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-freedeb-src http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-free 从中任意选两个就ok了！ 2.安装fcitxsudo apt-get install fcitx 3.下载并安装搜狗输入法搜狗输入法下载地址 根据自己的系统位数来下载搜狗输入法 切换到下载目录，先直接安装 dpkg -i sogoupinyin_2.2.0.0108_amd64.deb 注意：出现错误时，输入apt-get -f install 安装成功后，桌面上会出现Fcitx和Fcitx配置两个企鹅图标 点开Fcitx配置，看输入法中是否会出现搜狗拼音，有就成功了，没有就手动导入一下 4.最后使用搜狗输入法重启电脑后，ctrl+空格键变换输入法 测试结果，有多种皮肤供选择，选择自己觉得最好看的一个作为皮肤]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git和Node.js重新安装]]></title>
    <url>%2F2019%2F04%2F18%2FGit%E5%92%8CNode-js%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[由于最近误删了一个东西，导致Windows10系统崩溃，好像是把系统引导给搞坏了，看了网上一大堆的方法来拯救，最终还是嫌麻烦，就直接重装系统，那么问题就来了，导致我的Git和Node.js也出现了一些问题，不能直接导出，就很麻烦，然后又去下载这两个东西和安装以及配置。 1.Git安装教程下载地址：Git下载地址 开始安装 第一步：点击next 第二步：根据自己想安装软件的位置来选者路径(我这里选择的是D:\app\blog_software) 第三步：安装配置文件，更具自己需要选择 第四步：不创建启动文件夹（勾选Don’t create a Star Menu folder） 第五步：选择默认编辑器 第六步：点击Next 第七步：使用默认设置就行 第八步：默认 第九步：在终端模拟器选择页面，默认即可，配置后Git 第十步：最后配置Git额外选择默认安装 第十一步：安装完成 检验 ： 2.Node.js安装下载地址：Node.js官网下载地址 第一步：下载完成后，开始安装 第二步：接受协议 第三步：根据自己要安装的地方选择安装目录(我这里选择D:\app\blog_software\Node.js路径下) 第四步：选择安装项，一般默认 第五步：点击“Install”按钮，开始安装 第六步：过程 完成安装 检验： 1.node -v 查看 node 版本 ​ 2.npm -v 查看 npm 版本 3.环境配置说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\app\blog_software\Node.js】下创建两个文件夹【node_global】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入 12npm config set prefix &quot;D:\app\blog_software\Node.js\node_global&quot;npm config set prefix &quot;D:\app\blog_software\Node.js\node_cache&quot; 接下来设置环境变量，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” 在用户变量里选择Path，点击新建，在弹出的框中点击新建，然后在其中添加node_modules文件夹的位置。 完成所有的操作，可以在任意地方测试]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebStorm的安装与破解]]></title>
    <url>%2F2019%2F04%2F09%2FWebStorm%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.WebStorm介绍在学习了html+css基础后，想做一些简单的html实战项目，以前在学习html为了方便记忆且容易上手用了Notepad++，现在进行项目实战，难免不了要大量代码以及更多的功能来操作与编写，所以就去下载了WebStorm这种重量级软件来进行学习与开发。 html提示 联想查询 代码重构 代码检查和快速修复 代码调试 代码结构浏览 代码折叠 包裹或者去掉外围代码 对于WebStorm的叙述就到这儿了，“工欲善其事必先利其器”，下面来看看如何安装与破解WebStorm。 2. WebStorm的下载去官网下载 WebStorm官网 点击DOWNLOAD进行下载 下载完成后双击打开进行安装 点击Next 选择自己的安装路径 根据自己电脑的位数选择，和添加到环境变量，.js .css .html勾选后之后js css html文件默认会用webstorm打开,然后点击Next。 点击Install 完成安装，选择I want to manually reboot later，然后点击Finsh。 3. 破解双击打开程序,选择Do not import settings,点击ok 点击Skip 方法一： 注册时，在打开的License Activation窗口中选择“License server”，在输入框输入下面的网址： http://idea.imsxm.com/或http://idea.yangyusb.com 点击：Activate即可。 方法二： 选择Activation code,在其中填入注册码 12RRJMBXW33-eyJsaWNlbnNlSWQiOiIyUlJKTUJYVzMzIiwibGljZW5zZWVOYW1lIjoi5b285bK4IHNvZnR3YXJlMiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAxOS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxOS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxOS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE5LTA3LTA3In1dLCJoYXNoIjoiOTUyNzQwMS8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-WBR8xuiXaXLeV0obFYbBfUUQ02r54Vj3fE9ImtuXKSP+NuvvnR6lH6gWcVm9PZt67eqdDZa+Deej1NsoGRPDZS5UB6WEt4YVahlOhmG3rgvXPlP98hsfgFUcjr3OQVY7wk5slJ+Q2G9lkpsqwezO+SFIk9yA6pjxyT+U7FjpU8SY5ilsHskq4FG8FoKPYLsfsuwtXrJimRBxVcDClw/QsnCSwgtjuunc8Te37rHb08ZAxtJJieIsjhWnnzrQ3LmxmsR4xstkZOSqD4bYgeNz+m2nbmCWJ5lfP+pnqWfSsUCVri2TUxTpzzTMe4Cx8UhGeJgIgUyBXjq05/0nq3YoVg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 或者打开网址（IntelliJ IDEA 注册码）跳转到,点击获得注册码 将注册码复制到 如果没成功，请换一个旧一点的版本，旧的注册码对新版本不管用。 用破解补丁来破解： 下载破解补丁破解补丁无需使用注册码，下载地址或者去（IntelliJ IDEA 注册码）下载 将下载的文件移动到WebStorm安装目录的bin目录下 修改安装目录下的 WebStorm.exe.vmoptions 和WebStorm64.exe.vmoptions，这两个文件一个是32位的，一个是64位的，建议同步修改。用文本编辑器打开之后，在文件最上面加一行代码 ： 1-javaagent:安装目录/破解补丁名字.jar 配置好之后，保存文件。在此再次启动WebStorm，选择Activation code，在其中输入-javaagent:安装目录/破解补丁名字.jar,点击ok完成。 成果：一个八卦图]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>html+css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS部分]]></title>
    <url>%2F2019%2F04%2F05%2FCSS%E9%83%A8%E5%88%86%2F</url>
    <content type="text"><![CDATA[1.HTML&lt;!DOCTYPE&gt;声明标签&lt;!doctype&gt;声明必须是HTML文档是的第一行，位于标签之前。&lt;!doctype&gt;声明不是HTML标签；它是指示web浏览器关于页面使用的哪个HTML版本进行编写的指令。 HTML5为&lt;!doctype html&gt;,&lt;meta charset=&quot;utf-8&quot;&gt; 在html4.01中单标记必须闭合，单属性必须必须添加属性值，标记和属性必须使用小写，属性的属性值必须使用””。 2.使用CSS样式的方式a.内链样式表： 12&lt;!--内链样式表--&gt; &lt;body style=&quot;background-color:green; margin:0; padding:0;&quot; &gt; b.嵌入式样式表： 需要放在&lt;head&gt;&lt;/head&gt;中 123456&lt;!--嵌入式样式表--&gt; &lt;style type=&quot;text/css&quot;&gt; p&#123; background-color:yellow; color:black; &#125; p是&lt;p&gt;&lt;/p&gt;标记，如果是&lt;h1&gt;&lt;/h1&gt;标记就为： 123456&lt;!--嵌入式样式表--&gt; &lt;style type=&quot;text/css&quot;&gt; h1&#123; background-color:yellow; color:black; &#125; c.引入式样式表： 12&lt;!--引入式样式表--&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; herf=&quot;style.css&quot;&gt; style.css为新建的css文件，表示要设置属性内容： 1234body&#123; background-color:green; color:yellow; &#125; 3.定义样式表&lt;h1&gt;&lt;h1&gt;,h1{属性:属性值; 属性:属性值:},h1为选择器，定义那个标记中的内容执行其中的样式，一个选择器可以控制若干个样式属性，属性之间用英语“;”隔开。 a.Class定义： &lt;p class=&quot;p&quot;&gt;&lt;/p&gt;,class定义是以“.”开始 p{属性1:属性值; 属性2:属性值;} 12345 .p&#123;color:green;font-size:10px&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;p&quot;&gt;小土豆很强&lt;/p&gt; b.id定义： &lt;p id=&quot;pp&quot;&gt;&lt;/p&gt;,id定义是#开始的。#pp{属性1:属性值1; 属性2:属性值2;},id只能出现一次。 12345#PP&#123;background-color:green; color:blue; font-size:20px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;pp&quot;&gt;...&lt;/p&gt; 优先级为id&gt;class&gt;html，如 123p&#123;......&#125;.p&#123;......&#125;#pp&#123;......&#125; 不管顺序如何，结果都为#pp{……}中的内容设置。 同级时选择离元属最近一个的，如 12#pp&#123;color:red&#125;#pp&#123;color:white&#125; 则执行颜色为白色的。 组合选择器（同时控制多个元素） h1,h2,h3{font-size:20px; color:red;},选择器组合可以使用“.”隔开 超链接： 1234a:link&#123;color:red&#125;; 正常连接的样式a:hover&#123;color:yellow&#125;; 鼠标放上去的样式a:active&#123;color:blue&#125;; 选择链接时的样式a:visited&#123;color:yellow&#125;; 已经访问过的链接的样式 上面的内容纯属不要年放上去的啊！装了一波，哈哈哈！ 4.CSS常见属性 颜色属性： color属性定义文本的颜色，可以有以下格式： a. color:green b. color:#ff6600或color:f60 ff(red)66(green)00(blue) c. RGB——- color:rgb(0~255,0~255,0~255) d. RGBA——color:rgba(0~255,0~255,0~255,1) #其中A代表Alpha的（色彩空间）透明 字体属性 font-size字体大小，格式为：font-size:内容;内容有px:设置一个固定的值。%:父元素的百分比。smaller:比父元素更小。larger:比父元素更大。inherit:继承父元素的。 font-family字体类型，格式为：font-family:微软雅黑, serif;可以用&quot;,&quot;隔开，以确保当字体不存在的时候直接使用下一个。 font-weight字体加粗，格式为：font-weight:内容，内容有normal（默认值）、bold（粗）、bolder（更粗）、lighter（更细），也可以用100~900之间的整百数来表示，其中400=normal，700=bold。 font-style字体样式，font-style:内容，内容有normal（正常）、italic（斜体）、oblique（倾斜）、inherit（继承）。 font-variant小型大写字母显示文本，格式为：font-variant:内容，内容有normal（标准）、small-caps（小型大写字母显示文本）、inherit（继承）。 背景属性 背景颜色：background-color 背景图片：background-image background-image:url(图片路径) background-image:none 背景重复：background-repeat background-repeat:repeat 重复平铺满 background-repeat:repeat-x 向x轴重复 background-repeat:repeat-y 向y轴重复 background-repeat:no-repeat 不重复 背景位置：background-position:(x)(y) 横向（left,center,right） 纵向（top,center,bottom） 也可以为像素px。简写方式background:背景颜色 url(图像) 重复 位置 background:#f60 url(图片路径) no-repeat top center 文本属性 横向排列text-align:left,left、center、right 文本行高line-height:,%基于字体大小的百分比行高，数值来设置固定的值。 首行缩进text-indent:,%父元素的百分比，px固定值，默认为0，inherit继承。 字符间距letter-spacing:,normal默认，length设置具体的数值（可以设置为负值），inherit继承。 单词间距word-spacing:,normal标准间距，px固定值，inherit继承。 文本方向direction:,ltr从左到右，rtl从右到左，inherit继承。 文本大小写text-transform:,none默认，capitalize每个单词以大写字母开头，uppercase定义仅有大写字母，lowercase定义无大写字母，仅有小写字母，inherit规定应该从父元素继承text-transform属性的值。 边框属性 边框风格border-style:,统一风格border-style:，none无边框，solid直线边框，dashed虚线边框，dotted点状边框，double双线边框，groove凸槽边框，ridge垄状边框，inset inset边框，outset outset边框，inherit继承。单独定义某一方向的边框样式: 1234border-bottom-style 下边边框样式border-top-style 上边框样式border-left-style 左边边框样式border-right-style 右边边框样式 边框宽度border-width:,统一风格border-width:,单独风格border-top-width上边边框宽度,border-bottom-width下边边框宽度,border-left-width左边边框宽度,border-right-width右边边框宽度。边框宽度属性值：thin 细边框、medium 中等边框、thick 粗边框、px 固定值边框、inherit 继承。 边框颜色border-color:,统一风格border-color:,单独风格border-top-color 上边框颜色，border-bottom-color 下边框颜色，border-left-color 左边框颜色，border-right-color 右边框颜色。边框颜色属性值：rgb(255,255,255)、rgba(255,255,255,0~1)、十六进制 #ff0000、继承inherit。属性值的四种情况：一个值：border-color:（上、下、左、右）；两个值：border-color:（上下）（左右）；三个值：border-color:（上）、（左、右）、（下）；四个值：border-color:（上）（下）（左）（右）；简写方式：border:solid 2px #f60。 列表属性 标记类型list-style-type:； 123456789101112131415161718192021none 无标记disc 默认，标记是实心圆circle 标记是空心圆square 标记是实心方快decimal 标记是数字decimal-leading-zero 0开头的数字标记（01，02，03等）lower-roman 小写罗马数字（i，ii，iii，iv，v等）upper-roman 大写罗马数字（I，II，III，IV，V等）lower-alpha 小写英文字母（a，b，c等）upper-alpha 大写英文字幕（A，B，C等）lower-greek 小写希纳字母（alpha，beta，gamma等）lower-latin 小写拉丁字母（a，b，c，d，e等）upper-latin 大写拉丁字母（A,B,C，D，E等）hebrew 传统的希伯来编号方式armenian 传统的亚美尼亚编号方式georgian 传统的乔治亚编号方式（an，ban，gan等）cjk-ideographic 简单的表意数字hiragana 标记是：a，i，u，e，o，ka，ki等。katakana 标记是：A，I，U，E，O，KA，KI等。hiragana-iroha 标记是：i，ro，ha，ni，ho，he，to等。katakana-iroha 标记是：I，RO，HA，NI，HO，HE，TO等。 标记的位置list-style-position:,inside列表项目标记放置在文本内，且环绕文本根据标记对齐。outside是默认值，保持标记位于文本的左侧。列表项目标记放置在文本以外，且环境文本不根据标记对齐。inherit规定应该从父元素继承list-style-position属性的值。 设置图像列表标记list-style-image:,url(图像路径)，none默认，无图形被显示。inherit规定应该从父元素继承list-style-image属性的值。 简写方式：list-style:square inside url(&#39;/i/arrow.jpg&#39;); 5.div+css布局 div和span，div和span在整个HTML标记中，没有任何意义，他们的存在就是为了应用CSS样式，div和span的区别在于，span是内联元素，div是块级元素。div是块状，而span只是内容大小。 盒模型： 12345margin 盒子外边框padding 盒子内边框border 盒子边框宽度width 盒子宽度height 盒子高度 布局相关的属性 定位方式position 12345relative 正常定位absolute 根据父元素进行定位fixed 根据浏览窗口进行定位static 没有定位inherit 继承2. 定位left（左）、right（右）、top（上）、bottom（下）离页面顶点的距离。如：right:20px;为距离右边边框20像素。 z-index层覆盖先后顺序（优先级）如：z-index:2。 display显示属性，层不显示display:none;块状显示，在元素后面换行，显示下一个块元素display:block;内联显示，多个快可以显示在一行内display:inline;从内联式到块样式之间的转换。 float浮动属性，left左浮动；right右浮动； clear 清除浮动，clear:both; overflow溢出处理，hidde影藏超出层大小的内容；scroll无法显示内容是否超出层大小都添加滚动条；auto超出时自动添加滚动条。 兼容问题 兼容性测试工具：IE Tester、Multibrowser 常用的浏览器：Google chrome、Firefox、opera 高效开发工具：轻量级工具：Notepad++、sbulime Text、记事本，重量级的：WebStorm、Dreamweaver。 网页设计工具：fireworks、photoshop。 判断IE的方法： 条件判断格式&lt;!--[if 条件 版本]&gt; 那么显示 &lt;![endif]--&gt;。 不等于[if !IE 8]表示出来IE8都可以显示 小于[if lt IE 8]表示如果IE浏览器版本小于8的显示 大于[if gt IE 8]表示如果IE浏览器版本大于8的显示 小于或等于[if lte IE 8]表示如果IE浏览器版本小于8的显示 大于或等于[if gte IE 8]表示如果IE浏览器版本大于8的显示 大于和小于之间[if (gt IE 5)&amp;(lt IE 7)]表示如果IE浏览器版本大于IE5小于7的显示 或[if (IE 6)|(IE 7)]表示如果是IE6或者IE7显示 仅&lt;!–[if IE 8]&gt;表示如果是IE8 注意：条件注释只有在IE浏览器下才能执行，这样就达到了我们的效果]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo源码上传到Github上同一仓库]]></title>
    <url>%2F2019%2F04%2F01%2FHexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%B8%8A%E5%90%8C%E4%B8%80%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[在使用 Hexo 来写博客的时候，我们想在其他电脑操作上很难，那么我们如果将其放在GitHub上托管，那么就没有那么多麻烦。我们将博客搭建在 GitHub 上后，当我们使用 hexo g -d 部署到 GitHub 上以及网页上，其实没有把我们编写的 xxx.md 原博客文档上传到Github，而只是生成一些博客需要的静态的页面。但我们万事都想安全一点，假设我们硬盘坏了，数据无法恢复，那么我们的博客源文档也会不见，所以最好我们是把源代码也托管到 GitHub 上， 这个也有一个好处就是你在其他电脑上也可以同步编写博客。 你如果想把源代码上传至GitHub，那么可以上传至GitHub上的仓库，但是我们在建立博客时就已经创建了一个仓库，再创仓库就不方便管理与规划。本文说的前提是你已经建立了github pages——就是利用github搭建了个人博客。 在你的仓库下创建分支 更改默认分支 创建本地分支目录在本地磁盘新建一个文件夹（文件夹名随便只要你自己能找到和辨别出就行）用作放即将上传至仓库新建分支sourse（我建立的分支，即你自己建立分支的名字），进入文件夹，鼠标右键选择Git Bash Here 将你要上传的源代码文件和你想上传的文件粘贴到刚才创建的文件夹。 添加项目我在这里添加了几张图片和hello-world.md文件 执行命令进入上面的Git Bash Here里面输入以下命令 你可以直接克隆你的项目到目录下。 git clone https://github.com/yourname/yourname.github.io.git 然后将文件移动到新建的yourname.github.io（就是执行上面命令后产生的）文件夹里面，再在这里面打开Git Bash Here，再输入以下命令 12345678910git remote add origin https://github.com/yourname/yourname.github.io.git如果出错提示你已经有了origin可以输入以下命令git remote rm origingit add .git commit -m &quot;your description&quot;git push origin sourse如果出错就可以输入以下命令git pull origin sourse或者直接强行输入git push origin sourse -f 配置确认你的 _config.yml 配置是提交到 master 分支 1234deploy: type: git repository: git@github.com:yourname/yourname.github.io.git branch: master 结果 通过结果可以看出来在sourse文件夹下面的yourname.github.io文件夹里面的内容军上传至Github上yourname仓库的sourse分支下。 新增文件上传方法将添加文件放入到本地仓库分支里面也就是sourse文件夹下面的yourname.github.io文件夹下 然后在里面进行Git Bash Here输入以下命令 add .123git add .git commit -m &quot;your description&quot;git push origin sourse -f 我相信大家已经配置好了博客，如果没配置可以参考我的另一篇Hexo+GitHub搭建博客 文件参考：保存 Hexo 博客源码到 GitHub]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python网络爬虫爬取英雄联盟英雄图片]]></title>
    <url>%2F2019%2F03%2F28%2Fpython%E7%88%AC%E5%8F%96lol%E7%9A%AE%E8%82%A4%2F</url>
    <content type="text"><![CDATA[用python爬虫爬取lol皮肤。 这也用python网络爬虫爬取lol英雄皮肤，忘了是看哪个大神的博客（由于当时学了下就一直放在这儿，现在又才拿出来，再加上马上要考二级挺忙的。），代码基本上是没改，还望大神原谅。本人小白，没学过Python，只是去尝试体python爬虫的感觉和经验，正准备学python。忘大神勿喷。来一句：“人生苦短，我用python”。 先上一波图 个人感觉还是挺好的。下面我们就来学习一下怎样爬取？ 所需要的函数库有json re（正则表达式库） requests和time是python自带的 其中只有requests需要通过cmd命令行安装，安装方法就是在python安装目录下用cmd命令行输入下面字符 pip Install requests 由于我已经安装过了，所以提示我已经安装了。 第一步是获取英雄id ID的获取地址是从英雄联盟官网F12后在Network里找到champion.js，具体地址如下 http://lol.qq.com/biz/hero/champion.js json12345678910111213141516171819import reimport requestsimport timedef getLOLImages(): header = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36&apos;&#125; url_js = &apos;http://lol.qq.com/biz/hero/champion.js&apos; #获取JS源代码 Str bytes res_js = requests.get(url_js).content #转码 转成字符串 html_js = res_js.decode() #正则表达式 req = &apos;&quot;keys&quot;:(.*?),&quot;data&quot;&apos; list_js = re.findall(req,html_js) #转成dict dict_js = json.loads(list_js[0]) print(type(dict_js)) #定义图片列表 pic_list = [] for key in dict_js: printkey)#英雄ID 第二步就是拼接URL了，通过发现英雄皮肤url的取名方式，我们可以方向最后的数字是不同的。让后通过此方法来获取图片地址。 12345678910for i in range(20): number = str(i) if len(number) == 1: hero_num = &quot;00&quot;+number elif len(number) == 2: hero_num = &quot;0&quot;+number numstr = key+hero_num url = &quot;http://ossweb-img.qq.com/images/lol/web201310/skin/big&quot;+numstr+&quot;.jpg&quot; #http://ossweb-img.qq.com/images/lol/web201310/skin/big81000.jpg pic_list.append(url) 第三步是获取图片名称，path那行是放置图片的地址，注意结尾的\\不能丢。路径要设置成自己的。 123456list_filepath = [] path = &quot;D:\Pycharmdaima\Pachong\LOLTU\\&quot;for name in dict_js.values(): for i in range(20): file_path = path+name+str(i)+&apos;.jpg&apos; list_filepath.append(file_path) 第四步就是下载图片了，注释掉time.sleep（1）后会加速爬取速度 但是可能被腾讯中断爬取。 12345678910n = 0for picurl in pic_list: res = requests.get(picurl) n += 1 #获取状态码 if res.status_code == 200: print(&quot;正在下载%s&quot;%list_filepath[n]) time.sleep(1) with open(list_filepath[n],&apos;wb&apos;) as f: f.write(res.content) 下面是全部代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import jsonimport reimport requestsimport time#获取JS源代码 获取英雄ID#拼接URL地址#获取图片下载地址#下载图片#驼峰命名法#获取英雄图片def getLOLImages(): header = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36&apos;&#125; url_js = &apos;http://lol.qq.com/biz/hero/champion.js&apos; #获取JS源代码 Str bytes res_js = requests.get(url_js).content #转码 转成字符串 html_js = res_js.decode() #正则表达式 req = &apos;&quot;keys&quot;:(.*?),&quot;data&quot;&apos; list_js = re.findall(req,html_js) #转成dict dict_js = json.loads(list_js[0]) # print(type(dict_js))​ #定义图片列表​ pic_list = []​ for key in dict_js: # print(key)#英雄ID​ #拼接URL​ for i in range(20):​ number = str(i)​ if len(number) == 1:​ hero_num = &quot;00&quot;+number​ elif len(number) == 2:​ hero_num = &quot;0&quot;+number​ numstr = key+hero_num​ url = &quot;http://ossweb-img.qq.com/images/lol/web201310/skin/big&quot;+numstr+&quot;.jpg&quot;​ #http://ossweb-img.qq.com/images/lol/web201310/skin/big81000.jpg​ pic_list.append(url)​ #获取图片名称​ list_filepath = []​ path = &quot;D:\Pycharmdaima\Pachong\LOLTU\\&quot;​ for name in dict_js.values():​ for i in range(20):​ file_path = path+name+str(i)+&apos;.jpg&apos;​ list_filepath.append(file_path)​ #下载图片​ n = 0​ for picurl in pic_list:​ res = requests.get(picurl)​ n += 1​ #获取状态码​ if res.status_code == 200:​ print(&quot;正在下载%s&quot;%list_filepath[n])​ time.sleep(1)​ with open(list_filepath[n],&apos;wb&apos;) as f:​ f.write(res.content)getLOLImages() 以下是我的部分代码 我对以上代码也是有点懵毕竟刚接触，如果大家有意要LOL皮肤的可以给在评论去找我。展示一下，我下了所有的哈哈。。。。。。。。 最后：大家学爬虫一定要遵守法律，切勿用作商用。 来自博主的忠告：博主提醒你，爬虫不规范，牢底坐穿，亲人两行泪！]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建博客]]></title>
    <url>%2F2019%2F03%2F28%2FHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[hexo+GitHub搭建博客 1.下载并安装Git,Node.jsGit(官网)Node.js（官网）下载就不说了。安装就傻瓜式安装，直接默认就行了！ 2.配置环境变量计算机---属性---高级系统设置---环境变量----打开用户变量---点击编辑---输入变量名和将node.js安装路径粘贴到变量值中---确定完成环境配置 3.新建空博客文件夹安装hexo，在空文件夹中点击鼠标右键点击Git bash here进入命令行,输入以下命令：1$ npm install hexo-cli -g 1$ hexo init blog 1$ cd blog 1$ npm install 1$ hexo g 1$ hexo s 界面上会有一个类似http://localhost:4000的网站,界面如下： 4.注册github账号github 5.创建一个仓库#####注： GithubPages的Repository名字是特定的，比如我Github账号是abc，那么我Github Pages Repository名字就是abc.github.io。 6.设置github pages点击进入你刚刚创建好的仓库，接着点击settings，进入仓库管理，选择主题，和选择来源为master，试试在浏览器的地址栏输入”你github的用户名.github.io”吧！ 7.SSH授权1$ ssh-keygen -t rsa 接着3次回车，这样就会在C盘用户目录下生成id_rsa和id_rsa.pub这两个文件打开id_rsa.pub，复制其中的全部内容，点击github头像，再点击setting选择SSH and GPG keys，再点击NEW SSH key，将刚才复制的内容粘贴到其中 8.在_config.yml中添加复制clone or download下的git地址1234deploy: type: git repository: git@github.com:github用户名/github用户名.github.io.git branch: master 9.回到命令窗口123$ npm install hexo-deployer-git --save$ hexo g$ hexo d 或者12$ npm install hexo-deployer-git --save$ hexo g -d 最后访问https://yourname.github.io例如：博客搭建初步完成]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMware Workstation pro 15破解版安装]]></title>
    <url>%2F2019%2F03%2F26%2FVMware-15%E7%A0%B4%E8%A7%A3%E7%89%88%2F</url>
    <content type="text"><![CDATA[1.为什么要下载vmware？以及vmware是什么？俗话说“工欲善其事，必先利其器”，所以不管是学习Python还是运维以及网络安全，最好在Linux系统上。但是我们有只有一台电脑，装双系统又麻烦，所以选择在Windows上装一个虚拟机来分配一个假想的“电脑”。虚拟机主要有vxbox和vmware这两种，这里我们选择vmware，至于原因不说了。看看维基百科上面怎么说 VMware Workstation是VMware公司销售的商业软件产品之一。该工作站软件包含一个用于英特尔x86兼容计算机的虚拟机套装，其允许用户同时创建和运行多个x86虚拟机。每个虚拟机可以运行其安装的操作系统，如（但不限于）Windows、Linux、BSD变生版本。用简单术语来描述就是，VMware Workstation允许一台真实的计算机在一个操作系统中同时打开并运行数个操作系统，其它VMware产品帮助在多个宿主计算机之间管理或移植VMware虚拟机。免费版本为VMware Workstation Player。 也可以看看百度百科： VMware Workstation（中文名“威睿工作站”）是一款功能强大的桌面虚拟计算机软件，提供用户可在单一的桌面上同时运行不同的操作系统，和进行开发、测试 、部署新的应用程序的最佳解决方案。VMware Workstation可在一部实体机器上模拟完整的网络环境，以及可便于携带的虚拟机器，其更好的灵活性与先进的技术胜过了市面上其他的虚拟计算机软件。对于企业的 IT开发人员和系统管理员而言， VMware在虚拟网路，实时快照，拖曳共享文件夹，支持 PXE 等方面的特点使它成为必不可少的工 好了废话不多说了，有什么不懂自行百度就ok啦！下面言归正传 2.下载VMware Workstation Pro 15ZD423官网或者直接去百度上搜索。先看一下官网。。。。。哈哈 3.安装1.在下载目录下找到安装包并以管理员运行 2.在弹出的界面选择下一步 3.然后勾选我接受许可协议，然后点击下一步 4.点击更改选择自己要安装的位置 5.点击下一步 6.点击下一步 7.点击安装 9.点击许可证 10.输入许可证,在下面随便找一个注册码填到其中，再点击完成，完成安装 4.使用1.在桌面找到vmware workstation pro的快捷方式 2.vmware界面 5.成果我安装了国产deepin系统以及kali和ubuntu，给大家展示一下deepin国产系统 deepin介绍看百度百科 [1] Deepin 原名Linux Deepin，在2014年4月改名Deepin。Deepin团队基于Qt/C++（用于前端）和Go（用于后端）开发了的全新深度桌面环境（DDE），以及音乐播放器，视频播放器，软件中心等一系列特色软件。 Deepin是由武汉深之度科技有限公司开发的Linux发行版。Deepin 是一个基于 Linux 的操作系统，专注于使用者对日常办公、学习、生活和娱乐的操作体验的极致，适合笔记本、桌面计算机和一体机。它包含了所有您需要的应用程序，网页浏览器、幻灯片演示、文档编辑、电子表格、娱乐、声音和图片处理软件，即时通讯软件等等。Deepin 的历史可以追溯到 2004年，其前身 Hiweed Linux 是中国第一个基于 Debian的本地化衍生版，并提供轻量级的可用LiveCD，旨在创造一个全新的简单、易用、美观的 Linux 操作系统。 Deepin拥有自主设计的特色软件：深度软件中心、深度截图、深度音乐播放器和深度影音，全部使用自主的DeepinUI，其中有深度桌面环境，DeepinTalk（深谈）等。 Deepin是中国最活跃的 Linux 发行版，Deepin 为所有人提供稳定、高效的操作系统，强调安全、易用、美观。其口号为“免除新手痛苦，节约老手时间”。在社区的参与下，“让 Linux 更易用”也不断变成可以触摸的现实。 [2] 应用商店有很多windows上常用的软件,甚至还有steam，这可以说非常适合热衷于游戏党了！可以看到他还有编程开发分类页，这上面有很多软件像Pycharm等这些软件，这不需要太多Linux命令，还是汉语，上面还有终端，可以说非常适合小白和新手入门Linux。 让我们来看一下deepin上的终端 可以说相当漂亮还有多种主题选择 最后给一个deepin系统下载地址：deepin镜像 注册码： AZ7MK-44Y1J-H819Z-WMYNC-N7ATF CU702-DRD1M-H89GP-JFW5E-YL8X6 YY5EA-00XDJ-480RP-35QQV-XY8F6 UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA VF750-4MX5Q-488DQ-9WZE9-ZY2D6 UU54R-FVD91-488PP-7NNGC-ZFAX6 YC74H-FGF92-081VZ-R5QNG-P6RY4 YC34H-6WWDK-085MQ-JYPNX-NZRA2]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Html+css基础语法]]></title>
    <url>%2F2019%2F03%2F22%2Fhtml-css%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Html标记语言目录Html标记语言1.Html语法1.什么是html语言2.Html的标记和属性 语法不区分大小写 2.html的基本结构 1.&lt;html&gt;内容&lt;/html&gt; 2.&lt;head&gt;内容&lt;/head&gt; 3.&lt;title&gt;内容&lt;/title&gt; 4.&lt;body&gt;内容&lt;/body&gt; 5.&lt;meta&gt; 3.文档设置标记 1.格式标记 2.文本标记 4.图形标记 使用方法 2.注意 3.&lt;img&gt;标记属性 5.超链接的使用 6.表格 1.&lt;table&gt;…&lt;/table&gt;标记 2.&lt;caption&gt;…&lt;/caption&gt;标记 3.&lt;tr&gt;…&lt;/tr&gt;表记 7.框架 1.&lt;frameset&gt;划分框架标记： 2.&lt;frame&gt;子窗口标记： 8.表单 1.表单标记： 2.文本域和密码： 3.提交、重置、普通按钮： 4.单选框和复选框： 5.隐藏域： 6.多行文本域： 7.菜单下拉域： 1.Html语法1.什么是html语言超文本标记语言，标准通用标记语言下的一个应用。是 网页制作必备的编程语言。超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。超文本标记语言的结构包括“头”部分（英语：Head）、和“主体”部分（英语：Body），其中头”部提供关于网页的信息，“主体”部分提供网页的具体内容。2.Html的标记和属性HTML保存格式 .html .htm .xhtml标记和被标记的内容构建出HTML文档 &lt;标记&gt; 内容 &lt;/标记&gt;标记属性 就是用来控制我们的内容如何显示 格式：&lt;标记 属性1=属性值 属性2=属性值……….&gt;内容&lt;/标记&gt; 语法不区分大小写a. &lt;HTML&gt;,&lt;Html&gt;,&lt;html&gt;都是一样的意义，但是尽量使用小写 文档注释a.&lt;!—注释内容--&gt; 代码格式a.空格键和回车键在网页中都不起作用 b.使用Tab键进行缩进！ 字符实体a.什么是字符实体？字符实体通俗讲就是网页文件中复杂的符号代码和一些标点的代码。例如小于号 &lt; 大于号 &gt; 双引号 “这些符号要在浏览器中显示，在HTML文档中都必需被转化成字符实体。字符实体有三部分：一个和号 (&amp;)，一个实体名称及一个分号（；），或者 # 和一个实体编号，以及一个分号 (;)。b.常见字符实体1234567891011121314151617显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160;&lt; 小于号&amp;lt; &amp;#60;&gt; 大于号&amp;gt; &amp;#62;&amp; 和号 &amp;amp; &amp;#38;&quot; 引号 &amp;quot; &amp;#34;&apos; 撇号 &amp;apos; (IE不支持)&amp;#39;￠ 分（cent） &amp;cent; &amp;#162;£ 镑（pound） &amp;pound; &amp;#163;¥ 元（yen） &amp;yen; &amp;#165;€ 欧元（euro） &amp;euro; &amp;#8364;§ 小节 &amp;sect; &amp;#167;© 版权（copyright） &amp;copy; &amp;#169;® 注册商标 &amp;reg; &amp;#174;™ 商标 &amp;trade; &amp;#8482;× 乘号 &amp;times; &amp;#215;÷ 除号 &amp;divide; &amp;#247; 2.html的基本结构1.&lt;html&gt;内容&lt;/html&gt;Html文档的文档标记，也称为html的开始标记。分别位于网页最前端和最后段，&lt;html&gt;表示网页开始，&lt;/html&gt;表示网页的结束。2.&lt;head&gt;内容&lt;/head&gt;Html文件头标记，也称为html头信息开始标记。用来包含文件的基本信息，比如网页的标题、关键字。在其中可以放入&lt;title&gt;……&lt;/title&gt;、&lt;meta&gt;、&lt;style&gt;……&lt;/style&gt;等标记。3.&lt;title&gt;内容&lt;/title&gt;Html文件标题标记，网页的“主题”，显示在浏览器的窗口的左上角，应当注意网页的标题不能太长，像百度这种短小精悍。4.&lt;body&gt;内容&lt;/body&gt;HTML文档的主体标记，可以包含多个标记。例如：&lt;p&gt;&lt;/p&gt;、&lt;h1&gt;&lt;/h1&gt;、&lt;br&gt;&lt;/br&gt;等标记来组成我们看见的网页。Body标记常见属性：bgcolor—————–设置背景颜色———&lt;body bgcolor=&quot;blue&quot;&gt;&lt;/body&gt;text——————–设置文本颜色———-&lt;body text=&quot;red&quot;&gt;&lt;/body&gt;link———————设置连接颜色———&lt;body link=&quot;red&quot;&gt;&lt;/body&gt;vlink——————–已经访问了的链接颜色–&lt;body vlink=&quot;yellow&quot;&gt;&lt;/body&gt;alink——————–正在被点击的链接颜色–&lt;body alink=&quot;red&quot;&gt;&lt;/body&gt;5.&lt;meta&gt;页面的元信息，提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词 ` `1其中常用的name属性有author、keyworlds、description、others。&lt;meta&gt;必须放在head元素里面。&lt;meta charset=”utf-8”&gt;来设置编码格式。 3.文档设置标记1.格式标记123456789101112131415161718192021222324&lt;br&gt;强制换行标记&lt;p&gt;换段落标记&lt;center&gt;居中对齐标记&lt;pre&gt;预格式化标记&lt;li&gt;列表项目标记&lt;ul&gt;无序列表标记&lt;ol&gt;有序列表标记---&#123; &lt;ol type=”符号类型”&gt; &lt;li type=”符号类型“&gt;&lt;/li&gt; &lt;li type=”符号类型”&gt;&lt;/li&gt; ………………………………… ………………………………&lt;/ol&gt; &#125;Type属性值：1、A、a、I、iValue定义一个新的序列数字起始值，列表可以嵌套。&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;对列表条目进行简短的说明，格式：&lt;dl&gt;&lt;dt&gt;软件说明：&lt;/dt&gt;&lt;dd&gt;简单介绍软件的功能及基本应用&lt;/dd&gt;&lt;dt&gt;软件界面&lt;/dt&gt;&lt;dd&gt;用于选择软件的外观&lt;/dd&gt;&lt;/dl&gt;&lt;hr&gt;分割线————————————————————————————&lt;div&gt;分区显示标记，也称之为层标记，常用来编排一大段的html段落，也可以用于格式化表，和&lt;p&gt;很相似，可以多层嵌套使用。 2.文本标记&lt;hn&gt;&lt;/hn&gt;，标题标记，n为1到6个级别，h1最大，h6最小；&lt;font&gt;&lt;/font&gt;，字体设置标记，有size（字体大小）、color（颜色）、face（字体）。例如：。Size从1到7；12345678910&lt;b&gt;&lt;/b&gt;粗体标记；&lt;i&gt;&lt;/i&gt;斜体标记；&lt;cite&gt;&lt;/cite&gt;引用方式的字体，斜体；&lt;em&gt;&lt;/em&gt;表示强调，斜体；&lt;sub&gt;&lt;/sub&gt;文字下标字体标记；&lt;sup&gt;&lt;/sup&gt;文字上标字体标记；&lt;strong&gt;&lt;/strong&gt;表示强调，粗体；&lt;small&gt;&lt;/small&gt;小型字体标记；&lt;big&gt;&lt;/big&gt;大型字体标记;&lt;u&gt;&lt;/u&gt;下划线字体标记； 4.图形标记&lt;img&gt;图像标记 使用方法&lt;img src=”路径/文件名.图片格式或者图片网址” width=”属性值” height=”属性值” border=”属性值” alt=”属性值”&gt;2.注意&lt;img&gt;为单标记；3.&lt;img&gt;标记属性1.src属性：指定我们要加载的图片的路径和图片名称和格式2.width属性：指定图片的宽度，单位为px、em、cm、mm。3.height属性：指定图片高度，单位为px、em、cm、mm。4.border属性：指定图片的边框宽度，单位为px、em、cm、mm。5.alt属性：当网页上的图片被加载完成后，鼠标移动到上面去，会显示这个图片指定的属性文字。如果图像没有下载或者加载失败，会用文字来代替图像显示。搜索引擎可以通个这个属性的文字来抓取图片。5.超链接的使用1.基本语法&lt;a href=” ” target=”打开方式” name=“页面锚点名称” &gt;链接文字或者图片&lt;/a&gt;2.属性1.href属性：链接的的地址，链接的地址可以是一个网页，也可以是一个视频、图片、音乐等等。2.target属性：定义超链接的打开方式_blank 在一个新的窗口中打开链接；_seif(默认值)在当前页面打开；_parent 在父窗口中打开页面_top 在顶层窗口中打开文件3.name属性：指定页面的的锚点名称；6.表格1.&lt;table&gt;…&lt;/table&gt;标记1.基本格式：123456789101112131415 &lt;table width=&quot;960&quot; …… height=&quot;300&quot;(属性=”属性值”) &gt; &lt;caption&gt;表格标题&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;班级&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;四年级一班&lt;/td&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;80&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 2.table标记的属性： 1.width表示表格宽度，单位px、%。 2.height 表示表格的高度，单位px、%。 3.border 表示表格外边框的宽度，单位 4.align属性 表格显示的位置。如：align=“left”，其中left可以为center、right，默认是left。 5.cellspacing 单元格之间的间距，默认值是2px，单位为px像素。 6.cellpadding 单元格内容与单元格边框的显示距离，单位像素。 7.frame 控制表格边框最外层的四条线框：1234567891.void：默认值，表示无边框2.above：表示仅有顶部边框3.below：表示仅有底部边框4.hsides：表示仅有顶部和底部边框5.lhs：表示仅有左侧边框6.rhs：表示仅有右侧边框7.vsides：表示仅有左右侧边框8.box：表示包含全部4个边框9.border：表示包含全部4个边框 8.rules 控制单元是否显示以及如何显示单元格之间的分割线：123451.none 表示无分割线2.all 表示包括所有分割线3.rows 表示仅有行分割线4.clos 表示仅有列分割线5.groups 表示仅在行组和列祖之间有分割线 2.&lt;caption&gt;…&lt;/caption&gt;标记即表格标题标记，位于&lt;table&gt;之后，&lt;tr&gt;之前。有align属性，使用格式为&lt;caption align=”top”&gt;。top可以为bottom（表格的下部）、left（表格的左部）、right（表格的右部）。3.&lt;tr&gt;…&lt;/tr&gt;标记定义表格的一行，对于每一个表格行，都是由一对…标记表示，每一行标记内可以嵌套多个或者标记。1231.bgcolor 设置背景颜色，bgcolor=”颜色值”2.align 设置垂直方向对齐方式，align=“值”，值为top（靠底部对齐）、bottom（靠顶端对齐）、middle（居中对齐）。3.valign 设置水平方向对齐方式，valign=”值”，值为left（靠左对齐）、right（靠右对齐）、center（居中对齐）。 4.&lt;td&gt;和&lt;th&gt;标记&lt;td&gt;和&lt;th&gt;都是单元格的标记，其必须嵌套在&lt;tr&gt;标签内，是成对出现的，&lt;th&gt;是表头标记，通常位于首行或者首列，&lt;th&gt;中的文字默认会被加粗，而&lt;td&gt;不会，&lt;td&gt;是数据标记，表示该单元格的具体数据。属性有bgcolor、align、valign、width、height、rowspan(单元格所占行数)、colspan（单元格所占列数）。7.框架框架将浏览器划分成不同的部分，每一个部分加载不同的网页，实现在同一浏览器窗口中加载多个页面的效果。格式为：1234567891011121314&lt;html&gt; &lt;head&gt; &lt;title&gt;HTML框架&lt;/title&gt; &lt;meta=&quot;utf-8&quot;&gt; &lt;frameset rows=&quot;90,*,90&quot; frameborder=&quot;1&quot; border=&quot;1&quot;&gt; &lt;frame name=&quot;top&quot; src=&quot;top.html&quot;/&gt; &lt;frameset cols=&quot;30%,70%&quot;&gt; &lt;frame name=&quot;left&quot; src=&quot;left.html&quot;/&gt; &lt;frame name=&quot;right&quot; src=&quot;right.html&quot; scrolling=&quot;auto&quot;/&gt; &lt;/frameset&gt; &lt;frame name=&quot;bottom&quot; src=&quot;bottom.html&quot;/&gt; &lt;/frameset&gt; &lt;/head&gt;&lt;/html&gt; 1.&lt;frameset&gt;划分框架标记：cols：分割左右窗口，’*’表示剩余部分，’*’,’*’表示均分成两个，’*,’*’,’*’表示均分成三个，单位为像素和%比。rows：分割上下窗口，’*’表示剩余部分，’*’,’*’表示均分成两个，’*,’*’,’*’表示均分成三个，单位为像素和%比。frameborder：指定是否显示边框，0表示不显示边框，1表示显示边框。border：设置边框的大小，默认值为5像素。2.&lt;frame&gt;子窗口标记：在&lt;frameset&gt;中设置了几个窗口，就必须对应使用几个&lt;frame&gt;框架，而且还必须使用src属性指定一个网页。src：加载网页文件的URL地址；name: 框架名称，是链接标记的target所要参数；noresize：表示不能调节框架大小，没有设置时可以调整；scrolling：是否需要滚动条，根据需要可以选择yes（表示有滚动条）、no（表示无滚动条）、auto（表示根据需要自动出现）。frameborder：是否需要边框，1表示显示边框，0表示不显示边框。8.表单1.表单标记： &lt;form&gt; &lt;/form&gt;定义表单开始和结束位置，表单提交时的内容就是&lt;form&gt;表单中的内容。基本格式&lt;form action=”服务器端地址（接受表单内容的地址）” name=”表单名称” method=“post或者get“&gt;…&lt;/from&gt;。name为表单名称，method为传送数据的方式，分为post和get两种方式，get方式提交时，会将表单的内容附加在URL地址的后面，所以限制了提交内容的长度，不超过8192个字符，且不具备保密性。post方式提交时，将表单中的数据一并包含在表单主体中，一起传送到服务器中处理，没有数据大小限制，且具有保密性,默认是get方式。action是指表单数据的处理程序的URL地址，如果为空则使用当前文档的URL地址，如果表单中不需要使用action属性也要指定其属性为”no”。enctype设置表单的资料的编码方式。Target用来指定目标窗口，和超链接的属于类似。2.文本域和密码：&lt;input&gt;标记是单标记没有结束标记。&lt;input type=”” name=”” value=”” size=”” maxlength=””&gt;。type属性有text和password两种，type=”text”时，&lt;input&gt;表示一个文本输入域，type=”password”时，&lt;input&gt;表示一个密码域。name属性定义控件的名称。value属性表示初始化值，打开浏览器时，文本框中的内容。size属性设置控件的长度。maxlenght属性表示输入框中最大允许输入的字符数。3.提交、重置、普通按钮：123提交按钮： &lt;input type=”submit”&gt;;重置按钮： &lt;input type=”reset”&gt;普通按钮： &lt;input type=”button”&gt; 4.单选框和复选框：&lt;input type=”radio”&gt; ————&gt;除了初值为两个都没选，其余要选则必须选一个，且只能是一个；&lt;input type=”checkbox”&gt; ———&gt;可以选一个也可取消，或可两个都选和不选；&lt;input type=”radio” checked=”checked”&gt; ——&gt;checked为默认选项；5.隐藏域：&lt;input type=”hidden”&gt; ————&gt;隐藏表单域；6.多行文本域：&lt;textarea name=”name” rows=”n” cols=”n” value=”……”&gt;…&lt;/textarea&gt;，n指数值，rows属性指行数，cols属性指列数，单位是字符个数。7.菜单下拉域：1234567&lt;select name=”” size=”value” multiple&gt; ——&gt;multiple表示多选 &lt;option value=”value” selected&gt; value &lt;/option&gt; &lt;option value=”value”&gt; value &lt;/option&gt;&lt;option value=”value”&gt; value &lt;/option&gt; …………………………………………………………&lt;option value=”value”&gt; value &lt;/option&gt;&lt;/select&gt; &lt;option&gt;标记用来指定列表中的的一个选项，需要放在&lt;select&gt;&lt;/select&gt;之间，给选项赋值，指定传送到服务器上面的值，selected指定默认选项值。]]></content>
      <categories>
        <category>html+css</category>
      </categories>
      <tags>
        <tag>html+css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SecureCRT的安装与破解]]></title>
    <url>%2F2019%2F03%2F15%2FSecureCRT%2F</url>
    <content type="text"><![CDATA[1.下载securecrtsecurecrt下载地址: 百度网盘 提取码: fbmi 复制这段内容后打开百度网盘手机App，操作更方便哦!软件资源取自ZD423,也可以去ZD423去下载!ZD423官网找到自己要下的对应的版本下载 2. 安装 将下载下来的软件解压，然后安装scrt_sfx833-x64 选择complete 添加桌面快捷方式 安装完成 安装完成后，可以看到桌面已经有了快捷方式，先别忙打开软件 将Crack文件夹或者keygen.exe复制到SecureCRT安装路径：c &gt; program &gt; VanDyke Software &gt; Clients 以管理员身份运行keygen.exe 点击Patch，如果出现We are sorry ……………,那么就关掉重新点击注册机上的Generate按钮更换注册码，直到成功出现Path has been done successfully!字样代表成功了。 注意： 点击确定按钮后会再弹出一个界面选择LicenseHelper.exe,然后会出现同样成功的字样。 再点击桌面上的快捷方式就会弹出 一个服务器连着电脑的图形界面就成功了。3.SecureCRT的使用 在连接之前，你与要到你的Linux系统上去开启sshd服务在终端输入sudo apt-get install openssh-server 终端上显示:ssh start/running, process 2425就表示安装好了。 在终端上输入命令ifconfig 找到你虚拟机的ip，然后将IP复制到以下界面中的Hostname 然后连接进行测试，由于我使用的是ubuntu 找到SecureCRT的设置及Session Options进行设置 文件传输Zmodem先在终端上输入命令进行安装：sudo apt-get install lrzsz 从windows上传文件至linux：rz 从linux上传文件至windows：sz filename,然后在windows上的Downloads]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法的介绍]]></title>
    <url>%2F2019%2F03%2F11%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[怎样在网站上书写我们的第一篇博客吧 一、创建文章在站点文件夹中打开 git bash，输入如下命令创建文章，其中 name 为文章的标题1$ hexo new &quot;name&quot; 当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：name.md这个文件就是将要发布到网站上的原始文件，用于记录文章内容 二、编写文章（基于 Markdown）1、Markdown 简介Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式基于 Markdown 语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言 2、Markdown 语法Typora-Markdown编辑器简单而强大，支持原生的语法，也支持对应的快捷键，还可以 实时预览 Typora 的下载地址：https://www.typora.io/ 三、常用的 Markdown 语法1.标题Markdown 语法： #一级标题 ##二级标题 ###三级标题 ####四级标题 #####五级标题 ######六级标题Typora 快捷键：Ctrl+1：一级标题Ctrl+2：二级标题Ctrl+3：三级标题Ctrl+4：四级标题Ctrl+5：五级标题Ctrl+6 ：六级标题Ctrl+0：段落 2.粗体、斜体、删除线和下划线Markdown 语法：1234*斜体***粗体*****加粗斜体***~~删除线~~ Typora 快捷键：Ctrl+I：斜体Ctrl+B：粗体Ctrl+U：下划线Alt+Shift+5：删除线 3.引用块Markdown 语法：12&gt; 文字引用Typora 快捷键： Ctrl+Shift+Q 4.代码块Markdown 语法：1`行内代码` 1``` 多行代码 ``` Typora 快捷键： 行内代码：Ctrl+Shift+` 多行代码：Ctrl+Shift+K 5.公式块Markdown 语法：123$$ 数学公式$$ Typora 快捷键： Ctrl+Shift+M 6.分割线Markdown 语法：12345方法一:---方法二:+++方法三：*** 7.列表Markdown 语法：1234567.有序列表项*无序列表项+无序列表项-无序列表项 Typora 快捷键： 有序列表项：Ctrl+Shift+[ 无序列表项：Ctrl+Shift+] 8.表格Markdown 语法：1234表头1|表头2-|-|-内容11|内容12内容21|内容22 Typora 快捷键： Ctrl+T 9.超链接Markdown语法：12345方法一[](链接地址 &quot;链接描述&quot;)如[](https://www.example.com/ &quot;示例链接&quot;)方法二：&lt;链接地址&gt;如：&lt;https://www.example.com/&gt; Typora快捷键： Ctrl+K ##10.图片Markdown语法：12![图片文字](图片地址 &quot;图片描述&quot;)如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;) Typora快捷键： Ctrl+Shift+I 注: 安装插件 npm install hexo-asset-image –save 将 站点配置文件 中的 post_asset_folde: true 这样，当使用 hexo new name文章时，将同时在 source/_post 文件夹中生成一个 name文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown语法写入如：在资源文件夹（就是那个与 name文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 ![示例图片](title/example.PNG &quot;示例图片&quot;)添加图片 四、高级设置1.模板设置当我们使用命令 hexo new “title” 创建文章时，Hexo 会根据 /scaffolds/post.md 对新文章进行初始化换言之，/scaffolds/post.md 就是新文章的 模板，所以我们可以修改它来适应自己的写作习惯一个简单的示例如下：title: Markdown语法的介绍date: 1552301438923tags:categories: 2.头部设置在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 文章头部文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等一个简单的示例如下：title: Titledate: YYYY-MM-DD HH:MM:SStags: [tag1, tag2, …]categories: category注意：属性和属性值之间必须有一个空格，否则会解析错误 3.首页显示在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简这时，我们只需在文章中使用 标志即可，表示只会显示标志前面的内容 五、部署发布1$ hexo g -d 建议：在使用 hexo g 部署之后，可以先使用 hexo s 运行本地站点，然后在浏览器输入地址 http://lacolhost:4000/ 查看运行结果，检查无误后再使用 hexo d 发布]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
